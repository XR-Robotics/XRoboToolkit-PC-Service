; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Robotics Service"
#define MyAppVersion "1.0.0.0"
#define MyAppPublisher "海南创见未来科技有限公司"
#define MyAppURL "https://business.picoxr.com/"
#define MyAppExeName "run3D.exe"
#define MyAppAssocName MyAppName + " File"
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt
#define MyDateTimeString GetDateTimeString('yyyymmddhhnnss', '', '');


[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{6488AE95-0795-390D-E2BF-FE3AEF007463}
AppName={cm:MyAppName}
AppVersion={#MyAppVersion}
VersionInfoVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
ChangesAssociations=yes
DefaultGroupName={cm:MyAppName}
AllowNoIcons=yes
PrivilegesRequired=admin
ChangesEnvironment=yes
AppMutex=Global\RoboticsServiceProcessMutex

; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputDir=..\output
OutputBaseFilename=RoboticsServiceSetup{#MyAppVersion}_{#MyDateTimeString}
SetupIconFile=icon.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern
UninstallDisplayIcon={app}\icon.ico
AlwaysRestart=no
RestartIfNeededByRun=no



[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "chinese"; MessagesFile: "..\..\..\innosetup\Languages\Chinese.isl"
Name: "japanese"; MessagesFile: "compiler:Languages\Japanese.isl"
Name: "korean"; MessagesFile: "..\..\..\innosetup\Languages\Korean.isl"
Name: "italian"; MessagesFile: "compiler:Languages\Italian.isl"
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"
Name: "french"; MessagesFile: "compiler:Languages\French.isl"

[CustomMessages]
english.MyAppName=Robotics Service
chinese.MyAppName=机器人服务
japanese.MyAppName=ロボットサービス
korean.MyAppName=로봇 서비스
italian.MyAppName=Servizio Robot
spanish.MyAppName=Servicio de Robots
french.MyAppName=Service Robotique

chinese.LaunchProgram=执行 机器人服务
english.LaunchProgram=Excute Robotics Service
japanese.LaunchProgram=ロボットサービスを実行
korean.LaunchProgram=로봇 서비스 실행
italian.LaunchProgram=Esegui Servizio Robot
spanish.LaunchProgram=Ejecutar Servicio de Robots
french.LaunchProgram=Exécuter Service Robotique


[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: checkablealone


[Dirs]
Name: "{app}"; Permissions: everyone-full
Name: "{localappdata}\PICOBusinessSuitData"; Permissions: everyone-full

[Files]
Source: "..\..\bin\RoboticsServiceProcess.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "..\..\bin\*"; DestDir: "{app}"; Permissions: everyone-full; Flags: ignoreversion recursesubdirs createallsubdirs; Excludes: "*.pdb,*.lib"
Source: "..\..\bin\key-setting.ini"; DestDir: "{localappdata}\PICOBusinessSuitData"; Permissions: everyone-full; Flags: ignoreversion  onlyifdoesntexist uninsneveruninstall

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKCU; Subkey: "SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Layers"; Flags: uninsdeletekeyifempty; ValueType: string; ValueName: "{app}\{#MyAppExeName}"; ValueData: "~ HIGHDPIAWARE"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""

[Icons]
Name: "{group}\{cm:MyAppName}"; Filename: "{app}\{#MyAppExeName}";
;Name: "{group}\{cm:UninstallProgram,{cm:MyAppName}}"; Filename: "{uninstallexe}";
Name: "{autodesktop}\{cm:MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon;

[Code]
var
vcRunTimeMissing: Boolean;
isAPPReinstall: Boolean;
uninstallPathPre: String;

function IsEnglishStr(path: String): Boolean;
var
  value: Integer;
  len: Integer;
  i: Integer;
begin
  Result := true;
  len := length(path);
  for i := 1 to len do
  begin
  value := ord(path[i]);
  if (value < 0) or (value > 127) then
    begin
      Result := false;
    end;
  end;
end;

function CheckIntallPath(): Boolean;
var
languageName: string;
TipStr: string;
begin
  Result := true;
  languageName := ActiveLanguage();
  if 'chinese' = languageName then
  begin
      TipStr := '安装路径仅可包含英文字符';
  end
  else if 'english' = languageName then
  begin
      TipStr := 'Installation path can only contain English characters';
  end
  else if 'japanese' = languageName then
  begin
      TipStr := 'インストールパスには英字のみ使用できます';
  end
  else if 'korean' = languageName then
  begin
      TipStr := '설치 경로에는 영문자만 포함할 수 있습니다.';
  end
  else if 'italian' =  languageName then
  begin
      TipStr := 'Il percorso di installazione può contenere solo caratteri in lingua inglese';
  end
  else if 'spanish' =  languageName then
  begin
      TipStr := 'La ruta de instalación solo puede contener caracteres latinos';
  end
  else if 'french' =  languageName then
  begin
      TipStr := 'Le chemin d''installation ne peut contenir que des caractères anglais';
  end;
  if(IsEnglishStr(WizardDirValue()) = false) then
  begin
    MsgBox(TipStr, mbError, MB_OK);
    Result := false;
  end;
end;

function NeedInstallVCRuntime(): Boolean;
begin
  Result := vcRunTimeMissing;
end;

function InitializeSetup(): boolean;
var
ResultStr: String;
ResultCode: Integer;
vcVersion: Cardinal;
begin
if RegQueryStringValue(HKLM, 'SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{6488AE95-0795-390D-E2BF-FE3AEF007463}_is1', 'InstallLocation', uninstallPathPre) then
begin
  isAPPReinstall := true
  CreateDir(ExpandConstant('{localappdata}')+'\PICOBusinessSuitData')
  FileCopy(uninstallPathPre+'key-setting.ini',ExpandConstant('{localappdata}')+'\PICOBusinessSuitData\key-setting.ini',true);
  FileCopy(uninstallPathPre+'epDB.s3db',ExpandConstant('{localappdata}')+'\PICOBusinessSuitData\epDB.s3db',true);
  SetIniString('InStallType','Type','reinstall',ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
  if 'Overseas' = GetIniString('RTC','WanTokenUrl','',uninstallPathPre+'setting.ini') then
  begin
      SetIniBool('InStallType','AppTypeDiff',true,ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
  end
  else
  begin
      SetIniBool('InStallType','AppTypeDiff',false,ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
  end;
  SetIniString('InStallType','AppType','internal',ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
  StringChangeEx(uninstallPathPre, '\', '/', True)
  SetIniString('InStallType','Path',uninstallPathPre,ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
end
else
begin
  isAPPReinstall := false
end;

if RegQueryStringValue(HKLM, 'SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{6488AE95-0795-390D-E2BF-FE3AEF007463}_is1', 'UninstallString', ResultStr) then
begin
  ResultStr := RemoveQuotes(ResultStr);
  Exec(ResultStr, '/silent', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;
if RegQueryDWordValue(HKLM, 'SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{12www3213213}', 'Version', vcVersion) = false then
begin
  vcRunTimeMissing := true;
end;
result := true;
end;

function NextButtonClick(CurPageID:Integer):Boolean;
begin
  Result := True;
  if (CurPageID = wpSelectDir) then
  begin
    Result := CheckIntallPath();
  end;
end;

procedure SetEnv(aEnvName, aEnvValue: string; aIsInstall, aIsInsForAllUser: Boolean);
var
sOrgValue: string;
sFileName: string;
S1: AnsiString;
bRetValue, bInsForAllUser: Boolean;
SL: TStringList;
x: integer;
begin
bInsForAllUser := aIsInsForAllUser;
if UsingWinNT then
begin
    if bInsForAllUser then
      bRetValue := RegQueryStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', aEnvName, sOrgValue)
    else
      bRetValue := RegQueryStringValue(HKEY_CURRENT_USER, 'Environment', aEnvName, sOrgValue);
    sOrgValue := Trim(sOrgValue);
    begin
      S1 := aEnvValue;
      if pos(Uppercase(s1), Uppercase(sOrgValue)) = 0 then //还没有加入
      begin
        if aIsInstall then
        begin
          x := Length(sOrgValue);
          if (x > 0) and (StringOfChar(sOrgValue[x], 1) <> ';') then
            sOrgValue := sOrgValue + ';';
          sOrgValue := sOrgValue + S1;
        end;
      end else
      begin
        if not aIsInstall then
        begin
          StringChangeEx(sOrgValue, S1 + ';', '', True);
          StringChangeEx(sOrgValue, S1, '', True);
        end;
      end;

      if bInsForAllUser then
        RegWriteStringValue(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', aEnvName, sOrgValue)
      else
      begin
        if (not aIsInstall) and (Trim(sOrgValue) = '') then
          RegDeleteValue(HKEY_CURRENT_USER, 'Environment', aEnvName)
        else
          RegWriteStringValue(HKEY_CURRENT_USER, 'Environment', aEnvName, sOrgValue);
      end;
    end;
end else
begin
    SL := TStringList.Create;
    try
      sFileName := ExpandConstant('{sd}\autoexec.bat');
      LoadStringFromFile(sFileName, S1);
      SL.Text := s1;
      s1 :=   '"' + aEnvValue + '"';
      s1 := 'set '+aEnvName +'=%path%;' + s1 ;

      bRetValue := False;
      x := SL.IndexOf(s1);
      if x = -1 then
      begin
        if aIsInstall then
        begin
          SL.Add(s1);
          bRetValue := True;
        end;
      end else
        if not aIsInstall then
        begin
          SL.Delete(x);
          bRetValue := True;
        end;

      if bRetValue then
        SL.SaveToFile(sFileName);
    finally
      SL.free;
    end;

end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
languageName: string;
ResultCode: Integer;
installBat: string;
begin
  if CurStep = ssInstall then
  begin
     SetEnv('Path',ExpandConstant('{app}\SDK\x64'),true,true);
  end;

  if CurStep=ssPostInstall then
  begin
    if isAPPReinstall then
    begin
    end;

    Exec(ExpandConstant('{app}\install.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    languageName := ActiveLanguage();
    if 'chinese' = languageName then
    begin
      SetIniString('ChangeLanguage','Language','CN',ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
    end
    else if 'english' = languageName then
    begin
      SetIniString('ChangeLanguage','Language','EN',ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
    end
		else if 'japanese' = languageName then
    begin
      SetIniString('ChangeLanguage','Language','JP',ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
    end
    else if 'korean' = languageName then
    begin
      SetIniString('ChangeLanguage','Language','KR',ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
    end
    else if 'italian' = languageName then
    begin
      SetIniString('ChangeLanguage','Language','IT',ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
    end
    else if 'spanish' = languageName then
    begin
      SetIniString('ChangeLanguage','Language','ES',ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
    end
    else if 'french' = languageName then
    begin
      SetIniString('ChangeLanguage','Language','FR',ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
    end;
    SetIniString('UI','currentForm','5',ExpandConstant('{localappdata}/PICOBusinessSuitData/key-setting.ini'));
  end;

  if CurStep=ssDone  then
  begin
  end;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
ResultCode: Integer;
begin
if CurUninstallStep = usUninstall then
begin
  SetEnv('Path',ExpandConstant('{app}\SDK\x64'),false,true);
  Exec(ExpandConstant('{app}\uninstallScript.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;
end;

[Run]
Filename: "{sys}\ie4uinit.exe"; Parameters: "-show"; Flags: 64bit
Filename: "{app}\VC_redist.x86.exe"; Parameters: "/i ""{app}\VC_redist.x86.exe"" /quiet /norestart";StatusMsg:"Installing Microsoft VCRuntime Redistributable ...";  Check: NeedInstallVCRuntime
Filename: "{app}\VC_redist.x64.exe"; Parameters: "/i ""{app}\VC_redist.x64.exe"" /quiet /norestart";StatusMsg:"Installing Microsoft VCRuntime Redistributable ...";  Check: NeedInstallVCRuntime

