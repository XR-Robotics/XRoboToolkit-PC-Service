// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: PXREAService.proto

#include "PXREAService.pb.h"
#include "PXREAService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace PXREAService {

static const char* EAService_method_names[] = {
  "/PXREAService.EAService/SendTexHandle",
  "/PXREAService.EAService/GetBattery",
  "/PXREAService.EAService/StartControlDevice",
  "/PXREAService.EAService/StopControlDevice",
  "/PXREAService.EAService/LockDevice",
  "/PXREAService.EAService/UnlockDevice",
  "/PXREAService.EAService/StartPlayVideo",
  "/PXREAService.EAService/StopPlayVideo",
  "/PXREAService.EAService/SeekVideoTime",
  "/PXREAService.EAService/PauseVideo",
  "/PXREAService.EAService/ContinueVideo",
  "/PXREAService.EAService/StartPlayApp",
  "/PXREAService.EAService/StopPlayApp",
  "/PXREAService.EAService/StartPlayPicture",
  "/PXREAService.EAService/StopPlayPicture",
  "/PXREAService.EAService/SetDeviceVolumn",
  "/PXREAService.EAService/BackToHome",
  "/PXREAService.EAService/ShutDownDevice",
  "/PXREAService.EAService/RestartDevice",
  "/PXREAService.EAService/SendBytesToDevice",
  "/PXREAService.EAService/SendBytesToRoom",
  "/PXREAService.EAService/StartMonitorScreen",
  "/PXREAService.EAService/SetMonitorScreenQuality",
  "/PXREAService.EAService/StopMonitorScreen",
  "/PXREAService.EAService/StartMonitorStream",
  "/PXREAService.EAService/StopMonitorStream",
  "/PXREAService.EAService/WatchServerFeedback",
  "/PXREAService.EAService/CancelServerFeedback",
  "/PXREAService.EAService/SendBeat",
  "/PXREAService.EAService/GetCurrentApp",
  "/PXREAService.EAService/GetDeviceModel",
  "/PXREAService.EAService/GetControllerBattery",
  "/PXREAService.EAService/SetScreenState",
  "/PXREAService.EAService/GetScreenState",
  "/PXREAService.EAService/CustomControllerHomeButtonFunction",
  "/PXREAService.EAService/RecenterView",
  "/PXREAService.EAService/SetDeviceAlias",
  "/PXREAService.EAService/GetDeviceAlias",
  "/PXREAService.EAService/DeviceControlJson",
};

std::unique_ptr< EAService::Stub> EAService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EAService::Stub> stub(new EAService::Stub(channel, options));
  return stub;
}

EAService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendTexHandle_(EAService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBattery_(EAService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartControlDevice_(EAService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopControlDevice_(EAService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LockDevice_(EAService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockDevice_(EAService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartPlayVideo_(EAService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopPlayVideo_(EAService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SeekVideoTime_(EAService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseVideo_(EAService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ContinueVideo_(EAService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartPlayApp_(EAService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopPlayApp_(EAService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartPlayPicture_(EAService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopPlayPicture_(EAService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDeviceVolumn_(EAService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BackToHome_(EAService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShutDownDevice_(EAService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestartDevice_(EAService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendBytesToDevice_(EAService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendBytesToRoom_(EAService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartMonitorScreen_(EAService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMonitorScreenQuality_(EAService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopMonitorScreen_(EAService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartMonitorStream_(EAService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopMonitorStream_(EAService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchServerFeedback_(EAService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CancelServerFeedback_(EAService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendBeat_(EAService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrentApp_(EAService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceModel_(EAService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetControllerBattery_(EAService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetScreenState_(EAService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetScreenState_(EAService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CustomControllerHomeButtonFunction_(EAService_method_names[34], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecenterView_(EAService_method_names[35], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetDeviceAlias_(EAService_method_names[36], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceAlias_(EAService_method_names[37], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeviceControlJson_(EAService_method_names[38], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EAService::Stub::SendTexHandle(::grpc::ClientContext* context, const ::PXREAService::TexHandleInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::TexHandleInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendTexHandle_, context, request, response);
}

void EAService::Stub::async::SendTexHandle(::grpc::ClientContext* context, const ::PXREAService::TexHandleInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::TexHandleInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendTexHandle_, context, request, response, std::move(f));
}

void EAService::Stub::async::SendTexHandle(::grpc::ClientContext* context, const ::PXREAService::TexHandleInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendTexHandle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncSendTexHandleRaw(::grpc::ClientContext* context, const ::PXREAService::TexHandleInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::TexHandleInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendTexHandle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncSendTexHandleRaw(::grpc::ClientContext* context, const ::PXREAService::TexHandleInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendTexHandleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::GetBattery(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBattery_, context, request, response);
}

void EAService::Stub::async::GetBattery(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBattery_, context, request, response, std::move(f));
}

void EAService::Stub::async::GetBattery(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBattery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncGetBatteryRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBattery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncGetBatteryRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBatteryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::StartControlDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartControlDevice_, context, request, response);
}

void EAService::Stub::async::StartControlDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartControlDevice_, context, request, response, std::move(f));
}

void EAService::Stub::async::StartControlDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartControlDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncStartControlDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartControlDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncStartControlDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartControlDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::StopControlDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopControlDevice_, context, request, response);
}

void EAService::Stub::async::StopControlDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopControlDevice_, context, request, response, std::move(f));
}

void EAService::Stub::async::StopControlDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopControlDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncStopControlDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopControlDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncStopControlDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopControlDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::LockDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LockDevice_, context, request, response);
}

void EAService::Stub::async::LockDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LockDevice_, context, request, response, std::move(f));
}

void EAService::Stub::async::LockDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LockDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncLockDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LockDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncLockDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLockDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::UnlockDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnlockDevice_, context, request, response);
}

void EAService::Stub::async::UnlockDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockDevice_, context, request, response, std::move(f));
}

void EAService::Stub::async::UnlockDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncUnlockDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnlockDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncUnlockDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::StartPlayVideo(::grpc::ClientContext* context, const ::PXREAService::VideoPlayInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::VideoPlayInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartPlayVideo_, context, request, response);
}

void EAService::Stub::async::StartPlayVideo(::grpc::ClientContext* context, const ::PXREAService::VideoPlayInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::VideoPlayInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartPlayVideo_, context, request, response, std::move(f));
}

void EAService::Stub::async::StartPlayVideo(::grpc::ClientContext* context, const ::PXREAService::VideoPlayInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartPlayVideo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncStartPlayVideoRaw(::grpc::ClientContext* context, const ::PXREAService::VideoPlayInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::VideoPlayInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartPlayVideo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncStartPlayVideoRaw(::grpc::ClientContext* context, const ::PXREAService::VideoPlayInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartPlayVideoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::StopPlayVideo(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopPlayVideo_, context, request, response);
}

void EAService::Stub::async::StopPlayVideo(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopPlayVideo_, context, request, response, std::move(f));
}

void EAService::Stub::async::StopPlayVideo(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopPlayVideo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncStopPlayVideoRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopPlayVideo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncStopPlayVideoRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopPlayVideoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::SeekVideoTime(::grpc::ClientContext* context, const ::PXREAService::VideoSeekInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::VideoSeekInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SeekVideoTime_, context, request, response);
}

void EAService::Stub::async::SeekVideoTime(::grpc::ClientContext* context, const ::PXREAService::VideoSeekInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::VideoSeekInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SeekVideoTime_, context, request, response, std::move(f));
}

void EAService::Stub::async::SeekVideoTime(::grpc::ClientContext* context, const ::PXREAService::VideoSeekInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SeekVideoTime_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncSeekVideoTimeRaw(::grpc::ClientContext* context, const ::PXREAService::VideoSeekInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::VideoSeekInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SeekVideoTime_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncSeekVideoTimeRaw(::grpc::ClientContext* context, const ::PXREAService::VideoSeekInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSeekVideoTimeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::PauseVideo(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PauseVideo_, context, request, response);
}

void EAService::Stub::async::PauseVideo(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseVideo_, context, request, response, std::move(f));
}

void EAService::Stub::async::PauseVideo(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseVideo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncPauseVideoRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PauseVideo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncPauseVideoRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseVideoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::ContinueVideo(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ContinueVideo_, context, request, response);
}

void EAService::Stub::async::ContinueVideo(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContinueVideo_, context, request, response, std::move(f));
}

void EAService::Stub::async::ContinueVideo(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ContinueVideo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncContinueVideoRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ContinueVideo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncContinueVideoRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncContinueVideoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::StartPlayApp(::grpc::ClientContext* context, const ::PXREAService::AppPlayInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::AppPlayInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartPlayApp_, context, request, response);
}

void EAService::Stub::async::StartPlayApp(::grpc::ClientContext* context, const ::PXREAService::AppPlayInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::AppPlayInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartPlayApp_, context, request, response, std::move(f));
}

void EAService::Stub::async::StartPlayApp(::grpc::ClientContext* context, const ::PXREAService::AppPlayInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartPlayApp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncStartPlayAppRaw(::grpc::ClientContext* context, const ::PXREAService::AppPlayInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::AppPlayInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartPlayApp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncStartPlayAppRaw(::grpc::ClientContext* context, const ::PXREAService::AppPlayInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartPlayAppRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::StopPlayApp(::grpc::ClientContext* context, const ::PXREAService::AppPlayInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::AppPlayInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopPlayApp_, context, request, response);
}

void EAService::Stub::async::StopPlayApp(::grpc::ClientContext* context, const ::PXREAService::AppPlayInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::AppPlayInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopPlayApp_, context, request, response, std::move(f));
}

void EAService::Stub::async::StopPlayApp(::grpc::ClientContext* context, const ::PXREAService::AppPlayInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopPlayApp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncStopPlayAppRaw(::grpc::ClientContext* context, const ::PXREAService::AppPlayInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::AppPlayInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopPlayApp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncStopPlayAppRaw(::grpc::ClientContext* context, const ::PXREAService::AppPlayInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopPlayAppRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::StartPlayPicture(::grpc::ClientContext* context, const ::PXREAService::PicPlayInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::PicPlayInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartPlayPicture_, context, request, response);
}

void EAService::Stub::async::StartPlayPicture(::grpc::ClientContext* context, const ::PXREAService::PicPlayInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::PicPlayInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartPlayPicture_, context, request, response, std::move(f));
}

void EAService::Stub::async::StartPlayPicture(::grpc::ClientContext* context, const ::PXREAService::PicPlayInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartPlayPicture_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncStartPlayPictureRaw(::grpc::ClientContext* context, const ::PXREAService::PicPlayInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::PicPlayInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartPlayPicture_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncStartPlayPictureRaw(::grpc::ClientContext* context, const ::PXREAService::PicPlayInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartPlayPictureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::StopPlayPicture(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopPlayPicture_, context, request, response);
}

void EAService::Stub::async::StopPlayPicture(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopPlayPicture_, context, request, response, std::move(f));
}

void EAService::Stub::async::StopPlayPicture(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopPlayPicture_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncStopPlayPictureRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopPlayPicture_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncStopPlayPictureRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopPlayPictureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::SetDeviceVolumn(::grpc::ClientContext* context, const ::PXREAService::DeviceVolumnInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceVolumnInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDeviceVolumn_, context, request, response);
}

void EAService::Stub::async::SetDeviceVolumn(::grpc::ClientContext* context, const ::PXREAService::DeviceVolumnInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceVolumnInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceVolumn_, context, request, response, std::move(f));
}

void EAService::Stub::async::SetDeviceVolumn(::grpc::ClientContext* context, const ::PXREAService::DeviceVolumnInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceVolumn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncSetDeviceVolumnRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceVolumnInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceVolumnInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDeviceVolumn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncSetDeviceVolumnRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceVolumnInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDeviceVolumnRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::BackToHome(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BackToHome_, context, request, response);
}

void EAService::Stub::async::BackToHome(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BackToHome_, context, request, response, std::move(f));
}

void EAService::Stub::async::BackToHome(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BackToHome_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncBackToHomeRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BackToHome_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncBackToHomeRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBackToHomeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::ShutDownDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShutDownDevice_, context, request, response);
}

void EAService::Stub::async::ShutDownDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutDownDevice_, context, request, response, std::move(f));
}

void EAService::Stub::async::ShutDownDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShutDownDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncShutDownDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShutDownDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncShutDownDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShutDownDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::RestartDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RestartDevice_, context, request, response);
}

void EAService::Stub::async::RestartDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RestartDevice_, context, request, response, std::move(f));
}

void EAService::Stub::async::RestartDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RestartDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncRestartDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RestartDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncRestartDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRestartDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::SendBytesToDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceBytesInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceBytesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendBytesToDevice_, context, request, response);
}

void EAService::Stub::async::SendBytesToDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceBytesInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceBytesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBytesToDevice_, context, request, response, std::move(f));
}

void EAService::Stub::async::SendBytesToDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceBytesInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBytesToDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncSendBytesToDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceBytesInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceBytesInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendBytesToDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncSendBytesToDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceBytesInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendBytesToDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::SendBytesToRoom(::grpc::ClientContext* context, const ::PXREAService::RoomBytesInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::RoomBytesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendBytesToRoom_, context, request, response);
}

void EAService::Stub::async::SendBytesToRoom(::grpc::ClientContext* context, const ::PXREAService::RoomBytesInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::RoomBytesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBytesToRoom_, context, request, response, std::move(f));
}

void EAService::Stub::async::SendBytesToRoom(::grpc::ClientContext* context, const ::PXREAService::RoomBytesInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBytesToRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncSendBytesToRoomRaw(::grpc::ClientContext* context, const ::PXREAService::RoomBytesInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::RoomBytesInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendBytesToRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncSendBytesToRoomRaw(::grpc::ClientContext* context, const ::PXREAService::RoomBytesInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendBytesToRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::StartMonitorScreen(::grpc::ClientContext* context, const ::PXREAService::ScreenMonitorParameter& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::ScreenMonitorParameter, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartMonitorScreen_, context, request, response);
}

void EAService::Stub::async::StartMonitorScreen(::grpc::ClientContext* context, const ::PXREAService::ScreenMonitorParameter* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::ScreenMonitorParameter, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartMonitorScreen_, context, request, response, std::move(f));
}

void EAService::Stub::async::StartMonitorScreen(::grpc::ClientContext* context, const ::PXREAService::ScreenMonitorParameter* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartMonitorScreen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncStartMonitorScreenRaw(::grpc::ClientContext* context, const ::PXREAService::ScreenMonitorParameter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::ScreenMonitorParameter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartMonitorScreen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncStartMonitorScreenRaw(::grpc::ClientContext* context, const ::PXREAService::ScreenMonitorParameter& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartMonitorScreenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::SetMonitorScreenQuality(::grpc::ClientContext* context, const ::PXREAService::ScreenMonitorParameter& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::ScreenMonitorParameter, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMonitorScreenQuality_, context, request, response);
}

void EAService::Stub::async::SetMonitorScreenQuality(::grpc::ClientContext* context, const ::PXREAService::ScreenMonitorParameter* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::ScreenMonitorParameter, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMonitorScreenQuality_, context, request, response, std::move(f));
}

void EAService::Stub::async::SetMonitorScreenQuality(::grpc::ClientContext* context, const ::PXREAService::ScreenMonitorParameter* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMonitorScreenQuality_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncSetMonitorScreenQualityRaw(::grpc::ClientContext* context, const ::PXREAService::ScreenMonitorParameter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::ScreenMonitorParameter, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMonitorScreenQuality_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncSetMonitorScreenQualityRaw(::grpc::ClientContext* context, const ::PXREAService::ScreenMonitorParameter& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMonitorScreenQualityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::StopMonitorScreen(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopMonitorScreen_, context, request, response);
}

void EAService::Stub::async::StopMonitorScreen(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopMonitorScreen_, context, request, response, std::move(f));
}

void EAService::Stub::async::StopMonitorScreen(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopMonitorScreen_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncStopMonitorScreenRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopMonitorScreen_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncStopMonitorScreenRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopMonitorScreenRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::StartMonitorStream(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartMonitorStream_, context, request, response);
}

void EAService::Stub::async::StartMonitorStream(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartMonitorStream_, context, request, response, std::move(f));
}

void EAService::Stub::async::StartMonitorStream(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartMonitorStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncStartMonitorStreamRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartMonitorStream_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncStartMonitorStreamRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartMonitorStreamRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::StopMonitorStream(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopMonitorStream_, context, request, response);
}

void EAService::Stub::async::StopMonitorStream(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopMonitorStream_, context, request, response, std::move(f));
}

void EAService::Stub::async::StopMonitorStream(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopMonitorStream_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncStopMonitorStreamRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopMonitorStream_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncStopMonitorStreamRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopMonitorStreamRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::PXREAService::ServerFeedback>* EAService::Stub::WatchServerFeedbackRaw(::grpc::ClientContext* context, const ::PXREAService::VRPid& request) {
  return ::grpc::internal::ClientReaderFactory< ::PXREAService::ServerFeedback>::Create(channel_.get(), rpcmethod_WatchServerFeedback_, context, request);
}

void EAService::Stub::async::WatchServerFeedback(::grpc::ClientContext* context, const ::PXREAService::VRPid* request, ::grpc::ClientReadReactor< ::PXREAService::ServerFeedback>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::PXREAService::ServerFeedback>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchServerFeedback_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::PXREAService::ServerFeedback>* EAService::Stub::AsyncWatchServerFeedbackRaw(::grpc::ClientContext* context, const ::PXREAService::VRPid& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::PXREAService::ServerFeedback>::Create(channel_.get(), cq, rpcmethod_WatchServerFeedback_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::PXREAService::ServerFeedback>* EAService::Stub::PrepareAsyncWatchServerFeedbackRaw(::grpc::ClientContext* context, const ::PXREAService::VRPid& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::PXREAService::ServerFeedback>::Create(channel_.get(), cq, rpcmethod_WatchServerFeedback_, context, request, false, nullptr);
}

::grpc::Status EAService::Stub::CancelServerFeedback(::grpc::ClientContext* context, const ::PXREAService::VRPid& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::VRPid, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelServerFeedback_, context, request, response);
}

void EAService::Stub::async::CancelServerFeedback(::grpc::ClientContext* context, const ::PXREAService::VRPid* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::VRPid, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelServerFeedback_, context, request, response, std::move(f));
}

void EAService::Stub::async::CancelServerFeedback(::grpc::ClientContext* context, const ::PXREAService::VRPid* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelServerFeedback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncCancelServerFeedbackRaw(::grpc::ClientContext* context, const ::PXREAService::VRPid& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::VRPid, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelServerFeedback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncCancelServerFeedbackRaw(::grpc::ClientContext* context, const ::PXREAService::VRPid& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelServerFeedbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::SendBeat(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendBeat_, context, request, response);
}

void EAService::Stub::async::SendBeat(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBeat_, context, request, response, std::move(f));
}

void EAService::Stub::async::SendBeat(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncSendBeatRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendBeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncSendBeatRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendBeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::GetCurrentApp(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCurrentApp_, context, request, response);
}

void EAService::Stub::async::GetCurrentApp(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentApp_, context, request, response, std::move(f));
}

void EAService::Stub::async::GetCurrentApp(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCurrentApp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncGetCurrentAppRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCurrentApp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncGetCurrentAppRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCurrentAppRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::GetDeviceModel(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceModel_, context, request, response);
}

void EAService::Stub::async::GetDeviceModel(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceModel_, context, request, response, std::move(f));
}

void EAService::Stub::async::GetDeviceModel(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceModel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncGetDeviceModelRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceModel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncGetDeviceModelRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceModelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::GetControllerBattery(::grpc::ClientContext* context, const ::PXREAService::ControllerInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::ControllerInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetControllerBattery_, context, request, response);
}

void EAService::Stub::async::GetControllerBattery(::grpc::ClientContext* context, const ::PXREAService::ControllerInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::ControllerInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetControllerBattery_, context, request, response, std::move(f));
}

void EAService::Stub::async::GetControllerBattery(::grpc::ClientContext* context, const ::PXREAService::ControllerInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetControllerBattery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncGetControllerBatteryRaw(::grpc::ClientContext* context, const ::PXREAService::ControllerInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::ControllerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetControllerBattery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncGetControllerBatteryRaw(::grpc::ClientContext* context, const ::PXREAService::ControllerInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetControllerBatteryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::SetScreenState(::grpc::ClientContext* context, const ::PXREAService::ScreenStateInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::ScreenStateInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetScreenState_, context, request, response);
}

void EAService::Stub::async::SetScreenState(::grpc::ClientContext* context, const ::PXREAService::ScreenStateInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::ScreenStateInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetScreenState_, context, request, response, std::move(f));
}

void EAService::Stub::async::SetScreenState(::grpc::ClientContext* context, const ::PXREAService::ScreenStateInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetScreenState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncSetScreenStateRaw(::grpc::ClientContext* context, const ::PXREAService::ScreenStateInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::ScreenStateInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetScreenState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncSetScreenStateRaw(::grpc::ClientContext* context, const ::PXREAService::ScreenStateInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetScreenStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::GetScreenState(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetScreenState_, context, request, response);
}

void EAService::Stub::async::GetScreenState(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetScreenState_, context, request, response, std::move(f));
}

void EAService::Stub::async::GetScreenState(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetScreenState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncGetScreenStateRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetScreenState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncGetScreenStateRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetScreenStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::CustomControllerHomeButtonFunction(::grpc::ClientContext* context, const ::PXREAService::ControllerHomeButtonFunction& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::ControllerHomeButtonFunction, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CustomControllerHomeButtonFunction_, context, request, response);
}

void EAService::Stub::async::CustomControllerHomeButtonFunction(::grpc::ClientContext* context, const ::PXREAService::ControllerHomeButtonFunction* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::ControllerHomeButtonFunction, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CustomControllerHomeButtonFunction_, context, request, response, std::move(f));
}

void EAService::Stub::async::CustomControllerHomeButtonFunction(::grpc::ClientContext* context, const ::PXREAService::ControllerHomeButtonFunction* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CustomControllerHomeButtonFunction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncCustomControllerHomeButtonFunctionRaw(::grpc::ClientContext* context, const ::PXREAService::ControllerHomeButtonFunction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::ControllerHomeButtonFunction, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CustomControllerHomeButtonFunction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncCustomControllerHomeButtonFunctionRaw(::grpc::ClientContext* context, const ::PXREAService::ControllerHomeButtonFunction& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCustomControllerHomeButtonFunctionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::RecenterView(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RecenterView_, context, request, response);
}

void EAService::Stub::async::RecenterView(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecenterView_, context, request, response, std::move(f));
}

void EAService::Stub::async::RecenterView(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RecenterView_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncRecenterViewRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RecenterView_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncRecenterViewRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRecenterViewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::SetDeviceAlias(::grpc::ClientContext* context, const ::PXREAService::DeviceAliasInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceAliasInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDeviceAlias_, context, request, response);
}

void EAService::Stub::async::SetDeviceAlias(::grpc::ClientContext* context, const ::PXREAService::DeviceAliasInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceAliasInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceAlias_, context, request, response, std::move(f));
}

void EAService::Stub::async::SetDeviceAlias(::grpc::ClientContext* context, const ::PXREAService::DeviceAliasInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDeviceAlias_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncSetDeviceAliasRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceAliasInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceAliasInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDeviceAlias_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncSetDeviceAliasRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceAliasInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDeviceAliasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::GetDeviceAlias(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceAlias_, context, request, response);
}

void EAService::Stub::async::GetDeviceAlias(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceAlias_, context, request, response, std::move(f));
}

void EAService::Stub::async::GetDeviceAlias(::grpc::ClientContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceAlias_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncGetDeviceAliasRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceAlias_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncGetDeviceAliasRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceAliasRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::DeviceControlJson(::grpc::ClientContext* context, const ::PXREAService::DeviceControlParameterJson& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceControlParameterJson, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeviceControlJson_, context, request, response);
}

void EAService::Stub::async::DeviceControlJson(::grpc::ClientContext* context, const ::PXREAService::DeviceControlParameterJson* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceControlParameterJson, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeviceControlJson_, context, request, response, std::move(f));
}

void EAService::Stub::async::DeviceControlJson(::grpc::ClientContext* context, const ::PXREAService::DeviceControlParameterJson* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeviceControlJson_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncDeviceControlJsonRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceControlParameterJson& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceControlParameterJson, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeviceControlJson_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncDeviceControlJsonRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceControlParameterJson& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeviceControlJsonRaw(context, request, cq);
  result->StartCall();
  return result;
}

EAService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::TexHandleInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::TexHandleInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->SendTexHandle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->GetBattery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->StartControlDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->StopControlDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->LockDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->UnlockDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::VideoPlayInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::VideoPlayInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->StartPlayVideo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->StopPlayVideo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::VideoSeekInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::VideoSeekInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->SeekVideoTime(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->PauseVideo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->ContinueVideo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::AppPlayInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::AppPlayInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->StartPlayApp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::AppPlayInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::AppPlayInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->StopPlayApp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::PicPlayInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::PicPlayInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->StartPlayPicture(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->StopPlayPicture(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceVolumnInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceVolumnInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->SetDeviceVolumn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->BackToHome(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->ShutDownDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->RestartDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceBytesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceBytesInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->SendBytesToDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::RoomBytesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::RoomBytesInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->SendBytesToRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::ScreenMonitorParameter, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::ScreenMonitorParameter* req,
             ::google::protobuf::Empty* resp) {
               return service->StartMonitorScreen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::ScreenMonitorParameter, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::ScreenMonitorParameter* req,
             ::google::protobuf::Empty* resp) {
               return service->SetMonitorScreenQuality(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->StopMonitorScreen(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->StartMonitorStream(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->StopMonitorStream(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[26],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EAService::Service, ::PXREAService::VRPid, ::PXREAService::ServerFeedback>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::VRPid* req,
             ::grpc::ServerWriter<::PXREAService::ServerFeedback>* writer) {
               return service->WatchServerFeedback(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::VRPid, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::VRPid* req,
             ::google::protobuf::Empty* resp) {
               return service->CancelServerFeedback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SendBeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->GetCurrentApp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->GetDeviceModel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::ControllerInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::ControllerInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->GetControllerBattery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::ScreenStateInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::ScreenStateInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->SetScreenState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->GetScreenState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::ControllerHomeButtonFunction, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::ControllerHomeButtonFunction* req,
             ::google::protobuf::Empty* resp) {
               return service->CustomControllerHomeButtonFunction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->RecenterView(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceAliasInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceAliasInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->SetDeviceAlias(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceID, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceID* req,
             ::google::protobuf::Empty* resp) {
               return service->GetDeviceAlias(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceControlParameterJson, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceControlParameterJson* req,
             ::google::protobuf::Empty* resp) {
               return service->DeviceControlJson(ctx, req, resp);
             }, this)));
}

EAService::Service::~Service() {
}

::grpc::Status EAService::Service::SendTexHandle(::grpc::ServerContext* context, const ::PXREAService::TexHandleInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::GetBattery(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::StartControlDevice(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::StopControlDevice(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::LockDevice(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::UnlockDevice(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::StartPlayVideo(::grpc::ServerContext* context, const ::PXREAService::VideoPlayInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::StopPlayVideo(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::SeekVideoTime(::grpc::ServerContext* context, const ::PXREAService::VideoSeekInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::PauseVideo(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::ContinueVideo(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::StartPlayApp(::grpc::ServerContext* context, const ::PXREAService::AppPlayInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::StopPlayApp(::grpc::ServerContext* context, const ::PXREAService::AppPlayInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::StartPlayPicture(::grpc::ServerContext* context, const ::PXREAService::PicPlayInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::StopPlayPicture(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::SetDeviceVolumn(::grpc::ServerContext* context, const ::PXREAService::DeviceVolumnInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::BackToHome(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::ShutDownDevice(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::RestartDevice(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::SendBytesToDevice(::grpc::ServerContext* context, const ::PXREAService::DeviceBytesInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::SendBytesToRoom(::grpc::ServerContext* context, const ::PXREAService::RoomBytesInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::StartMonitorScreen(::grpc::ServerContext* context, const ::PXREAService::ScreenMonitorParameter* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::SetMonitorScreenQuality(::grpc::ServerContext* context, const ::PXREAService::ScreenMonitorParameter* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::StopMonitorScreen(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::StartMonitorStream(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::StopMonitorStream(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::WatchServerFeedback(::grpc::ServerContext* context, const ::PXREAService::VRPid* request, ::grpc::ServerWriter< ::PXREAService::ServerFeedback>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::CancelServerFeedback(::grpc::ServerContext* context, const ::PXREAService::VRPid* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::SendBeat(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::GetCurrentApp(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::GetDeviceModel(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::GetControllerBattery(::grpc::ServerContext* context, const ::PXREAService::ControllerInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::SetScreenState(::grpc::ServerContext* context, const ::PXREAService::ScreenStateInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::GetScreenState(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::CustomControllerHomeButtonFunction(::grpc::ServerContext* context, const ::PXREAService::ControllerHomeButtonFunction* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::RecenterView(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::SetDeviceAlias(::grpc::ServerContext* context, const ::PXREAService::DeviceAliasInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::GetDeviceAlias(::grpc::ServerContext* context, const ::PXREAService::DeviceID* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::DeviceControlJson(::grpc::ServerContext* context, const ::PXREAService::DeviceControlParameterJson* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace PXREAService

