// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PXREAService.proto

#include "PXREAService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace PXREAService {
constexpr DeviceID::DeviceID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceIDDefaultTypeInternal {
  constexpr DeviceIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceIDDefaultTypeInternal() {}
  union {
    DeviceID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceIDDefaultTypeInternal _DeviceID_default_instance_;
constexpr VRPid::VRPid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pid_(0){}
struct VRPidDefaultTypeInternal {
  constexpr VRPidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VRPidDefaultTypeInternal() {}
  union {
    VRPid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VRPidDefaultTypeInternal _VRPid_default_instance_;
constexpr TexHandleInfo::TexHandleInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pid_(int64_t{0})
  , handle_(int64_t{0}){}
struct TexHandleInfoDefaultTypeInternal {
  constexpr TexHandleInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TexHandleInfoDefaultTypeInternal() {}
  union {
    TexHandleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TexHandleInfoDefaultTypeInternal _TexHandleInfo_default_instance_;
constexpr VideoPlayInfo::VideoPlayInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , videopath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VideoPlayInfoDefaultTypeInternal {
  constexpr VideoPlayInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoPlayInfoDefaultTypeInternal() {}
  union {
    VideoPlayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoPlayInfoDefaultTypeInternal _VideoPlayInfo_default_instance_;
constexpr VideoSeekInfo::VideoSeekInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , millisecond_(0){}
struct VideoSeekInfoDefaultTypeInternal {
  constexpr VideoSeekInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoSeekInfoDefaultTypeInternal() {}
  union {
    VideoSeekInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoSeekInfoDefaultTypeInternal _VideoSeekInfo_default_instance_;
constexpr AppPlayInfo::AppPlayInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AppPlayInfoDefaultTypeInternal {
  constexpr AppPlayInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AppPlayInfoDefaultTypeInternal() {}
  union {
    AppPlayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AppPlayInfoDefaultTypeInternal _AppPlayInfo_default_instance_;
constexpr PicPlayInfo::PicPlayInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , picpath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PicPlayInfoDefaultTypeInternal {
  constexpr PicPlayInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PicPlayInfoDefaultTypeInternal() {}
  union {
    PicPlayInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PicPlayInfoDefaultTypeInternal _PicPlayInfo_default_instance_;
constexpr DeviceVolumnInfo::DeviceVolumnInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , volumn_(0u){}
struct DeviceVolumnInfoDefaultTypeInternal {
  constexpr DeviceVolumnInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceVolumnInfoDefaultTypeInternal() {}
  union {
    DeviceVolumnInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceVolumnInfoDefaultTypeInternal _DeviceVolumnInfo_default_instance_;
constexpr DeviceBytesInfo::DeviceBytesInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceBytesInfoDefaultTypeInternal {
  constexpr DeviceBytesInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceBytesInfoDefaultTypeInternal() {}
  union {
    DeviceBytesInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceBytesInfoDefaultTypeInternal _DeviceBytesInfo_default_instance_;
constexpr RoomBytesInfo::RoomBytesInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RoomBytesInfoDefaultTypeInternal {
  constexpr RoomBytesInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoomBytesInfoDefaultTypeInternal() {}
  union {
    RoomBytesInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoomBytesInfoDefaultTypeInternal _RoomBytesInfo_default_instance_;
constexpr ControllerInfo::ControllerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controllerid_(0){}
struct ControllerInfoDefaultTypeInternal {
  constexpr ControllerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerInfoDefaultTypeInternal() {}
  union {
    ControllerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerInfoDefaultTypeInternal _ControllerInfo_default_instance_;
constexpr ControllerHomeButtonFunction::ControllerHomeButtonFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , homebuttontype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , homefunction_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ControllerHomeButtonFunctionDefaultTypeInternal {
  constexpr ControllerHomeButtonFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerHomeButtonFunctionDefaultTypeInternal() {}
  union {
    ControllerHomeButtonFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerHomeButtonFunctionDefaultTypeInternal _ControllerHomeButtonFunction_default_instance_;
constexpr ScreenStateInfo::ScreenStateInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(0){}
struct ScreenStateInfoDefaultTypeInternal {
  constexpr ScreenStateInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScreenStateInfoDefaultTypeInternal() {}
  union {
    ScreenStateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScreenStateInfoDefaultTypeInternal _ScreenStateInfo_default_instance_;
constexpr DeviceAliasInfo::DeviceAliasInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , alias_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceAliasInfoDefaultTypeInternal {
  constexpr DeviceAliasInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceAliasInfoDefaultTypeInternal() {}
  union {
    DeviceAliasInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceAliasInfoDefaultTypeInternal _DeviceAliasInfo_default_instance_;
constexpr ServerFeedback::ServerFeedback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , _oneof_case_{}{}
struct ServerFeedbackDefaultTypeInternal {
  constexpr ServerFeedbackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerFeedbackDefaultTypeInternal() {}
  union {
    ServerFeedback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerFeedbackDefaultTypeInternal _ServerFeedback_default_instance_;
constexpr VrParam::VrParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : width_(0u)
  , height_(0u)
  , fps_(0u){}
struct VrParamDefaultTypeInternal {
  constexpr VrParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VrParamDefaultTypeInternal() {}
  union {
    VrParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VrParamDefaultTypeInternal _VrParam_default_instance_;
constexpr DeviceBattery::DeviceBattery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , battery_(0u){}
struct DeviceBatteryDefaultTypeInternal {
  constexpr DeviceBatteryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceBatteryDefaultTypeInternal() {}
  union {
    DeviceBattery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceBatteryDefaultTypeInternal _DeviceBattery_default_instance_;
constexpr DeviceStatus::DeviceStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(0){}
struct DeviceStatusDefaultTypeInternal {
  constexpr DeviceStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceStatusDefaultTypeInternal() {}
  union {
    DeviceStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
constexpr DeviceModel::DeviceModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceModelDefaultTypeInternal {
  constexpr DeviceModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceModelDefaultTypeInternal() {}
  union {
    DeviceModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceModelDefaultTypeInternal _DeviceModel_default_instance_;
constexpr CurrentApplication::CurrentApplication(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , appname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CurrentApplicationDefaultTypeInternal {
  constexpr CurrentApplicationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CurrentApplicationDefaultTypeInternal() {}
  union {
    CurrentApplication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CurrentApplicationDefaultTypeInternal _CurrentApplication_default_instance_;
constexpr ControllerBattery::ControllerBattery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , controllerid_(0)
  , connected_(false)
  , battery_(0u){}
struct ControllerBatteryDefaultTypeInternal {
  constexpr ControllerBatteryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControllerBatteryDefaultTypeInternal() {}
  union {
    ControllerBattery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControllerBatteryDefaultTypeInternal _ControllerBattery_default_instance_;
constexpr DeviceBlob::DeviceBlob(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceBlobDefaultTypeInternal {
  constexpr DeviceBlobDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceBlobDefaultTypeInternal() {}
  union {
    DeviceBlob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceBlobDefaultTypeInternal _DeviceBlob_default_instance_;
constexpr DeviceMonitorParameter::DeviceMonitorParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0u)
  , height_(0u){}
struct DeviceMonitorParameterDefaultTypeInternal {
  constexpr DeviceMonitorParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceMonitorParameterDefaultTypeInternal() {}
  union {
    DeviceMonitorParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceMonitorParameterDefaultTypeInternal _DeviceMonitorParameter_default_instance_;
constexpr VideoFrameInfo::VideoFrameInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , framesize_(0u)
  , width_(0u)
  , height_(0u)
  , bytesperline_(0u)
  , pixformat_(0){}
struct VideoFrameInfoDefaultTypeInternal {
  constexpr VideoFrameInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoFrameInfoDefaultTypeInternal() {}
  union {
    VideoFrameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoFrameInfoDefaultTypeInternal _VideoFrameInfo_default_instance_;
constexpr DeviceMonitorSharedMemoryKey::DeviceMonitorSharedMemoryKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : smkey_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceMonitorSharedMemoryKeyDefaultTypeInternal {
  constexpr DeviceMonitorSharedMemoryKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceMonitorSharedMemoryKeyDefaultTypeInternal() {}
  union {
    DeviceMonitorSharedMemoryKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceMonitorSharedMemoryKeyDefaultTypeInternal _DeviceMonitorSharedMemoryKey_default_instance_;
constexpr VideoControlResult::VideoControlResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , detail_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
  , errorcode_(0){}
struct VideoControlResultDefaultTypeInternal {
  constexpr VideoControlResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VideoControlResultDefaultTypeInternal() {}
  union {
    VideoControlResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VideoControlResultDefaultTypeInternal _VideoControlResult_default_instance_;
constexpr DeviceControlParameterJson::DeviceControlParameterJson(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parameter_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceControlParameterJsonDefaultTypeInternal {
  constexpr DeviceControlParameterJsonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceControlParameterJsonDefaultTypeInternal() {}
  union {
    DeviceControlParameterJson _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceControlParameterJsonDefaultTypeInternal _DeviceControlParameterJson_default_instance_;
constexpr DeviceStateJson::DeviceStateJson(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , statejson_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeviceStateJsonDefaultTypeInternal {
  constexpr DeviceStateJsonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceStateJsonDefaultTypeInternal() {}
  union {
    DeviceStateJson _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceStateJsonDefaultTypeInternal _DeviceStateJson_default_instance_;
constexpr ScreenMonitorParameter::ScreenMonitorParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : devid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quality_(0){}
struct ScreenMonitorParameterDefaultTypeInternal {
  constexpr ScreenMonitorParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScreenMonitorParameterDefaultTypeInternal() {}
  union {
    ScreenMonitorParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScreenMonitorParameterDefaultTypeInternal _ScreenMonitorParameter_default_instance_;
}  // namespace PXREAService
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PXREAService_2eproto[29];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_PXREAService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PXREAService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PXREAService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::VRPid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::VRPid, pid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::TexHandleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::TexHandleInfo, pid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::TexHandleInfo, handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoPlayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoPlayInfo, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoPlayInfo, videopath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoSeekInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoSeekInfo, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoSeekInfo, millisecond_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::AppPlayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::AppPlayInfo, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::AppPlayInfo, appname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::PicPlayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::PicPlayInfo, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::PicPlayInfo, picpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceVolumnInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceVolumnInfo, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceVolumnInfo, volumn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceBytesInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceBytesInfo, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceBytesInfo, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::RoomBytesInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::RoomBytesInfo, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ControllerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ControllerInfo, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::ControllerInfo, controllerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ControllerHomeButtonFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ControllerHomeButtonFunction, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::ControllerHomeButtonFunction, homebuttontype_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::ControllerHomeButtonFunction, homefunction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ScreenStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ScreenStateInfo, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::ScreenStateInfo, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceAliasInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceAliasInfo, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceAliasInfo, alias_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ServerFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ServerFeedback, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ServerFeedback, name_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::PXREAService::ServerFeedback, FeedbackArgs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::VrParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::VrParam, width_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VrParam, height_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VrParam, fps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceBattery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceBattery, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceBattery, battery_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceStatus, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceStatus, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceModel, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceModel, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::CurrentApplication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::CurrentApplication, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::CurrentApplication, appname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ControllerBattery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ControllerBattery, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::ControllerBattery, controllerid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::ControllerBattery, connected_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::ControllerBattery, battery_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceBlob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceBlob, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceBlob, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceMonitorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceMonitorParameter, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceMonitorParameter, width_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceMonitorParameter, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoFrameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoFrameInfo, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoFrameInfo, framesize_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoFrameInfo, width_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoFrameInfo, height_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoFrameInfo, bytesperline_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoFrameInfo, pixformat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceMonitorSharedMemoryKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceMonitorSharedMemoryKey, smkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoControlResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoControlResult, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoControlResult, action_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoControlResult, result_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoControlResult, errorcode_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::VideoControlResult, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceControlParameterJson, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceControlParameterJson, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceControlParameterJson, parameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceStateJson, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceStateJson, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::DeviceStateJson, statejson_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ScreenMonitorParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PXREAService::ScreenMonitorParameter, devid_),
  PROTOBUF_FIELD_OFFSET(::PXREAService::ScreenMonitorParameter, quality_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::PXREAService::DeviceID)},
  { 7, -1, -1, sizeof(::PXREAService::VRPid)},
  { 14, -1, -1, sizeof(::PXREAService::TexHandleInfo)},
  { 22, -1, -1, sizeof(::PXREAService::VideoPlayInfo)},
  { 30, -1, -1, sizeof(::PXREAService::VideoSeekInfo)},
  { 38, -1, -1, sizeof(::PXREAService::AppPlayInfo)},
  { 46, -1, -1, sizeof(::PXREAService::PicPlayInfo)},
  { 54, -1, -1, sizeof(::PXREAService::DeviceVolumnInfo)},
  { 62, -1, -1, sizeof(::PXREAService::DeviceBytesInfo)},
  { 70, -1, -1, sizeof(::PXREAService::RoomBytesInfo)},
  { 77, -1, -1, sizeof(::PXREAService::ControllerInfo)},
  { 85, -1, -1, sizeof(::PXREAService::ControllerHomeButtonFunction)},
  { 94, -1, -1, sizeof(::PXREAService::ScreenStateInfo)},
  { 102, -1, -1, sizeof(::PXREAService::DeviceAliasInfo)},
  { 110, -1, -1, sizeof(::PXREAService::ServerFeedback)},
  { 132, -1, -1, sizeof(::PXREAService::VrParam)},
  { 141, -1, -1, sizeof(::PXREAService::DeviceBattery)},
  { 149, -1, -1, sizeof(::PXREAService::DeviceStatus)},
  { 157, -1, -1, sizeof(::PXREAService::DeviceModel)},
  { 165, -1, -1, sizeof(::PXREAService::CurrentApplication)},
  { 173, -1, -1, sizeof(::PXREAService::ControllerBattery)},
  { 183, -1, -1, sizeof(::PXREAService::DeviceBlob)},
  { 191, -1, -1, sizeof(::PXREAService::DeviceMonitorParameter)},
  { 200, -1, -1, sizeof(::PXREAService::VideoFrameInfo)},
  { 212, -1, -1, sizeof(::PXREAService::DeviceMonitorSharedMemoryKey)},
  { 219, -1, -1, sizeof(::PXREAService::VideoControlResult)},
  { 230, -1, -1, sizeof(::PXREAService::DeviceControlParameterJson)},
  { 238, -1, -1, sizeof(::PXREAService::DeviceStateJson)},
  { 246, -1, -1, sizeof(::PXREAService::ScreenMonitorParameter)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_DeviceID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_VRPid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_TexHandleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_VideoPlayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_VideoSeekInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_AppPlayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_PicPlayInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_DeviceVolumnInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_DeviceBytesInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_RoomBytesInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_ControllerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_ControllerHomeButtonFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_ScreenStateInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_DeviceAliasInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_ServerFeedback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_VrParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_DeviceBattery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_DeviceStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_DeviceModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_CurrentApplication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_ControllerBattery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_DeviceBlob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_DeviceMonitorParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_VideoFrameInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_DeviceMonitorSharedMemoryKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_VideoControlResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_DeviceControlParameterJson_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_DeviceStateJson_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::PXREAService::_ScreenMonitorParameter_default_instance_),
};

const char descriptor_table_protodef_PXREAService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022PXREAService.proto\022\014PXREAService\032\033goog"
  "le/protobuf/empty.proto\"\026\n\010DeviceID\022\n\n\002i"
  "d\030\001 \001(\t\"\024\n\005VRPid\022\013\n\003pid\030\001 \001(\005\",\n\rTexHand"
  "leInfo\022\013\n\003pid\030\001 \001(\003\022\016\n\006handle\030\002 \001(\003\"1\n\rV"
  "ideoPlayInfo\022\r\n\005devid\030\001 \001(\t\022\021\n\tvideopath"
  "\030\002 \001(\t\"3\n\rVideoSeekInfo\022\r\n\005devid\030\001 \001(\t\022\023"
  "\n\013millisecond\030\002 \001(\005\"-\n\013AppPlayInfo\022\r\n\005de"
  "vid\030\001 \001(\t\022\017\n\007appname\030\002 \001(\t\"-\n\013PicPlayInf"
  "o\022\r\n\005devid\030\001 \001(\t\022\017\n\007picpath\030\002 \001(\t\"1\n\020Dev"
  "iceVolumnInfo\022\r\n\005devid\030\001 \001(\t\022\016\n\006volumn\030\002"
  " \001(\r\"1\n\017DeviceBytesInfo\022\r\n\005devid\030\001 \001(\t\022\017"
  "\n\007content\030\002 \001(\014\" \n\rRoomBytesInfo\022\017\n\007cont"
  "ent\030\001 \001(\014\"5\n\016ControllerInfo\022\r\n\005devid\030\001 \001"
  "(\t\022\024\n\014controllerid\030\002 \001(\005\"[\n\034ControllerHo"
  "meButtonFunction\022\r\n\005devid\030\001 \001(\t\022\026\n\016homeb"
  "uttontype\030\002 \001(\t\022\024\n\014homefunction\030\003 \001(\t\"/\n"
  "\017ScreenStateInfo\022\r\n\005devid\030\001 \001(\t\022\r\n\005state"
  "\030\002 \001(\005\"/\n\017DeviceAliasInfo\022\r\n\005devid\030\001 \001(\t"
  "\022\r\n\005alias\030\002 \001(\t\"\231\006\n\016ServerFeedback\022\014\n\004na"
  "me\030\001 \001(\t\022(\n\007vrparam\030\002 \001(\0132\025.PXREAService"
  ".VrParamH\000\022\017\n\005devid\030\003 \001(\tH\000\0221\n\ndevbatter"
  "y\030\004 \001(\0132\033.PXREAService.DeviceBatteryH\000\022/"
  "\n\tdevstatus\030\005 \001(\0132\032.PXREAService.DeviceS"
  "tatusH\000\022+\n\007devblob\030\006 \001(\0132\030.PXREAService."
  "DeviceBlobH\000\022>\n\016devmonitorpara\030\007 \001(\0132$.P"
  "XREAService.DeviceMonitorParameterH\000\022-\n\010"
  "devmodel\030\010 \001(\0132\031.PXREAService.DeviceMode"
  "lH\000\0226\n\ncurrentapp\030\t \001(\0132 .PXREAService.C"
  "urrentApplicationH\000\0226\n\013ctrllerbtry\030\n \001(\013"
  "2\037.PXREAService.ControllerBatteryH\000\0226\n\016v"
  "ideoframeinfo\030\013 \001(\0132\034.PXREAService.Video"
  "FrameInfoH\000\022R\n\034devicemonitorsharedmemory"
  "key\030\014 \001(\0132*.PXREAService.DeviceMonitorSh"
  "aredMemoryKeyH\000\022>\n\022videocontrolresult\030\r "
  "\001(\0132 .PXREAService.VideoControlResultH\000\022"
  "8\n\017devicealiasinfo\030\016 \001(\0132\035.PXREAService."
  "DeviceAliasInfoH\000\0228\n\017devicestatejson\030\017 \001"
  "(\0132\035.PXREAService.DeviceStateJsonH\000B\016\n\014F"
  "eedbackArgs\"5\n\007VrParam\022\r\n\005width\030\001 \001(\r\022\016\n"
  "\006height\030\002 \001(\r\022\013\n\003fps\030\003 \001(\r\"/\n\rDeviceBatt"
  "ery\022\r\n\005devid\030\001 \001(\t\022\017\n\007battery\030\002 \001(\r\"-\n\014D"
  "eviceStatus\022\r\n\005devid\030\001 \001(\t\022\016\n\006status\030\002 \001"
  "(\005\"+\n\013DeviceModel\022\r\n\005devid\030\001 \001(\t\022\r\n\005mode"
  "l\030\002 \001(\t\"4\n\022CurrentApplication\022\r\n\005devid\030\001"
  " \001(\t\022\017\n\007appname\030\002 \001(\t\"\\\n\021ControllerBatte"
  "ry\022\r\n\005devid\030\001 \001(\t\022\024\n\014controllerid\030\002 \001(\005\022"
  "\021\n\tconnected\030\003 \001(\010\022\017\n\007battery\030\004 \001(\r\",\n\nD"
  "eviceBlob\022\r\n\005devid\030\001 \001(\t\022\017\n\007content\030\002 \001("
  "\014\"F\n\026DeviceMonitorParameter\022\r\n\005devid\030\001 \001"
  "(\t\022\r\n\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\"z\n\016Vid"
  "eoFrameInfo\022\r\n\005devid\030\001 \001(\t\022\021\n\tframeSize\030"
  "\002 \001(\r\022\r\n\005width\030\003 \001(\r\022\016\n\006height\030\004 \001(\r\022\024\n\014"
  "bytesPerLine\030\005 \001(\r\022\021\n\tpixFormat\030\006 \001(\005\"-\n"
  "\034DeviceMonitorSharedMemoryKey\022\r\n\005smkey\030\001"
  " \001(\t\"f\n\022VideoControlResult\022\r\n\005devid\030\001 \001("
  "\t\022\016\n\006action\030\002 \001(\t\022\016\n\006result\030\003 \001(\005\022\021\n\terr"
  "orcode\030\004 \001(\005\022\016\n\006detail\030\005 \001(\t\">\n\032DeviceCo"
  "ntrolParameterJson\022\r\n\005devid\030\001 \001(\t\022\021\n\tpar"
  "ameter\030\002 \001(\t\"3\n\017DeviceStateJson\022\r\n\005devid"
  "\030\001 \001(\t\022\021\n\tstatejson\030\002 \001(\t\"8\n\026ScreenMonit"
  "orParameter\022\r\n\005devid\030\001 \001(\t\022\017\n\007quality\030\002 "
  "\001(\0052\317\003\n\tEAService\022L\n\021SendBytesToDevice\022\035"
  ".PXREAService.DeviceBytesInfo\032\026.google.p"
  "rotobuf.Empty\"\000\022H\n\017SendBytesToRoom\022\033.PXR"
  "EAService.RoomBytesInfo\032\026.google.protobu"
  "f.Empty\"\000\022L\n\023WatchServerFeedback\022\023.PXREA"
  "Service.VRPid\032\034.PXREAService.ServerFeedb"
  "ack\"\0000\001\022E\n\024CancelServerFeedback\022\023.PXREAS"
  "ervice.VRPid\032\026.google.protobuf.Empty\"\000\022<"
  "\n\010SendBeat\022\026.google.protobuf.Empty\032\026.goo"
  "gle.protobuf.Empty\"\000\022W\n\021DeviceControlJso"
  "n\022(.PXREAService.DeviceControlParameterJ"
  "son\032\026.google.protobuf.Empty\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PXREAService_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PXREAService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PXREAService_2eproto = {
  false, false, 2917, descriptor_table_protodef_PXREAService_2eproto, "PXREAService.proto", 
  &descriptor_table_PXREAService_2eproto_once, descriptor_table_PXREAService_2eproto_deps, 1, 29,
  schemas, file_default_instances, TableStruct_PXREAService_2eproto::offsets,
  file_level_metadata_PXREAService_2eproto, file_level_enum_descriptors_PXREAService_2eproto, file_level_service_descriptors_PXREAService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_PXREAService_2eproto_getter() {
  return &descriptor_table_PXREAService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_PXREAService_2eproto(&descriptor_table_PXREAService_2eproto);
namespace PXREAService {

// ===================================================================

class DeviceID::_Internal {
 public:
};

DeviceID::DeviceID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.DeviceID)
}
DeviceID::DeviceID(const DeviceID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.DeviceID)
}

void DeviceID::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceID::~DeviceID() {
  // @@protoc_insertion_point(destructor:PXREAService.DeviceID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceID::ArenaDtor(void* object) {
  DeviceID* _this = reinterpret_cast< DeviceID* >(object);
  (void)_this;
}
void DeviceID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceID::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.DeviceID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceID.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.DeviceID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceID.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.DeviceID)
  return target;
}

size_t DeviceID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.DeviceID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceID::GetClassData() const { return &_class_data_; }

void DeviceID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceID *>(to)->MergeFrom(
      static_cast<const DeviceID &>(from));
}


void DeviceID::MergeFrom(const DeviceID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.DeviceID)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceID::CopyFrom(const DeviceID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.DeviceID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceID::IsInitialized() const {
  return true;
}

void DeviceID::InternalSwap(DeviceID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[0]);
}

// ===================================================================

class VRPid::_Internal {
 public:
};

VRPid::VRPid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.VRPid)
}
VRPid::VRPid(const VRPid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:PXREAService.VRPid)
}

void VRPid::SharedCtor() {
pid_ = 0;
}

VRPid::~VRPid() {
  // @@protoc_insertion_point(destructor:PXREAService.VRPid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VRPid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VRPid::ArenaDtor(void* object) {
  VRPid* _this = reinterpret_cast< VRPid* >(object);
  (void)_this;
}
void VRPid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VRPid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VRPid::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.VRPid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VRPid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VRPid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.VRPid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_pid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.VRPid)
  return target;
}

size_t VRPid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.VRPid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VRPid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VRPid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VRPid::GetClassData() const { return &_class_data_; }

void VRPid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VRPid *>(to)->MergeFrom(
      static_cast<const VRPid &>(from));
}


void VRPid::MergeFrom(const VRPid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.VRPid)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VRPid::CopyFrom(const VRPid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.VRPid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRPid::IsInitialized() const {
  return true;
}

void VRPid::InternalSwap(VRPid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pid_, other->pid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VRPid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[1]);
}

// ===================================================================

class TexHandleInfo::_Internal {
 public:
};

TexHandleInfo::TexHandleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.TexHandleInfo)
}
TexHandleInfo::TexHandleInfo(const TexHandleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pid_, &from.pid_,
    static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(handle_));
  // @@protoc_insertion_point(copy_constructor:PXREAService.TexHandleInfo)
}

void TexHandleInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&pid_)) + sizeof(handle_));
}

TexHandleInfo::~TexHandleInfo() {
  // @@protoc_insertion_point(destructor:PXREAService.TexHandleInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TexHandleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TexHandleInfo::ArenaDtor(void* object) {
  TexHandleInfo* _this = reinterpret_cast< TexHandleInfo* >(object);
  (void)_this;
}
void TexHandleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TexHandleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TexHandleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.TexHandleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&handle_) -
      reinterpret_cast<char*>(&pid_)) + sizeof(handle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TexHandleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 pid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TexHandleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.TexHandleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->_internal_pid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_pid(), target);
  }

  // int64 handle = 2;
  if (this->_internal_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.TexHandleInfo)
  return target;
}

size_t TexHandleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.TexHandleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 pid = 1;
  if (this->_internal_pid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_pid());
  }

  // int64 handle = 2;
  if (this->_internal_handle() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TexHandleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TexHandleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TexHandleInfo::GetClassData() const { return &_class_data_; }

void TexHandleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TexHandleInfo *>(to)->MergeFrom(
      static_cast<const TexHandleInfo &>(from));
}


void TexHandleInfo::MergeFrom(const TexHandleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.TexHandleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pid() != 0) {
    _internal_set_pid(from._internal_pid());
  }
  if (from._internal_handle() != 0) {
    _internal_set_handle(from._internal_handle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TexHandleInfo::CopyFrom(const TexHandleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.TexHandleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexHandleInfo::IsInitialized() const {
  return true;
}

void TexHandleInfo::InternalSwap(TexHandleInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TexHandleInfo, handle_)
      + sizeof(TexHandleInfo::handle_)
      - PROTOBUF_FIELD_OFFSET(TexHandleInfo, pid_)>(
          reinterpret_cast<char*>(&pid_),
          reinterpret_cast<char*>(&other->pid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TexHandleInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[2]);
}

// ===================================================================

class VideoPlayInfo::_Internal {
 public:
};

VideoPlayInfo::VideoPlayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.VideoPlayInfo)
}
VideoPlayInfo::VideoPlayInfo(const VideoPlayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  videopath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_videopath().empty()) {
    videopath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_videopath(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.VideoPlayInfo)
}

void VideoPlayInfo::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
videopath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VideoPlayInfo::~VideoPlayInfo() {
  // @@protoc_insertion_point(destructor:PXREAService.VideoPlayInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VideoPlayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  videopath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoPlayInfo::ArenaDtor(void* object) {
  VideoPlayInfo* _this = reinterpret_cast< VideoPlayInfo* >(object);
  (void)_this;
}
void VideoPlayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoPlayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoPlayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.VideoPlayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  videopath_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoPlayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.VideoPlayInfo.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string videopath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_videopath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.VideoPlayInfo.videopath"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoPlayInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.VideoPlayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.VideoPlayInfo.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // string videopath = 2;
  if (!this->_internal_videopath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_videopath().data(), static_cast<int>(this->_internal_videopath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.VideoPlayInfo.videopath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_videopath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.VideoPlayInfo)
  return target;
}

size_t VideoPlayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.VideoPlayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // string videopath = 2;
  if (!this->_internal_videopath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_videopath());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoPlayInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoPlayInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoPlayInfo::GetClassData() const { return &_class_data_; }

void VideoPlayInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoPlayInfo *>(to)->MergeFrom(
      static_cast<const VideoPlayInfo &>(from));
}


void VideoPlayInfo::MergeFrom(const VideoPlayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.VideoPlayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (!from._internal_videopath().empty()) {
    _internal_set_videopath(from._internal_videopath());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoPlayInfo::CopyFrom(const VideoPlayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.VideoPlayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPlayInfo::IsInitialized() const {
  return true;
}

void VideoPlayInfo::InternalSwap(VideoPlayInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &videopath_, lhs_arena,
      &other->videopath_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoPlayInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[3]);
}

// ===================================================================

class VideoSeekInfo::_Internal {
 public:
};

VideoSeekInfo::VideoSeekInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.VideoSeekInfo)
}
VideoSeekInfo::VideoSeekInfo(const VideoSeekInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  millisecond_ = from.millisecond_;
  // @@protoc_insertion_point(copy_constructor:PXREAService.VideoSeekInfo)
}

void VideoSeekInfo::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
millisecond_ = 0;
}

VideoSeekInfo::~VideoSeekInfo() {
  // @@protoc_insertion_point(destructor:PXREAService.VideoSeekInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VideoSeekInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoSeekInfo::ArenaDtor(void* object) {
  VideoSeekInfo* _this = reinterpret_cast< VideoSeekInfo* >(object);
  (void)_this;
}
void VideoSeekInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoSeekInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoSeekInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.VideoSeekInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  millisecond_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoSeekInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.VideoSeekInfo.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 millisecond = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          millisecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoSeekInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.VideoSeekInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.VideoSeekInfo.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // int32 millisecond = 2;
  if (this->_internal_millisecond() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_millisecond(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.VideoSeekInfo)
  return target;
}

size_t VideoSeekInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.VideoSeekInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // int32 millisecond = 2;
  if (this->_internal_millisecond() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_millisecond());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoSeekInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoSeekInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoSeekInfo::GetClassData() const { return &_class_data_; }

void VideoSeekInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoSeekInfo *>(to)->MergeFrom(
      static_cast<const VideoSeekInfo &>(from));
}


void VideoSeekInfo::MergeFrom(const VideoSeekInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.VideoSeekInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (from._internal_millisecond() != 0) {
    _internal_set_millisecond(from._internal_millisecond());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoSeekInfo::CopyFrom(const VideoSeekInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.VideoSeekInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSeekInfo::IsInitialized() const {
  return true;
}

void VideoSeekInfo::InternalSwap(VideoSeekInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  swap(millisecond_, other->millisecond_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoSeekInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[4]);
}

// ===================================================================

class AppPlayInfo::_Internal {
 public:
};

AppPlayInfo::AppPlayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.AppPlayInfo)
}
AppPlayInfo::AppPlayInfo(const AppPlayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.AppPlayInfo)
}

void AppPlayInfo::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AppPlayInfo::~AppPlayInfo() {
  // @@protoc_insertion_point(destructor:PXREAService.AppPlayInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AppPlayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AppPlayInfo::ArenaDtor(void* object) {
  AppPlayInfo* _this = reinterpret_cast< AppPlayInfo* >(object);
  (void)_this;
}
void AppPlayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppPlayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AppPlayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.AppPlayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  appname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppPlayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.AppPlayInfo.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string appname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.AppPlayInfo.appname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppPlayInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.AppPlayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.AppPlayInfo.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // string appname = 2;
  if (!this->_internal_appname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.AppPlayInfo.appname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_appname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.AppPlayInfo)
  return target;
}

size_t AppPlayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.AppPlayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // string appname = 2;
  if (!this->_internal_appname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AppPlayInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AppPlayInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AppPlayInfo::GetClassData() const { return &_class_data_; }

void AppPlayInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AppPlayInfo *>(to)->MergeFrom(
      static_cast<const AppPlayInfo &>(from));
}


void AppPlayInfo::MergeFrom(const AppPlayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.AppPlayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (!from._internal_appname().empty()) {
    _internal_set_appname(from._internal_appname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AppPlayInfo::CopyFrom(const AppPlayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.AppPlayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppPlayInfo::IsInitialized() const {
  return true;
}

void AppPlayInfo::InternalSwap(AppPlayInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &appname_, lhs_arena,
      &other->appname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AppPlayInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[5]);
}

// ===================================================================

class PicPlayInfo::_Internal {
 public:
};

PicPlayInfo::PicPlayInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.PicPlayInfo)
}
PicPlayInfo::PicPlayInfo(const PicPlayInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  picpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_picpath().empty()) {
    picpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_picpath(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.PicPlayInfo)
}

void PicPlayInfo::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
picpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PicPlayInfo::~PicPlayInfo() {
  // @@protoc_insertion_point(destructor:PXREAService.PicPlayInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PicPlayInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  picpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PicPlayInfo::ArenaDtor(void* object) {
  PicPlayInfo* _this = reinterpret_cast< PicPlayInfo* >(object);
  (void)_this;
}
void PicPlayInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PicPlayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PicPlayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.PicPlayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  picpath_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PicPlayInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.PicPlayInfo.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string picpath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_picpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.PicPlayInfo.picpath"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PicPlayInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.PicPlayInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.PicPlayInfo.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // string picpath = 2;
  if (!this->_internal_picpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_picpath().data(), static_cast<int>(this->_internal_picpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.PicPlayInfo.picpath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_picpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.PicPlayInfo)
  return target;
}

size_t PicPlayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.PicPlayInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // string picpath = 2;
  if (!this->_internal_picpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_picpath());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PicPlayInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PicPlayInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PicPlayInfo::GetClassData() const { return &_class_data_; }

void PicPlayInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PicPlayInfo *>(to)->MergeFrom(
      static_cast<const PicPlayInfo &>(from));
}


void PicPlayInfo::MergeFrom(const PicPlayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.PicPlayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (!from._internal_picpath().empty()) {
    _internal_set_picpath(from._internal_picpath());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PicPlayInfo::CopyFrom(const PicPlayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.PicPlayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PicPlayInfo::IsInitialized() const {
  return true;
}

void PicPlayInfo::InternalSwap(PicPlayInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &picpath_, lhs_arena,
      &other->picpath_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PicPlayInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[6]);
}

// ===================================================================

class DeviceVolumnInfo::_Internal {
 public:
};

DeviceVolumnInfo::DeviceVolumnInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.DeviceVolumnInfo)
}
DeviceVolumnInfo::DeviceVolumnInfo(const DeviceVolumnInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  volumn_ = from.volumn_;
  // @@protoc_insertion_point(copy_constructor:PXREAService.DeviceVolumnInfo)
}

void DeviceVolumnInfo::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
volumn_ = 0u;
}

DeviceVolumnInfo::~DeviceVolumnInfo() {
  // @@protoc_insertion_point(destructor:PXREAService.DeviceVolumnInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceVolumnInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceVolumnInfo::ArenaDtor(void* object) {
  DeviceVolumnInfo* _this = reinterpret_cast< DeviceVolumnInfo* >(object);
  (void)_this;
}
void DeviceVolumnInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceVolumnInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceVolumnInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.DeviceVolumnInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  volumn_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceVolumnInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceVolumnInfo.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 volumn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          volumn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceVolumnInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.DeviceVolumnInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceVolumnInfo.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // uint32 volumn = 2;
  if (this->_internal_volumn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_volumn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.DeviceVolumnInfo)
  return target;
}

size_t DeviceVolumnInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.DeviceVolumnInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // uint32 volumn = 2;
  if (this->_internal_volumn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_volumn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceVolumnInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceVolumnInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceVolumnInfo::GetClassData() const { return &_class_data_; }

void DeviceVolumnInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceVolumnInfo *>(to)->MergeFrom(
      static_cast<const DeviceVolumnInfo &>(from));
}


void DeviceVolumnInfo::MergeFrom(const DeviceVolumnInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.DeviceVolumnInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (from._internal_volumn() != 0) {
    _internal_set_volumn(from._internal_volumn());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceVolumnInfo::CopyFrom(const DeviceVolumnInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.DeviceVolumnInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceVolumnInfo::IsInitialized() const {
  return true;
}

void DeviceVolumnInfo::InternalSwap(DeviceVolumnInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  swap(volumn_, other->volumn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceVolumnInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[7]);
}

// ===================================================================

class DeviceBytesInfo::_Internal {
 public:
};

DeviceBytesInfo::DeviceBytesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.DeviceBytesInfo)
}
DeviceBytesInfo::DeviceBytesInfo(const DeviceBytesInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.DeviceBytesInfo)
}

void DeviceBytesInfo::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceBytesInfo::~DeviceBytesInfo() {
  // @@protoc_insertion_point(destructor:PXREAService.DeviceBytesInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceBytesInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceBytesInfo::ArenaDtor(void* object) {
  DeviceBytesInfo* _this = reinterpret_cast< DeviceBytesInfo* >(object);
  (void)_this;
}
void DeviceBytesInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceBytesInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceBytesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.DeviceBytesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceBytesInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceBytesInfo.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceBytesInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.DeviceBytesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceBytesInfo.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.DeviceBytesInfo)
  return target;
}

size_t DeviceBytesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.DeviceBytesInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceBytesInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceBytesInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceBytesInfo::GetClassData() const { return &_class_data_; }

void DeviceBytesInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceBytesInfo *>(to)->MergeFrom(
      static_cast<const DeviceBytesInfo &>(from));
}


void DeviceBytesInfo::MergeFrom(const DeviceBytesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.DeviceBytesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceBytesInfo::CopyFrom(const DeviceBytesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.DeviceBytesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceBytesInfo::IsInitialized() const {
  return true;
}

void DeviceBytesInfo::InternalSwap(DeviceBytesInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceBytesInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[8]);
}

// ===================================================================

class RoomBytesInfo::_Internal {
 public:
};

RoomBytesInfo::RoomBytesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.RoomBytesInfo)
}
RoomBytesInfo::RoomBytesInfo(const RoomBytesInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.RoomBytesInfo)
}

void RoomBytesInfo::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RoomBytesInfo::~RoomBytesInfo() {
  // @@protoc_insertion_point(destructor:PXREAService.RoomBytesInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RoomBytesInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RoomBytesInfo::ArenaDtor(void* object) {
  RoomBytesInfo* _this = reinterpret_cast< RoomBytesInfo* >(object);
  (void)_this;
}
void RoomBytesInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoomBytesInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoomBytesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.RoomBytesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomBytesInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoomBytesInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.RoomBytesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.RoomBytesInfo)
  return target;
}

size_t RoomBytesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.RoomBytesInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomBytesInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RoomBytesInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomBytesInfo::GetClassData() const { return &_class_data_; }

void RoomBytesInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RoomBytesInfo *>(to)->MergeFrom(
      static_cast<const RoomBytesInfo &>(from));
}


void RoomBytesInfo::MergeFrom(const RoomBytesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.RoomBytesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomBytesInfo::CopyFrom(const RoomBytesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.RoomBytesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomBytesInfo::IsInitialized() const {
  return true;
}

void RoomBytesInfo::InternalSwap(RoomBytesInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomBytesInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[9]);
}

// ===================================================================

class ControllerInfo::_Internal {
 public:
};

ControllerInfo::ControllerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.ControllerInfo)
}
ControllerInfo::ControllerInfo(const ControllerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  controllerid_ = from.controllerid_;
  // @@protoc_insertion_point(copy_constructor:PXREAService.ControllerInfo)
}

void ControllerInfo::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
controllerid_ = 0;
}

ControllerInfo::~ControllerInfo() {
  // @@protoc_insertion_point(destructor:PXREAService.ControllerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControllerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControllerInfo::ArenaDtor(void* object) {
  ControllerInfo* _this = reinterpret_cast< ControllerInfo* >(object);
  (void)_this;
}
void ControllerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.ControllerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  controllerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.ControllerInfo.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 controllerid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          controllerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.ControllerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.ControllerInfo.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // int32 controllerid = 2;
  if (this->_internal_controllerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_controllerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.ControllerInfo)
  return target;
}

size_t ControllerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.ControllerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // int32 controllerid = 2;
  if (this->_internal_controllerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_controllerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControllerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerInfo::GetClassData() const { return &_class_data_; }

void ControllerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControllerInfo *>(to)->MergeFrom(
      static_cast<const ControllerInfo &>(from));
}


void ControllerInfo::MergeFrom(const ControllerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.ControllerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (from._internal_controllerid() != 0) {
    _internal_set_controllerid(from._internal_controllerid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerInfo::CopyFrom(const ControllerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.ControllerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerInfo::IsInitialized() const {
  return true;
}

void ControllerInfo::InternalSwap(ControllerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  swap(controllerid_, other->controllerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[10]);
}

// ===================================================================

class ControllerHomeButtonFunction::_Internal {
 public:
};

ControllerHomeButtonFunction::ControllerHomeButtonFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.ControllerHomeButtonFunction)
}
ControllerHomeButtonFunction::ControllerHomeButtonFunction(const ControllerHomeButtonFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  homebuttontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_homebuttontype().empty()) {
    homebuttontype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_homebuttontype(), 
      GetArenaForAllocation());
  }
  homefunction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_homefunction().empty()) {
    homefunction_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_homefunction(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.ControllerHomeButtonFunction)
}

void ControllerHomeButtonFunction::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
homebuttontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
homefunction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ControllerHomeButtonFunction::~ControllerHomeButtonFunction() {
  // @@protoc_insertion_point(destructor:PXREAService.ControllerHomeButtonFunction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControllerHomeButtonFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homebuttontype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homefunction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControllerHomeButtonFunction::ArenaDtor(void* object) {
  ControllerHomeButtonFunction* _this = reinterpret_cast< ControllerHomeButtonFunction* >(object);
  (void)_this;
}
void ControllerHomeButtonFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerHomeButtonFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerHomeButtonFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.ControllerHomeButtonFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  homebuttontype_.ClearToEmpty();
  homefunction_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerHomeButtonFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.ControllerHomeButtonFunction.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string homebuttontype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_homebuttontype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.ControllerHomeButtonFunction.homebuttontype"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string homefunction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_homefunction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.ControllerHomeButtonFunction.homefunction"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerHomeButtonFunction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.ControllerHomeButtonFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.ControllerHomeButtonFunction.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // string homebuttontype = 2;
  if (!this->_internal_homebuttontype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_homebuttontype().data(), static_cast<int>(this->_internal_homebuttontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.ControllerHomeButtonFunction.homebuttontype");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_homebuttontype(), target);
  }

  // string homefunction = 3;
  if (!this->_internal_homefunction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_homefunction().data(), static_cast<int>(this->_internal_homefunction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.ControllerHomeButtonFunction.homefunction");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_homefunction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.ControllerHomeButtonFunction)
  return target;
}

size_t ControllerHomeButtonFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.ControllerHomeButtonFunction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // string homebuttontype = 2;
  if (!this->_internal_homebuttontype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_homebuttontype());
  }

  // string homefunction = 3;
  if (!this->_internal_homefunction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_homefunction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerHomeButtonFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControllerHomeButtonFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerHomeButtonFunction::GetClassData() const { return &_class_data_; }

void ControllerHomeButtonFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControllerHomeButtonFunction *>(to)->MergeFrom(
      static_cast<const ControllerHomeButtonFunction &>(from));
}


void ControllerHomeButtonFunction::MergeFrom(const ControllerHomeButtonFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.ControllerHomeButtonFunction)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (!from._internal_homebuttontype().empty()) {
    _internal_set_homebuttontype(from._internal_homebuttontype());
  }
  if (!from._internal_homefunction().empty()) {
    _internal_set_homefunction(from._internal_homefunction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerHomeButtonFunction::CopyFrom(const ControllerHomeButtonFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.ControllerHomeButtonFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerHomeButtonFunction::IsInitialized() const {
  return true;
}

void ControllerHomeButtonFunction::InternalSwap(ControllerHomeButtonFunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &homebuttontype_, lhs_arena,
      &other->homebuttontype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &homefunction_, lhs_arena,
      &other->homefunction_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerHomeButtonFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[11]);
}

// ===================================================================

class ScreenStateInfo::_Internal {
 public:
};

ScreenStateInfo::ScreenStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.ScreenStateInfo)
}
ScreenStateInfo::ScreenStateInfo(const ScreenStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:PXREAService.ScreenStateInfo)
}

void ScreenStateInfo::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
state_ = 0;
}

ScreenStateInfo::~ScreenStateInfo() {
  // @@protoc_insertion_point(destructor:PXREAService.ScreenStateInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScreenStateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScreenStateInfo::ArenaDtor(void* object) {
  ScreenStateInfo* _this = reinterpret_cast< ScreenStateInfo* >(object);
  (void)_this;
}
void ScreenStateInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScreenStateInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScreenStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.ScreenStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScreenStateInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.ScreenStateInfo.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScreenStateInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.ScreenStateInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.ScreenStateInfo.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.ScreenStateInfo)
  return target;
}

size_t ScreenStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.ScreenStateInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScreenStateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScreenStateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScreenStateInfo::GetClassData() const { return &_class_data_; }

void ScreenStateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScreenStateInfo *>(to)->MergeFrom(
      static_cast<const ScreenStateInfo &>(from));
}


void ScreenStateInfo::MergeFrom(const ScreenStateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.ScreenStateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScreenStateInfo::CopyFrom(const ScreenStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.ScreenStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenStateInfo::IsInitialized() const {
  return true;
}

void ScreenStateInfo::InternalSwap(ScreenStateInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScreenStateInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[12]);
}

// ===================================================================

class DeviceAliasInfo::_Internal {
 public:
};

DeviceAliasInfo::DeviceAliasInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.DeviceAliasInfo)
}
DeviceAliasInfo::DeviceAliasInfo(const DeviceAliasInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_alias(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.DeviceAliasInfo)
}

void DeviceAliasInfo::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceAliasInfo::~DeviceAliasInfo() {
  // @@protoc_insertion_point(destructor:PXREAService.DeviceAliasInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceAliasInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceAliasInfo::ArenaDtor(void* object) {
  DeviceAliasInfo* _this = reinterpret_cast< DeviceAliasInfo* >(object);
  (void)_this;
}
void DeviceAliasInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceAliasInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceAliasInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.DeviceAliasInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  alias_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceAliasInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceAliasInfo.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceAliasInfo.alias"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceAliasInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.DeviceAliasInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceAliasInfo.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // string alias = 2;
  if (!this->_internal_alias().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceAliasInfo.alias");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alias(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.DeviceAliasInfo)
  return target;
}

size_t DeviceAliasInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.DeviceAliasInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // string alias = 2;
  if (!this->_internal_alias().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceAliasInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceAliasInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceAliasInfo::GetClassData() const { return &_class_data_; }

void DeviceAliasInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceAliasInfo *>(to)->MergeFrom(
      static_cast<const DeviceAliasInfo &>(from));
}


void DeviceAliasInfo::MergeFrom(const DeviceAliasInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.DeviceAliasInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (!from._internal_alias().empty()) {
    _internal_set_alias(from._internal_alias());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceAliasInfo::CopyFrom(const DeviceAliasInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.DeviceAliasInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAliasInfo::IsInitialized() const {
  return true;
}

void DeviceAliasInfo::InternalSwap(DeviceAliasInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &alias_, lhs_arena,
      &other->alias_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceAliasInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[13]);
}

// ===================================================================

class ServerFeedback::_Internal {
 public:
  static const ::PXREAService::VrParam& vrparam(const ServerFeedback* msg);
  static const ::PXREAService::DeviceBattery& devbattery(const ServerFeedback* msg);
  static const ::PXREAService::DeviceStatus& devstatus(const ServerFeedback* msg);
  static const ::PXREAService::DeviceBlob& devblob(const ServerFeedback* msg);
  static const ::PXREAService::DeviceMonitorParameter& devmonitorpara(const ServerFeedback* msg);
  static const ::PXREAService::DeviceModel& devmodel(const ServerFeedback* msg);
  static const ::PXREAService::CurrentApplication& currentapp(const ServerFeedback* msg);
  static const ::PXREAService::ControllerBattery& ctrllerbtry(const ServerFeedback* msg);
  static const ::PXREAService::VideoFrameInfo& videoframeinfo(const ServerFeedback* msg);
  static const ::PXREAService::DeviceMonitorSharedMemoryKey& devicemonitorsharedmemorykey(const ServerFeedback* msg);
  static const ::PXREAService::VideoControlResult& videocontrolresult(const ServerFeedback* msg);
  static const ::PXREAService::DeviceAliasInfo& devicealiasinfo(const ServerFeedback* msg);
  static const ::PXREAService::DeviceStateJson& devicestatejson(const ServerFeedback* msg);
};

const ::PXREAService::VrParam&
ServerFeedback::_Internal::vrparam(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.vrparam_;
}
const ::PXREAService::DeviceBattery&
ServerFeedback::_Internal::devbattery(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.devbattery_;
}
const ::PXREAService::DeviceStatus&
ServerFeedback::_Internal::devstatus(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.devstatus_;
}
const ::PXREAService::DeviceBlob&
ServerFeedback::_Internal::devblob(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.devblob_;
}
const ::PXREAService::DeviceMonitorParameter&
ServerFeedback::_Internal::devmonitorpara(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.devmonitorpara_;
}
const ::PXREAService::DeviceModel&
ServerFeedback::_Internal::devmodel(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.devmodel_;
}
const ::PXREAService::CurrentApplication&
ServerFeedback::_Internal::currentapp(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.currentapp_;
}
const ::PXREAService::ControllerBattery&
ServerFeedback::_Internal::ctrllerbtry(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.ctrllerbtry_;
}
const ::PXREAService::VideoFrameInfo&
ServerFeedback::_Internal::videoframeinfo(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.videoframeinfo_;
}
const ::PXREAService::DeviceMonitorSharedMemoryKey&
ServerFeedback::_Internal::devicemonitorsharedmemorykey(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.devicemonitorsharedmemorykey_;
}
const ::PXREAService::VideoControlResult&
ServerFeedback::_Internal::videocontrolresult(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.videocontrolresult_;
}
const ::PXREAService::DeviceAliasInfo&
ServerFeedback::_Internal::devicealiasinfo(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.devicealiasinfo_;
}
const ::PXREAService::DeviceStateJson&
ServerFeedback::_Internal::devicestatejson(const ServerFeedback* msg) {
  return *msg->FeedbackArgs_.devicestatejson_;
}
void ServerFeedback::set_allocated_vrparam(::PXREAService::VrParam* vrparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (vrparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::VrParam>::GetOwningArena(vrparam);
    if (message_arena != submessage_arena) {
      vrparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vrparam, submessage_arena);
    }
    set_has_vrparam();
    FeedbackArgs_.vrparam_ = vrparam;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.vrparam)
}
void ServerFeedback::set_allocated_devbattery(::PXREAService::DeviceBattery* devbattery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (devbattery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::DeviceBattery>::GetOwningArena(devbattery);
    if (message_arena != submessage_arena) {
      devbattery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devbattery, submessage_arena);
    }
    set_has_devbattery();
    FeedbackArgs_.devbattery_ = devbattery;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.devbattery)
}
void ServerFeedback::set_allocated_devstatus(::PXREAService::DeviceStatus* devstatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (devstatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::DeviceStatus>::GetOwningArena(devstatus);
    if (message_arena != submessage_arena) {
      devstatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devstatus, submessage_arena);
    }
    set_has_devstatus();
    FeedbackArgs_.devstatus_ = devstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.devstatus)
}
void ServerFeedback::set_allocated_devblob(::PXREAService::DeviceBlob* devblob) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (devblob) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::DeviceBlob>::GetOwningArena(devblob);
    if (message_arena != submessage_arena) {
      devblob = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devblob, submessage_arena);
    }
    set_has_devblob();
    FeedbackArgs_.devblob_ = devblob;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.devblob)
}
void ServerFeedback::set_allocated_devmonitorpara(::PXREAService::DeviceMonitorParameter* devmonitorpara) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (devmonitorpara) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::DeviceMonitorParameter>::GetOwningArena(devmonitorpara);
    if (message_arena != submessage_arena) {
      devmonitorpara = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devmonitorpara, submessage_arena);
    }
    set_has_devmonitorpara();
    FeedbackArgs_.devmonitorpara_ = devmonitorpara;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.devmonitorpara)
}
void ServerFeedback::set_allocated_devmodel(::PXREAService::DeviceModel* devmodel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (devmodel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::DeviceModel>::GetOwningArena(devmodel);
    if (message_arena != submessage_arena) {
      devmodel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devmodel, submessage_arena);
    }
    set_has_devmodel();
    FeedbackArgs_.devmodel_ = devmodel;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.devmodel)
}
void ServerFeedback::set_allocated_currentapp(::PXREAService::CurrentApplication* currentapp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (currentapp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::CurrentApplication>::GetOwningArena(currentapp);
    if (message_arena != submessage_arena) {
      currentapp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentapp, submessage_arena);
    }
    set_has_currentapp();
    FeedbackArgs_.currentapp_ = currentapp;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.currentapp)
}
void ServerFeedback::set_allocated_ctrllerbtry(::PXREAService::ControllerBattery* ctrllerbtry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (ctrllerbtry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::ControllerBattery>::GetOwningArena(ctrllerbtry);
    if (message_arena != submessage_arena) {
      ctrllerbtry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctrllerbtry, submessage_arena);
    }
    set_has_ctrllerbtry();
    FeedbackArgs_.ctrllerbtry_ = ctrllerbtry;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.ctrllerbtry)
}
void ServerFeedback::set_allocated_videoframeinfo(::PXREAService::VideoFrameInfo* videoframeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (videoframeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::VideoFrameInfo>::GetOwningArena(videoframeinfo);
    if (message_arena != submessage_arena) {
      videoframeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videoframeinfo, submessage_arena);
    }
    set_has_videoframeinfo();
    FeedbackArgs_.videoframeinfo_ = videoframeinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.videoframeinfo)
}
void ServerFeedback::set_allocated_devicemonitorsharedmemorykey(::PXREAService::DeviceMonitorSharedMemoryKey* devicemonitorsharedmemorykey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (devicemonitorsharedmemorykey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::DeviceMonitorSharedMemoryKey>::GetOwningArena(devicemonitorsharedmemorykey);
    if (message_arena != submessage_arena) {
      devicemonitorsharedmemorykey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devicemonitorsharedmemorykey, submessage_arena);
    }
    set_has_devicemonitorsharedmemorykey();
    FeedbackArgs_.devicemonitorsharedmemorykey_ = devicemonitorsharedmemorykey;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.devicemonitorsharedmemorykey)
}
void ServerFeedback::set_allocated_videocontrolresult(::PXREAService::VideoControlResult* videocontrolresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (videocontrolresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::VideoControlResult>::GetOwningArena(videocontrolresult);
    if (message_arena != submessage_arena) {
      videocontrolresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videocontrolresult, submessage_arena);
    }
    set_has_videocontrolresult();
    FeedbackArgs_.videocontrolresult_ = videocontrolresult;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.videocontrolresult)
}
void ServerFeedback::set_allocated_devicealiasinfo(::PXREAService::DeviceAliasInfo* devicealiasinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (devicealiasinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::DeviceAliasInfo>::GetOwningArena(devicealiasinfo);
    if (message_arena != submessage_arena) {
      devicealiasinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devicealiasinfo, submessage_arena);
    }
    set_has_devicealiasinfo();
    FeedbackArgs_.devicealiasinfo_ = devicealiasinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.devicealiasinfo)
}
void ServerFeedback::set_allocated_devicestatejson(::PXREAService::DeviceStateJson* devicestatejson) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_FeedbackArgs();
  if (devicestatejson) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PXREAService::DeviceStateJson>::GetOwningArena(devicestatejson);
    if (message_arena != submessage_arena) {
      devicestatejson = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devicestatejson, submessage_arena);
    }
    set_has_devicestatejson();
    FeedbackArgs_.devicestatejson_ = devicestatejson;
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.devicestatejson)
}
ServerFeedback::ServerFeedback(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.ServerFeedback)
}
ServerFeedback::ServerFeedback(const ServerFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  clear_has_FeedbackArgs();
  switch (from.FeedbackArgs_case()) {
    case kVrparam: {
      _internal_mutable_vrparam()->::PXREAService::VrParam::MergeFrom(from._internal_vrparam());
      break;
    }
    case kDevid: {
      _internal_set_devid(from._internal_devid());
      break;
    }
    case kDevbattery: {
      _internal_mutable_devbattery()->::PXREAService::DeviceBattery::MergeFrom(from._internal_devbattery());
      break;
    }
    case kDevstatus: {
      _internal_mutable_devstatus()->::PXREAService::DeviceStatus::MergeFrom(from._internal_devstatus());
      break;
    }
    case kDevblob: {
      _internal_mutable_devblob()->::PXREAService::DeviceBlob::MergeFrom(from._internal_devblob());
      break;
    }
    case kDevmonitorpara: {
      _internal_mutable_devmonitorpara()->::PXREAService::DeviceMonitorParameter::MergeFrom(from._internal_devmonitorpara());
      break;
    }
    case kDevmodel: {
      _internal_mutable_devmodel()->::PXREAService::DeviceModel::MergeFrom(from._internal_devmodel());
      break;
    }
    case kCurrentapp: {
      _internal_mutable_currentapp()->::PXREAService::CurrentApplication::MergeFrom(from._internal_currentapp());
      break;
    }
    case kCtrllerbtry: {
      _internal_mutable_ctrllerbtry()->::PXREAService::ControllerBattery::MergeFrom(from._internal_ctrllerbtry());
      break;
    }
    case kVideoframeinfo: {
      _internal_mutable_videoframeinfo()->::PXREAService::VideoFrameInfo::MergeFrom(from._internal_videoframeinfo());
      break;
    }
    case kDevicemonitorsharedmemorykey: {
      _internal_mutable_devicemonitorsharedmemorykey()->::PXREAService::DeviceMonitorSharedMemoryKey::MergeFrom(from._internal_devicemonitorsharedmemorykey());
      break;
    }
    case kVideocontrolresult: {
      _internal_mutable_videocontrolresult()->::PXREAService::VideoControlResult::MergeFrom(from._internal_videocontrolresult());
      break;
    }
    case kDevicealiasinfo: {
      _internal_mutable_devicealiasinfo()->::PXREAService::DeviceAliasInfo::MergeFrom(from._internal_devicealiasinfo());
      break;
    }
    case kDevicestatejson: {
      _internal_mutable_devicestatejson()->::PXREAService::DeviceStateJson::MergeFrom(from._internal_devicestatejson());
      break;
    }
    case FEEDBACKARGS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.ServerFeedback)
}

void ServerFeedback::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clear_has_FeedbackArgs();
}

ServerFeedback::~ServerFeedback() {
  // @@protoc_insertion_point(destructor:PXREAService.ServerFeedback)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServerFeedback::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_FeedbackArgs()) {
    clear_FeedbackArgs();
  }
}

void ServerFeedback::ArenaDtor(void* object) {
  ServerFeedback* _this = reinterpret_cast< ServerFeedback* >(object);
  (void)_this;
}
void ServerFeedback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerFeedback::clear_FeedbackArgs() {
// @@protoc_insertion_point(one_of_clear_start:PXREAService.ServerFeedback)
  switch (FeedbackArgs_case()) {
    case kVrparam: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.vrparam_;
      }
      break;
    }
    case kDevid: {
      FeedbackArgs_.devid_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kDevbattery: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.devbattery_;
      }
      break;
    }
    case kDevstatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.devstatus_;
      }
      break;
    }
    case kDevblob: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.devblob_;
      }
      break;
    }
    case kDevmonitorpara: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.devmonitorpara_;
      }
      break;
    }
    case kDevmodel: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.devmodel_;
      }
      break;
    }
    case kCurrentapp: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.currentapp_;
      }
      break;
    }
    case kCtrllerbtry: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.ctrllerbtry_;
      }
      break;
    }
    case kVideoframeinfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.videoframeinfo_;
      }
      break;
    }
    case kDevicemonitorsharedmemorykey: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.devicemonitorsharedmemorykey_;
      }
      break;
    }
    case kVideocontrolresult: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.videocontrolresult_;
      }
      break;
    }
    case kDevicealiasinfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.devicealiasinfo_;
      }
      break;
    }
    case kDevicestatejson: {
      if (GetArenaForAllocation() == nullptr) {
        delete FeedbackArgs_.devicestatejson_;
      }
      break;
    }
    case FEEDBACKARGS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEEDBACKARGS_NOT_SET;
}


void ServerFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.ServerFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  clear_FeedbackArgs();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.ServerFeedback.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.VrParam vrparam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrparam(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string devid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.ServerFeedback.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.DeviceBattery devbattery = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_devbattery(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.DeviceStatus devstatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_devstatus(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.DeviceBlob devblob = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_devblob(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.DeviceMonitorParameter devmonitorpara = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_devmonitorpara(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.DeviceModel devmodel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_devmodel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.CurrentApplication currentapp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentapp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.ControllerBattery ctrllerbtry = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ctrllerbtry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.VideoFrameInfo videoframeinfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_videoframeinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.DeviceMonitorSharedMemoryKey devicemonitorsharedmemorykey = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_devicemonitorsharedmemorykey(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.VideoControlResult videocontrolresult = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_videocontrolresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.DeviceAliasInfo devicealiasinfo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_devicealiasinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PXREAService.DeviceStateJson devicestatejson = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_devicestatejson(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerFeedback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.ServerFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.ServerFeedback.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .PXREAService.VrParam vrparam = 2;
  if (_internal_has_vrparam()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vrparam(this), target, stream);
  }

  // string devid = 3;
  if (_internal_has_devid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.ServerFeedback.devid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_devid(), target);
  }

  // .PXREAService.DeviceBattery devbattery = 4;
  if (_internal_has_devbattery()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::devbattery(this), target, stream);
  }

  // .PXREAService.DeviceStatus devstatus = 5;
  if (_internal_has_devstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::devstatus(this), target, stream);
  }

  // .PXREAService.DeviceBlob devblob = 6;
  if (_internal_has_devblob()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::devblob(this), target, stream);
  }

  // .PXREAService.DeviceMonitorParameter devmonitorpara = 7;
  if (_internal_has_devmonitorpara()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::devmonitorpara(this), target, stream);
  }

  // .PXREAService.DeviceModel devmodel = 8;
  if (_internal_has_devmodel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::devmodel(this), target, stream);
  }

  // .PXREAService.CurrentApplication currentapp = 9;
  if (_internal_has_currentapp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::currentapp(this), target, stream);
  }

  // .PXREAService.ControllerBattery ctrllerbtry = 10;
  if (_internal_has_ctrllerbtry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::ctrllerbtry(this), target, stream);
  }

  // .PXREAService.VideoFrameInfo videoframeinfo = 11;
  if (_internal_has_videoframeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::videoframeinfo(this), target, stream);
  }

  // .PXREAService.DeviceMonitorSharedMemoryKey devicemonitorsharedmemorykey = 12;
  if (_internal_has_devicemonitorsharedmemorykey()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::devicemonitorsharedmemorykey(this), target, stream);
  }

  // .PXREAService.VideoControlResult videocontrolresult = 13;
  if (_internal_has_videocontrolresult()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::videocontrolresult(this), target, stream);
  }

  // .PXREAService.DeviceAliasInfo devicealiasinfo = 14;
  if (_internal_has_devicealiasinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::devicealiasinfo(this), target, stream);
  }

  // .PXREAService.DeviceStateJson devicestatejson = 15;
  if (_internal_has_devicestatejson()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::devicestatejson(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.ServerFeedback)
  return target;
}

size_t ServerFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.ServerFeedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (FeedbackArgs_case()) {
    // .PXREAService.VrParam vrparam = 2;
    case kVrparam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.vrparam_);
      break;
    }
    // string devid = 3;
    case kDevid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_devid());
      break;
    }
    // .PXREAService.DeviceBattery devbattery = 4;
    case kDevbattery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.devbattery_);
      break;
    }
    // .PXREAService.DeviceStatus devstatus = 5;
    case kDevstatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.devstatus_);
      break;
    }
    // .PXREAService.DeviceBlob devblob = 6;
    case kDevblob: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.devblob_);
      break;
    }
    // .PXREAService.DeviceMonitorParameter devmonitorpara = 7;
    case kDevmonitorpara: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.devmonitorpara_);
      break;
    }
    // .PXREAService.DeviceModel devmodel = 8;
    case kDevmodel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.devmodel_);
      break;
    }
    // .PXREAService.CurrentApplication currentapp = 9;
    case kCurrentapp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.currentapp_);
      break;
    }
    // .PXREAService.ControllerBattery ctrllerbtry = 10;
    case kCtrllerbtry: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.ctrllerbtry_);
      break;
    }
    // .PXREAService.VideoFrameInfo videoframeinfo = 11;
    case kVideoframeinfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.videoframeinfo_);
      break;
    }
    // .PXREAService.DeviceMonitorSharedMemoryKey devicemonitorsharedmemorykey = 12;
    case kDevicemonitorsharedmemorykey: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.devicemonitorsharedmemorykey_);
      break;
    }
    // .PXREAService.VideoControlResult videocontrolresult = 13;
    case kVideocontrolresult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.videocontrolresult_);
      break;
    }
    // .PXREAService.DeviceAliasInfo devicealiasinfo = 14;
    case kDevicealiasinfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.devicealiasinfo_);
      break;
    }
    // .PXREAService.DeviceStateJson devicestatejson = 15;
    case kDevicestatejson: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *FeedbackArgs_.devicestatejson_);
      break;
    }
    case FEEDBACKARGS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerFeedback::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServerFeedback::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerFeedback::GetClassData() const { return &_class_data_; }

void ServerFeedback::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServerFeedback *>(to)->MergeFrom(
      static_cast<const ServerFeedback &>(from));
}


void ServerFeedback::MergeFrom(const ServerFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.ServerFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  switch (from.FeedbackArgs_case()) {
    case kVrparam: {
      _internal_mutable_vrparam()->::PXREAService::VrParam::MergeFrom(from._internal_vrparam());
      break;
    }
    case kDevid: {
      _internal_set_devid(from._internal_devid());
      break;
    }
    case kDevbattery: {
      _internal_mutable_devbattery()->::PXREAService::DeviceBattery::MergeFrom(from._internal_devbattery());
      break;
    }
    case kDevstatus: {
      _internal_mutable_devstatus()->::PXREAService::DeviceStatus::MergeFrom(from._internal_devstatus());
      break;
    }
    case kDevblob: {
      _internal_mutable_devblob()->::PXREAService::DeviceBlob::MergeFrom(from._internal_devblob());
      break;
    }
    case kDevmonitorpara: {
      _internal_mutable_devmonitorpara()->::PXREAService::DeviceMonitorParameter::MergeFrom(from._internal_devmonitorpara());
      break;
    }
    case kDevmodel: {
      _internal_mutable_devmodel()->::PXREAService::DeviceModel::MergeFrom(from._internal_devmodel());
      break;
    }
    case kCurrentapp: {
      _internal_mutable_currentapp()->::PXREAService::CurrentApplication::MergeFrom(from._internal_currentapp());
      break;
    }
    case kCtrllerbtry: {
      _internal_mutable_ctrllerbtry()->::PXREAService::ControllerBattery::MergeFrom(from._internal_ctrllerbtry());
      break;
    }
    case kVideoframeinfo: {
      _internal_mutable_videoframeinfo()->::PXREAService::VideoFrameInfo::MergeFrom(from._internal_videoframeinfo());
      break;
    }
    case kDevicemonitorsharedmemorykey: {
      _internal_mutable_devicemonitorsharedmemorykey()->::PXREAService::DeviceMonitorSharedMemoryKey::MergeFrom(from._internal_devicemonitorsharedmemorykey());
      break;
    }
    case kVideocontrolresult: {
      _internal_mutable_videocontrolresult()->::PXREAService::VideoControlResult::MergeFrom(from._internal_videocontrolresult());
      break;
    }
    case kDevicealiasinfo: {
      _internal_mutable_devicealiasinfo()->::PXREAService::DeviceAliasInfo::MergeFrom(from._internal_devicealiasinfo());
      break;
    }
    case kDevicestatejson: {
      _internal_mutable_devicestatejson()->::PXREAService::DeviceStateJson::MergeFrom(from._internal_devicestatejson());
      break;
    }
    case FEEDBACKARGS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerFeedback::CopyFrom(const ServerFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.ServerFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerFeedback::IsInitialized() const {
  return true;
}

void ServerFeedback::InternalSwap(ServerFeedback* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(FeedbackArgs_, other->FeedbackArgs_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerFeedback::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[14]);
}

// ===================================================================

class VrParam::_Internal {
 public:
};

VrParam::VrParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.VrParam)
}
VrParam::VrParam(const VrParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&width_)) + sizeof(fps_));
  // @@protoc_insertion_point(copy_constructor:PXREAService.VrParam)
}

void VrParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fps_) -
    reinterpret_cast<char*>(&width_)) + sizeof(fps_));
}

VrParam::~VrParam() {
  // @@protoc_insertion_point(destructor:PXREAService.VrParam)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VrParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VrParam::ArenaDtor(void* object) {
  VrParam* _this = reinterpret_cast< VrParam* >(object);
  (void)_this;
}
void VrParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VrParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VrParam::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.VrParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fps_) -
      reinterpret_cast<char*>(&width_)) + sizeof(fps_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VrParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 fps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VrParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.VrParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // uint32 fps = 3;
  if (this->_internal_fps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fps(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.VrParam)
  return target;
}

size_t VrParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.VrParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 fps = 3;
  if (this->_internal_fps() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_fps());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VrParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VrParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VrParam::GetClassData() const { return &_class_data_; }

void VrParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VrParam *>(to)->MergeFrom(
      static_cast<const VrParam &>(from));
}


void VrParam::MergeFrom(const VrParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.VrParam)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_fps() != 0) {
    _internal_set_fps(from._internal_fps());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VrParam::CopyFrom(const VrParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.VrParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VrParam::IsInitialized() const {
  return true;
}

void VrParam::InternalSwap(VrParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VrParam, fps_)
      + sizeof(VrParam::fps_)
      - PROTOBUF_FIELD_OFFSET(VrParam, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VrParam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[15]);
}

// ===================================================================

class DeviceBattery::_Internal {
 public:
};

DeviceBattery::DeviceBattery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.DeviceBattery)
}
DeviceBattery::DeviceBattery(const DeviceBattery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  battery_ = from.battery_;
  // @@protoc_insertion_point(copy_constructor:PXREAService.DeviceBattery)
}

void DeviceBattery::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
battery_ = 0u;
}

DeviceBattery::~DeviceBattery() {
  // @@protoc_insertion_point(destructor:PXREAService.DeviceBattery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceBattery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceBattery::ArenaDtor(void* object) {
  DeviceBattery* _this = reinterpret_cast< DeviceBattery* >(object);
  (void)_this;
}
void DeviceBattery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceBattery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceBattery::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.DeviceBattery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  battery_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceBattery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceBattery.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 battery = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          battery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceBattery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.DeviceBattery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceBattery.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // uint32 battery = 2;
  if (this->_internal_battery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_battery(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.DeviceBattery)
  return target;
}

size_t DeviceBattery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.DeviceBattery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // uint32 battery = 2;
  if (this->_internal_battery() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_battery());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceBattery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceBattery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceBattery::GetClassData() const { return &_class_data_; }

void DeviceBattery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceBattery *>(to)->MergeFrom(
      static_cast<const DeviceBattery &>(from));
}


void DeviceBattery::MergeFrom(const DeviceBattery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.DeviceBattery)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (from._internal_battery() != 0) {
    _internal_set_battery(from._internal_battery());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceBattery::CopyFrom(const DeviceBattery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.DeviceBattery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceBattery::IsInitialized() const {
  return true;
}

void DeviceBattery::InternalSwap(DeviceBattery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  swap(battery_, other->battery_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceBattery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[16]);
}

// ===================================================================

class DeviceStatus::_Internal {
 public:
};

DeviceStatus::DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.DeviceStatus)
}
DeviceStatus::DeviceStatus(const DeviceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:PXREAService.DeviceStatus)
}

void DeviceStatus::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_ = 0;
}

DeviceStatus::~DeviceStatus() {
  // @@protoc_insertion_point(destructor:PXREAService.DeviceStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceStatus::ArenaDtor(void* object) {
  DeviceStatus* _this = reinterpret_cast< DeviceStatus* >(object);
  (void)_this;
}
void DeviceStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.DeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceStatus.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.DeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceStatus.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.DeviceStatus)
  return target;
}

size_t DeviceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.DeviceStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // int32 status = 2;
  if (this->_internal_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceStatus::GetClassData() const { return &_class_data_; }

void DeviceStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceStatus *>(to)->MergeFrom(
      static_cast<const DeviceStatus &>(from));
}


void DeviceStatus::MergeFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceStatus::CopyFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatus::IsInitialized() const {
  return true;
}

void DeviceStatus::InternalSwap(DeviceStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[17]);
}

// ===================================================================

class DeviceModel::_Internal {
 public:
};

DeviceModel::DeviceModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.DeviceModel)
}
DeviceModel::DeviceModel(const DeviceModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.DeviceModel)
}

void DeviceModel::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceModel::~DeviceModel() {
  // @@protoc_insertion_point(destructor:PXREAService.DeviceModel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceModel::ArenaDtor(void* object) {
  DeviceModel* _this = reinterpret_cast< DeviceModel* >(object);
  (void)_this;
}
void DeviceModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceModel::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.DeviceModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  model_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceModel.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceModel.model"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.DeviceModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceModel.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // string model = 2;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceModel.model");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.DeviceModel)
  return target;
}

size_t DeviceModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.DeviceModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // string model = 2;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceModel::GetClassData() const { return &_class_data_; }

void DeviceModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceModel *>(to)->MergeFrom(
      static_cast<const DeviceModel &>(from));
}


void DeviceModel::MergeFrom(const DeviceModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.DeviceModel)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (!from._internal_model().empty()) {
    _internal_set_model(from._internal_model());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceModel::CopyFrom(const DeviceModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.DeviceModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceModel::IsInitialized() const {
  return true;
}

void DeviceModel::InternalSwap(DeviceModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[18]);
}

// ===================================================================

class CurrentApplication::_Internal {
 public:
};

CurrentApplication::CurrentApplication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.CurrentApplication)
}
CurrentApplication::CurrentApplication(const CurrentApplication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_appname().empty()) {
    appname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_appname(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.CurrentApplication)
}

void CurrentApplication::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
appname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CurrentApplication::~CurrentApplication() {
  // @@protoc_insertion_point(destructor:PXREAService.CurrentApplication)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CurrentApplication::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  appname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CurrentApplication::ArenaDtor(void* object) {
  CurrentApplication* _this = reinterpret_cast< CurrentApplication* >(object);
  (void)_this;
}
void CurrentApplication::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CurrentApplication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CurrentApplication::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.CurrentApplication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  appname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentApplication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.CurrentApplication.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string appname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_appname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.CurrentApplication.appname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CurrentApplication::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.CurrentApplication)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.CurrentApplication.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // string appname = 2;
  if (!this->_internal_appname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_appname().data(), static_cast<int>(this->_internal_appname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.CurrentApplication.appname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_appname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.CurrentApplication)
  return target;
}

size_t CurrentApplication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.CurrentApplication)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // string appname = 2;
  if (!this->_internal_appname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_appname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrentApplication::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CurrentApplication::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrentApplication::GetClassData() const { return &_class_data_; }

void CurrentApplication::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CurrentApplication *>(to)->MergeFrom(
      static_cast<const CurrentApplication &>(from));
}


void CurrentApplication::MergeFrom(const CurrentApplication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.CurrentApplication)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (!from._internal_appname().empty()) {
    _internal_set_appname(from._internal_appname());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrentApplication::CopyFrom(const CurrentApplication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.CurrentApplication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentApplication::IsInitialized() const {
  return true;
}

void CurrentApplication::InternalSwap(CurrentApplication* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &appname_, lhs_arena,
      &other->appname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentApplication::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[19]);
}

// ===================================================================

class ControllerBattery::_Internal {
 public:
};

ControllerBattery::ControllerBattery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.ControllerBattery)
}
ControllerBattery::ControllerBattery(const ControllerBattery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&controllerid_, &from.controllerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&battery_) -
    reinterpret_cast<char*>(&controllerid_)) + sizeof(battery_));
  // @@protoc_insertion_point(copy_constructor:PXREAService.ControllerBattery)
}

void ControllerBattery::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&controllerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&battery_) -
    reinterpret_cast<char*>(&controllerid_)) + sizeof(battery_));
}

ControllerBattery::~ControllerBattery() {
  // @@protoc_insertion_point(destructor:PXREAService.ControllerBattery)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControllerBattery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControllerBattery::ArenaDtor(void* object) {
  ControllerBattery* _this = reinterpret_cast< ControllerBattery* >(object);
  (void)_this;
}
void ControllerBattery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControllerBattery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControllerBattery::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.ControllerBattery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  ::memset(&controllerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battery_) -
      reinterpret_cast<char*>(&controllerid_)) + sizeof(battery_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerBattery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.ControllerBattery.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 controllerid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          controllerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool connected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 battery = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          battery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControllerBattery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.ControllerBattery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.ControllerBattery.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // int32 controllerid = 2;
  if (this->_internal_controllerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_controllerid(), target);
  }

  // bool connected = 3;
  if (this->_internal_connected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_connected(), target);
  }

  // uint32 battery = 4;
  if (this->_internal_battery() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_battery(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.ControllerBattery)
  return target;
}

size_t ControllerBattery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.ControllerBattery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // int32 controllerid = 2;
  if (this->_internal_controllerid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_controllerid());
  }

  // bool connected = 3;
  if (this->_internal_connected() != 0) {
    total_size += 1 + 1;
  }

  // uint32 battery = 4;
  if (this->_internal_battery() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_battery());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerBattery::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControllerBattery::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerBattery::GetClassData() const { return &_class_data_; }

void ControllerBattery::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControllerBattery *>(to)->MergeFrom(
      static_cast<const ControllerBattery &>(from));
}


void ControllerBattery::MergeFrom(const ControllerBattery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.ControllerBattery)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (from._internal_controllerid() != 0) {
    _internal_set_controllerid(from._internal_controllerid());
  }
  if (from._internal_connected() != 0) {
    _internal_set_connected(from._internal_connected());
  }
  if (from._internal_battery() != 0) {
    _internal_set_battery(from._internal_battery());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerBattery::CopyFrom(const ControllerBattery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.ControllerBattery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerBattery::IsInitialized() const {
  return true;
}

void ControllerBattery::InternalSwap(ControllerBattery* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControllerBattery, battery_)
      + sizeof(ControllerBattery::battery_)
      - PROTOBUF_FIELD_OFFSET(ControllerBattery, controllerid_)>(
          reinterpret_cast<char*>(&controllerid_),
          reinterpret_cast<char*>(&other->controllerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerBattery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[20]);
}

// ===================================================================

class DeviceBlob::_Internal {
 public:
};

DeviceBlob::DeviceBlob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.DeviceBlob)
}
DeviceBlob::DeviceBlob(const DeviceBlob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.DeviceBlob)
}

void DeviceBlob::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceBlob::~DeviceBlob() {
  // @@protoc_insertion_point(destructor:PXREAService.DeviceBlob)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceBlob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceBlob::ArenaDtor(void* object) {
  DeviceBlob* _this = reinterpret_cast< DeviceBlob* >(object);
  (void)_this;
}
void DeviceBlob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceBlob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceBlob::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.DeviceBlob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceBlob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceBlob.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceBlob::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.DeviceBlob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceBlob.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.DeviceBlob)
  return target;
}

size_t DeviceBlob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.DeviceBlob)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceBlob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceBlob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceBlob::GetClassData() const { return &_class_data_; }

void DeviceBlob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceBlob *>(to)->MergeFrom(
      static_cast<const DeviceBlob &>(from));
}


void DeviceBlob::MergeFrom(const DeviceBlob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.DeviceBlob)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceBlob::CopyFrom(const DeviceBlob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.DeviceBlob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceBlob::IsInitialized() const {
  return true;
}

void DeviceBlob::InternalSwap(DeviceBlob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceBlob::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[21]);
}

// ===================================================================

class DeviceMonitorParameter::_Internal {
 public:
};

DeviceMonitorParameter::DeviceMonitorParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.DeviceMonitorParameter)
}
DeviceMonitorParameter::DeviceMonitorParameter(const DeviceMonitorParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:PXREAService.DeviceMonitorParameter)
}

void DeviceMonitorParameter::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

DeviceMonitorParameter::~DeviceMonitorParameter() {
  // @@protoc_insertion_point(destructor:PXREAService.DeviceMonitorParameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceMonitorParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceMonitorParameter::ArenaDtor(void* object) {
  DeviceMonitorParameter* _this = reinterpret_cast< DeviceMonitorParameter* >(object);
  (void)_this;
}
void DeviceMonitorParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceMonitorParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceMonitorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.DeviceMonitorParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMonitorParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceMonitorParameter.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceMonitorParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.DeviceMonitorParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceMonitorParameter.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.DeviceMonitorParameter)
  return target;
}

size_t DeviceMonitorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.DeviceMonitorParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMonitorParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceMonitorParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMonitorParameter::GetClassData() const { return &_class_data_; }

void DeviceMonitorParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceMonitorParameter *>(to)->MergeFrom(
      static_cast<const DeviceMonitorParameter &>(from));
}


void DeviceMonitorParameter::MergeFrom(const DeviceMonitorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.DeviceMonitorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMonitorParameter::CopyFrom(const DeviceMonitorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.DeviceMonitorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMonitorParameter::IsInitialized() const {
  return true;
}

void DeviceMonitorParameter::InternalSwap(DeviceMonitorParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceMonitorParameter, height_)
      + sizeof(DeviceMonitorParameter::height_)
      - PROTOBUF_FIELD_OFFSET(DeviceMonitorParameter, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMonitorParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[22]);
}

// ===================================================================

class VideoFrameInfo::_Internal {
 public:
};

VideoFrameInfo::VideoFrameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.VideoFrameInfo)
}
VideoFrameInfo::VideoFrameInfo(const VideoFrameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&framesize_, &from.framesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&pixformat_) -
    reinterpret_cast<char*>(&framesize_)) + sizeof(pixformat_));
  // @@protoc_insertion_point(copy_constructor:PXREAService.VideoFrameInfo)
}

void VideoFrameInfo::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&framesize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pixformat_) -
    reinterpret_cast<char*>(&framesize_)) + sizeof(pixformat_));
}

VideoFrameInfo::~VideoFrameInfo() {
  // @@protoc_insertion_point(destructor:PXREAService.VideoFrameInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VideoFrameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoFrameInfo::ArenaDtor(void* object) {
  VideoFrameInfo* _this = reinterpret_cast< VideoFrameInfo* >(object);
  (void)_this;
}
void VideoFrameInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoFrameInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoFrameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.VideoFrameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  ::memset(&framesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pixformat_) -
      reinterpret_cast<char*>(&framesize_)) + sizeof(pixformat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoFrameInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.VideoFrameInfo.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frameSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          framesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 bytesPerLine = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bytesperline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pixFormat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          pixformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoFrameInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.VideoFrameInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.VideoFrameInfo.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // uint32 frameSize = 2;
  if (this->_internal_framesize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_framesize(), target);
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  // uint32 bytesPerLine = 5;
  if (this->_internal_bytesperline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bytesperline(), target);
  }

  // int32 pixFormat = 6;
  if (this->_internal_pixformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_pixformat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.VideoFrameInfo)
  return target;
}

size_t VideoFrameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.VideoFrameInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // uint32 frameSize = 2;
  if (this->_internal_framesize() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_framesize());
  }

  // uint32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // uint32 bytesPerLine = 5;
  if (this->_internal_bytesperline() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_bytesperline());
  }

  // int32 pixFormat = 6;
  if (this->_internal_pixformat() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pixformat());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoFrameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoFrameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoFrameInfo::GetClassData() const { return &_class_data_; }

void VideoFrameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoFrameInfo *>(to)->MergeFrom(
      static_cast<const VideoFrameInfo &>(from));
}


void VideoFrameInfo::MergeFrom(const VideoFrameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.VideoFrameInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (from._internal_framesize() != 0) {
    _internal_set_framesize(from._internal_framesize());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_bytesperline() != 0) {
    _internal_set_bytesperline(from._internal_bytesperline());
  }
  if (from._internal_pixformat() != 0) {
    _internal_set_pixformat(from._internal_pixformat());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoFrameInfo::CopyFrom(const VideoFrameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.VideoFrameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFrameInfo::IsInitialized() const {
  return true;
}

void VideoFrameInfo::InternalSwap(VideoFrameInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoFrameInfo, pixformat_)
      + sizeof(VideoFrameInfo::pixformat_)
      - PROTOBUF_FIELD_OFFSET(VideoFrameInfo, framesize_)>(
          reinterpret_cast<char*>(&framesize_),
          reinterpret_cast<char*>(&other->framesize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoFrameInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[23]);
}

// ===================================================================

class DeviceMonitorSharedMemoryKey::_Internal {
 public:
};

DeviceMonitorSharedMemoryKey::DeviceMonitorSharedMemoryKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.DeviceMonitorSharedMemoryKey)
}
DeviceMonitorSharedMemoryKey::DeviceMonitorSharedMemoryKey(const DeviceMonitorSharedMemoryKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  smkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_smkey().empty()) {
    smkey_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_smkey(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.DeviceMonitorSharedMemoryKey)
}

void DeviceMonitorSharedMemoryKey::SharedCtor() {
smkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceMonitorSharedMemoryKey::~DeviceMonitorSharedMemoryKey() {
  // @@protoc_insertion_point(destructor:PXREAService.DeviceMonitorSharedMemoryKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceMonitorSharedMemoryKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  smkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceMonitorSharedMemoryKey::ArenaDtor(void* object) {
  DeviceMonitorSharedMemoryKey* _this = reinterpret_cast< DeviceMonitorSharedMemoryKey* >(object);
  (void)_this;
}
void DeviceMonitorSharedMemoryKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceMonitorSharedMemoryKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceMonitorSharedMemoryKey::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.DeviceMonitorSharedMemoryKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smkey_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceMonitorSharedMemoryKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string smkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_smkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceMonitorSharedMemoryKey.smkey"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceMonitorSharedMemoryKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.DeviceMonitorSharedMemoryKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string smkey = 1;
  if (!this->_internal_smkey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_smkey().data(), static_cast<int>(this->_internal_smkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceMonitorSharedMemoryKey.smkey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_smkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.DeviceMonitorSharedMemoryKey)
  return target;
}

size_t DeviceMonitorSharedMemoryKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.DeviceMonitorSharedMemoryKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string smkey = 1;
  if (!this->_internal_smkey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_smkey());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceMonitorSharedMemoryKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceMonitorSharedMemoryKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceMonitorSharedMemoryKey::GetClassData() const { return &_class_data_; }

void DeviceMonitorSharedMemoryKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceMonitorSharedMemoryKey *>(to)->MergeFrom(
      static_cast<const DeviceMonitorSharedMemoryKey &>(from));
}


void DeviceMonitorSharedMemoryKey::MergeFrom(const DeviceMonitorSharedMemoryKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.DeviceMonitorSharedMemoryKey)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_smkey().empty()) {
    _internal_set_smkey(from._internal_smkey());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceMonitorSharedMemoryKey::CopyFrom(const DeviceMonitorSharedMemoryKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.DeviceMonitorSharedMemoryKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceMonitorSharedMemoryKey::IsInitialized() const {
  return true;
}

void DeviceMonitorSharedMemoryKey::InternalSwap(DeviceMonitorSharedMemoryKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &smkey_, lhs_arena,
      &other->smkey_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceMonitorSharedMemoryKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[24]);
}

// ===================================================================

class VideoControlResult::_Internal {
 public:
};

VideoControlResult::VideoControlResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.VideoControlResult)
}
VideoControlResult::VideoControlResult(const VideoControlResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detail().empty()) {
    detail_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detail(), 
      GetArenaForAllocation());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&result_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:PXREAService.VideoControlResult)
}

void VideoControlResult::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&result_)) + sizeof(errorcode_));
}

VideoControlResult::~VideoControlResult() {
  // @@protoc_insertion_point(destructor:PXREAService.VideoControlResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VideoControlResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VideoControlResult::ArenaDtor(void* object) {
  VideoControlResult* _this = reinterpret_cast< VideoControlResult* >(object);
  (void)_this;
}
void VideoControlResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoControlResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoControlResult::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.VideoControlResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  action_.ClearToEmpty();
  detail_.ClearToEmpty();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&result_)) + sizeof(errorcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoControlResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.VideoControlResult.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.VideoControlResult.action"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 errorcode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string detail = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.VideoControlResult.detail"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoControlResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.VideoControlResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.VideoControlResult.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // string action = 2;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.VideoControlResult.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  // int32 result = 3;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_result(), target);
  }

  // int32 errorcode = 4;
  if (this->_internal_errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_errorcode(), target);
  }

  // string detail = 5;
  if (!this->_internal_detail().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.VideoControlResult.detail");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.VideoControlResult)
  return target;
}

size_t VideoControlResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.VideoControlResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // string action = 2;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string detail = 5;
  if (!this->_internal_detail().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // int32 result = 3;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 errorcode = 4;
  if (this->_internal_errorcode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_errorcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VideoControlResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VideoControlResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VideoControlResult::GetClassData() const { return &_class_data_; }

void VideoControlResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VideoControlResult *>(to)->MergeFrom(
      static_cast<const VideoControlResult &>(from));
}


void VideoControlResult::MergeFrom(const VideoControlResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.VideoControlResult)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (!from._internal_detail().empty()) {
    _internal_set_detail(from._internal_detail());
  }
  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from._internal_errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VideoControlResult::CopyFrom(const VideoControlResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.VideoControlResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoControlResult::IsInitialized() const {
  return true;
}

void VideoControlResult::InternalSwap(VideoControlResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &detail_, lhs_arena,
      &other->detail_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoControlResult, errorcode_)
      + sizeof(VideoControlResult::errorcode_)
      - PROTOBUF_FIELD_OFFSET(VideoControlResult, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoControlResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[25]);
}

// ===================================================================

class DeviceControlParameterJson::_Internal {
 public:
};

DeviceControlParameterJson::DeviceControlParameterJson(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.DeviceControlParameterJson)
}
DeviceControlParameterJson::DeviceControlParameterJson(const DeviceControlParameterJson& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parameter().empty()) {
    parameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parameter(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.DeviceControlParameterJson)
}

void DeviceControlParameterJson::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceControlParameterJson::~DeviceControlParameterJson() {
  // @@protoc_insertion_point(destructor:PXREAService.DeviceControlParameterJson)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceControlParameterJson::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parameter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceControlParameterJson::ArenaDtor(void* object) {
  DeviceControlParameterJson* _this = reinterpret_cast< DeviceControlParameterJson* >(object);
  (void)_this;
}
void DeviceControlParameterJson::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceControlParameterJson::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceControlParameterJson::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.DeviceControlParameterJson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  parameter_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceControlParameterJson::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceControlParameterJson.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string parameter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_parameter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceControlParameterJson.parameter"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceControlParameterJson::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.DeviceControlParameterJson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceControlParameterJson.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // string parameter = 2;
  if (!this->_internal_parameter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parameter().data(), static_cast<int>(this->_internal_parameter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceControlParameterJson.parameter");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.DeviceControlParameterJson)
  return target;
}

size_t DeviceControlParameterJson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.DeviceControlParameterJson)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // string parameter = 2;
  if (!this->_internal_parameter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parameter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceControlParameterJson::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceControlParameterJson::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceControlParameterJson::GetClassData() const { return &_class_data_; }

void DeviceControlParameterJson::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceControlParameterJson *>(to)->MergeFrom(
      static_cast<const DeviceControlParameterJson &>(from));
}


void DeviceControlParameterJson::MergeFrom(const DeviceControlParameterJson& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.DeviceControlParameterJson)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (!from._internal_parameter().empty()) {
    _internal_set_parameter(from._internal_parameter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceControlParameterJson::CopyFrom(const DeviceControlParameterJson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.DeviceControlParameterJson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceControlParameterJson::IsInitialized() const {
  return true;
}

void DeviceControlParameterJson::InternalSwap(DeviceControlParameterJson* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parameter_, lhs_arena,
      &other->parameter_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceControlParameterJson::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[26]);
}

// ===================================================================

class DeviceStateJson::_Internal {
 public:
};

DeviceStateJson::DeviceStateJson(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.DeviceStateJson)
}
DeviceStateJson::DeviceStateJson(const DeviceStateJson& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  statejson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_statejson().empty()) {
    statejson_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_statejson(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:PXREAService.DeviceStateJson)
}

void DeviceStateJson::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
statejson_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeviceStateJson::~DeviceStateJson() {
  // @@protoc_insertion_point(destructor:PXREAService.DeviceStateJson)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeviceStateJson::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  statejson_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceStateJson::ArenaDtor(void* object) {
  DeviceStateJson* _this = reinterpret_cast< DeviceStateJson* >(object);
  (void)_this;
}
void DeviceStateJson::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceStateJson::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceStateJson::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.DeviceStateJson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  statejson_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceStateJson::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceStateJson.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string statejson = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_statejson();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.DeviceStateJson.statejson"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceStateJson::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.DeviceStateJson)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceStateJson.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // string statejson = 2;
  if (!this->_internal_statejson().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_statejson().data(), static_cast<int>(this->_internal_statejson().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.DeviceStateJson.statejson");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_statejson(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.DeviceStateJson)
  return target;
}

size_t DeviceStateJson::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.DeviceStateJson)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // string statejson = 2;
  if (!this->_internal_statejson().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_statejson());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceStateJson::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeviceStateJson::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceStateJson::GetClassData() const { return &_class_data_; }

void DeviceStateJson::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeviceStateJson *>(to)->MergeFrom(
      static_cast<const DeviceStateJson &>(from));
}


void DeviceStateJson::MergeFrom(const DeviceStateJson& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.DeviceStateJson)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (!from._internal_statejson().empty()) {
    _internal_set_statejson(from._internal_statejson());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceStateJson::CopyFrom(const DeviceStateJson& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.DeviceStateJson)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStateJson::IsInitialized() const {
  return true;
}

void DeviceStateJson::InternalSwap(DeviceStateJson* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &statejson_, lhs_arena,
      &other->statejson_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStateJson::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[27]);
}

// ===================================================================

class ScreenMonitorParameter::_Internal {
 public:
};

ScreenMonitorParameter::ScreenMonitorParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PXREAService.ScreenMonitorParameter)
}
ScreenMonitorParameter::ScreenMonitorParameter(const ScreenMonitorParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_devid().empty()) {
    devid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_devid(), 
      GetArenaForAllocation());
  }
  quality_ = from.quality_;
  // @@protoc_insertion_point(copy_constructor:PXREAService.ScreenMonitorParameter)
}

void ScreenMonitorParameter::SharedCtor() {
devid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quality_ = 0;
}

ScreenMonitorParameter::~ScreenMonitorParameter() {
  // @@protoc_insertion_point(destructor:PXREAService.ScreenMonitorParameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScreenMonitorParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  devid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScreenMonitorParameter::ArenaDtor(void* object) {
  ScreenMonitorParameter* _this = reinterpret_cast< ScreenMonitorParameter* >(object);
  (void)_this;
}
void ScreenMonitorParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScreenMonitorParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScreenMonitorParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:PXREAService.ScreenMonitorParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devid_.ClearToEmpty();
  quality_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScreenMonitorParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string devid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_devid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PXREAService.ScreenMonitorParameter.devid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScreenMonitorParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PXREAService.ScreenMonitorParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_devid().data(), static_cast<int>(this->_internal_devid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PXREAService.ScreenMonitorParameter.devid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_devid(), target);
  }

  // int32 quality = 2;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PXREAService.ScreenMonitorParameter)
  return target;
}

size_t ScreenMonitorParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PXREAService.ScreenMonitorParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string devid = 1;
  if (!this->_internal_devid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_devid());
  }

  // int32 quality = 2;
  if (this->_internal_quality() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScreenMonitorParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScreenMonitorParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScreenMonitorParameter::GetClassData() const { return &_class_data_; }

void ScreenMonitorParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScreenMonitorParameter *>(to)->MergeFrom(
      static_cast<const ScreenMonitorParameter &>(from));
}


void ScreenMonitorParameter::MergeFrom(const ScreenMonitorParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PXREAService.ScreenMonitorParameter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_devid().empty()) {
    _internal_set_devid(from._internal_devid());
  }
  if (from._internal_quality() != 0) {
    _internal_set_quality(from._internal_quality());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScreenMonitorParameter::CopyFrom(const ScreenMonitorParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PXREAService.ScreenMonitorParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenMonitorParameter::IsInitialized() const {
  return true;
}

void ScreenMonitorParameter::InternalSwap(ScreenMonitorParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &devid_, lhs_arena,
      &other->devid_, rhs_arena
  );
  swap(quality_, other->quality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScreenMonitorParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_PXREAService_2eproto_getter, &descriptor_table_PXREAService_2eproto_once,
      file_level_metadata_PXREAService_2eproto[28]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace PXREAService
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PXREAService::DeviceID* Arena::CreateMaybeMessage< ::PXREAService::DeviceID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::DeviceID >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::VRPid* Arena::CreateMaybeMessage< ::PXREAService::VRPid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::VRPid >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::TexHandleInfo* Arena::CreateMaybeMessage< ::PXREAService::TexHandleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::TexHandleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::VideoPlayInfo* Arena::CreateMaybeMessage< ::PXREAService::VideoPlayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::VideoPlayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::VideoSeekInfo* Arena::CreateMaybeMessage< ::PXREAService::VideoSeekInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::VideoSeekInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::AppPlayInfo* Arena::CreateMaybeMessage< ::PXREAService::AppPlayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::AppPlayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::PicPlayInfo* Arena::CreateMaybeMessage< ::PXREAService::PicPlayInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::PicPlayInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::DeviceVolumnInfo* Arena::CreateMaybeMessage< ::PXREAService::DeviceVolumnInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::DeviceVolumnInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::DeviceBytesInfo* Arena::CreateMaybeMessage< ::PXREAService::DeviceBytesInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::DeviceBytesInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::RoomBytesInfo* Arena::CreateMaybeMessage< ::PXREAService::RoomBytesInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::RoomBytesInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::ControllerInfo* Arena::CreateMaybeMessage< ::PXREAService::ControllerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::ControllerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::ControllerHomeButtonFunction* Arena::CreateMaybeMessage< ::PXREAService::ControllerHomeButtonFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::ControllerHomeButtonFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::ScreenStateInfo* Arena::CreateMaybeMessage< ::PXREAService::ScreenStateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::ScreenStateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::DeviceAliasInfo* Arena::CreateMaybeMessage< ::PXREAService::DeviceAliasInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::DeviceAliasInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::ServerFeedback* Arena::CreateMaybeMessage< ::PXREAService::ServerFeedback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::ServerFeedback >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::VrParam* Arena::CreateMaybeMessage< ::PXREAService::VrParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::VrParam >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::DeviceBattery* Arena::CreateMaybeMessage< ::PXREAService::DeviceBattery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::DeviceBattery >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::DeviceStatus* Arena::CreateMaybeMessage< ::PXREAService::DeviceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::DeviceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::DeviceModel* Arena::CreateMaybeMessage< ::PXREAService::DeviceModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::DeviceModel >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::CurrentApplication* Arena::CreateMaybeMessage< ::PXREAService::CurrentApplication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::CurrentApplication >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::ControllerBattery* Arena::CreateMaybeMessage< ::PXREAService::ControllerBattery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::ControllerBattery >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::DeviceBlob* Arena::CreateMaybeMessage< ::PXREAService::DeviceBlob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::DeviceBlob >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::DeviceMonitorParameter* Arena::CreateMaybeMessage< ::PXREAService::DeviceMonitorParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::DeviceMonitorParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::VideoFrameInfo* Arena::CreateMaybeMessage< ::PXREAService::VideoFrameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::VideoFrameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::DeviceMonitorSharedMemoryKey* Arena::CreateMaybeMessage< ::PXREAService::DeviceMonitorSharedMemoryKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::DeviceMonitorSharedMemoryKey >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::VideoControlResult* Arena::CreateMaybeMessage< ::PXREAService::VideoControlResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::VideoControlResult >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::DeviceControlParameterJson* Arena::CreateMaybeMessage< ::PXREAService::DeviceControlParameterJson >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::DeviceControlParameterJson >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::DeviceStateJson* Arena::CreateMaybeMessage< ::PXREAService::DeviceStateJson >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::DeviceStateJson >(arena);
}
template<> PROTOBUF_NOINLINE ::PXREAService::ScreenMonitorParameter* Arena::CreateMaybeMessage< ::PXREAService::ScreenMonitorParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PXREAService::ScreenMonitorParameter >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
