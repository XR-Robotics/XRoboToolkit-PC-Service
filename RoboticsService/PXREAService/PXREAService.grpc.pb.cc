// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: PXREAService.proto

#include "PXREAService.pb.h"
#include "PXREAService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace PXREAService {

static const char* EAService_method_names[] = {
  "/PXREAService.EAService/SendBytesToDevice",
  "/PXREAService.EAService/SendBytesToRoom",
  "/PXREAService.EAService/WatchServerFeedback",
  "/PXREAService.EAService/CancelServerFeedback",
  "/PXREAService.EAService/SendBeat",
  "/PXREAService.EAService/DeviceControlJson",
};

std::unique_ptr< EAService::Stub> EAService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EAService::Stub> stub(new EAService::Stub(channel, options));
  return stub;
}

EAService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendBytesToDevice_(EAService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendBytesToRoom_(EAService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchServerFeedback_(EAService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_CancelServerFeedback_(EAService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendBeat_(EAService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeviceControlJson_(EAService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EAService::Stub::SendBytesToDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceBytesInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceBytesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendBytesToDevice_, context, request, response);
}

void EAService::Stub::async::SendBytesToDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceBytesInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceBytesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBytesToDevice_, context, request, response, std::move(f));
}

void EAService::Stub::async::SendBytesToDevice(::grpc::ClientContext* context, const ::PXREAService::DeviceBytesInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBytesToDevice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncSendBytesToDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceBytesInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceBytesInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendBytesToDevice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncSendBytesToDeviceRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceBytesInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendBytesToDeviceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::SendBytesToRoom(::grpc::ClientContext* context, const ::PXREAService::RoomBytesInfo& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::RoomBytesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendBytesToRoom_, context, request, response);
}

void EAService::Stub::async::SendBytesToRoom(::grpc::ClientContext* context, const ::PXREAService::RoomBytesInfo* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::RoomBytesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBytesToRoom_, context, request, response, std::move(f));
}

void EAService::Stub::async::SendBytesToRoom(::grpc::ClientContext* context, const ::PXREAService::RoomBytesInfo* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBytesToRoom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncSendBytesToRoomRaw(::grpc::ClientContext* context, const ::PXREAService::RoomBytesInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::RoomBytesInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendBytesToRoom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncSendBytesToRoomRaw(::grpc::ClientContext* context, const ::PXREAService::RoomBytesInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendBytesToRoomRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::PXREAService::ServerFeedback>* EAService::Stub::WatchServerFeedbackRaw(::grpc::ClientContext* context, const ::PXREAService::VRPid& request) {
  return ::grpc::internal::ClientReaderFactory< ::PXREAService::ServerFeedback>::Create(channel_.get(), rpcmethod_WatchServerFeedback_, context, request);
}

void EAService::Stub::async::WatchServerFeedback(::grpc::ClientContext* context, const ::PXREAService::VRPid* request, ::grpc::ClientReadReactor< ::PXREAService::ServerFeedback>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::PXREAService::ServerFeedback>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchServerFeedback_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::PXREAService::ServerFeedback>* EAService::Stub::AsyncWatchServerFeedbackRaw(::grpc::ClientContext* context, const ::PXREAService::VRPid& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::PXREAService::ServerFeedback>::Create(channel_.get(), cq, rpcmethod_WatchServerFeedback_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::PXREAService::ServerFeedback>* EAService::Stub::PrepareAsyncWatchServerFeedbackRaw(::grpc::ClientContext* context, const ::PXREAService::VRPid& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::PXREAService::ServerFeedback>::Create(channel_.get(), cq, rpcmethod_WatchServerFeedback_, context, request, false, nullptr);
}

::grpc::Status EAService::Stub::CancelServerFeedback(::grpc::ClientContext* context, const ::PXREAService::VRPid& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::VRPid, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelServerFeedback_, context, request, response);
}

void EAService::Stub::async::CancelServerFeedback(::grpc::ClientContext* context, const ::PXREAService::VRPid* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::VRPid, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelServerFeedback_, context, request, response, std::move(f));
}

void EAService::Stub::async::CancelServerFeedback(::grpc::ClientContext* context, const ::PXREAService::VRPid* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelServerFeedback_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncCancelServerFeedbackRaw(::grpc::ClientContext* context, const ::PXREAService::VRPid& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::VRPid, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelServerFeedback_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncCancelServerFeedbackRaw(::grpc::ClientContext* context, const ::PXREAService::VRPid& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelServerFeedbackRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::SendBeat(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendBeat_, context, request, response);
}

void EAService::Stub::async::SendBeat(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBeat_, context, request, response, std::move(f));
}

void EAService::Stub::async::SendBeat(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendBeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncSendBeatRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendBeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncSendBeatRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendBeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EAService::Stub::DeviceControlJson(::grpc::ClientContext* context, const ::PXREAService::DeviceControlParameterJson& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::PXREAService::DeviceControlParameterJson, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeviceControlJson_, context, request, response);
}

void EAService::Stub::async::DeviceControlJson(::grpc::ClientContext* context, const ::PXREAService::DeviceControlParameterJson* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::PXREAService::DeviceControlParameterJson, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeviceControlJson_, context, request, response, std::move(f));
}

void EAService::Stub::async::DeviceControlJson(::grpc::ClientContext* context, const ::PXREAService::DeviceControlParameterJson* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeviceControlJson_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::PrepareAsyncDeviceControlJsonRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceControlParameterJson& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::PXREAService::DeviceControlParameterJson, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeviceControlJson_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EAService::Stub::AsyncDeviceControlJsonRaw(::grpc::ClientContext* context, const ::PXREAService::DeviceControlParameterJson& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeviceControlJsonRaw(context, request, cq);
  result->StartCall();
  return result;
}

EAService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceBytesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceBytesInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->SendBytesToDevice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::RoomBytesInfo, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::RoomBytesInfo* req,
             ::google::protobuf::Empty* resp) {
               return service->SendBytesToRoom(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< EAService::Service, ::PXREAService::VRPid, ::PXREAService::ServerFeedback>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::VRPid* req,
             ::grpc::ServerWriter<::PXREAService::ServerFeedback>* writer) {
               return service->WatchServerFeedback(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::VRPid, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::VRPid* req,
             ::google::protobuf::Empty* resp) {
               return service->CancelServerFeedback(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::google::protobuf::Empty, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::google::protobuf::Empty* resp) {
               return service->SendBeat(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EAService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EAService::Service, ::PXREAService::DeviceControlParameterJson, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EAService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::PXREAService::DeviceControlParameterJson* req,
             ::google::protobuf::Empty* resp) {
               return service->DeviceControlJson(ctx, req, resp);
             }, this)));
}

EAService::Service::~Service() {
}

::grpc::Status EAService::Service::SendBytesToDevice(::grpc::ServerContext* context, const ::PXREAService::DeviceBytesInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::SendBytesToRoom(::grpc::ServerContext* context, const ::PXREAService::RoomBytesInfo* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::WatchServerFeedback(::grpc::ServerContext* context, const ::PXREAService::VRPid* request, ::grpc::ServerWriter< ::PXREAService::ServerFeedback>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::CancelServerFeedback(::grpc::ServerContext* context, const ::PXREAService::VRPid* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::SendBeat(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EAService::Service::DeviceControlJson(::grpc::ServerContext* context, const ::PXREAService::DeviceControlParameterJson* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace PXREAService

