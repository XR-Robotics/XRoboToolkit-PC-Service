// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: PXREAService.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_PXREAService_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_PXREAService_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/empty.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_PXREAService_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_PXREAService_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_PXREAService_2eproto;
namespace PXREAService {
class AppPlayInfo;
struct AppPlayInfoDefaultTypeInternal;
extern AppPlayInfoDefaultTypeInternal _AppPlayInfo_default_instance_;
class ControllerBattery;
struct ControllerBatteryDefaultTypeInternal;
extern ControllerBatteryDefaultTypeInternal _ControllerBattery_default_instance_;
class ControllerHomeButtonFunction;
struct ControllerHomeButtonFunctionDefaultTypeInternal;
extern ControllerHomeButtonFunctionDefaultTypeInternal _ControllerHomeButtonFunction_default_instance_;
class ControllerInfo;
struct ControllerInfoDefaultTypeInternal;
extern ControllerInfoDefaultTypeInternal _ControllerInfo_default_instance_;
class CurrentApplication;
struct CurrentApplicationDefaultTypeInternal;
extern CurrentApplicationDefaultTypeInternal _CurrentApplication_default_instance_;
class DeviceAliasInfo;
struct DeviceAliasInfoDefaultTypeInternal;
extern DeviceAliasInfoDefaultTypeInternal _DeviceAliasInfo_default_instance_;
class DeviceBattery;
struct DeviceBatteryDefaultTypeInternal;
extern DeviceBatteryDefaultTypeInternal _DeviceBattery_default_instance_;
class DeviceBlob;
struct DeviceBlobDefaultTypeInternal;
extern DeviceBlobDefaultTypeInternal _DeviceBlob_default_instance_;
class DeviceBytesInfo;
struct DeviceBytesInfoDefaultTypeInternal;
extern DeviceBytesInfoDefaultTypeInternal _DeviceBytesInfo_default_instance_;
class DeviceControlParameterJson;
struct DeviceControlParameterJsonDefaultTypeInternal;
extern DeviceControlParameterJsonDefaultTypeInternal _DeviceControlParameterJson_default_instance_;
class DeviceID;
struct DeviceIDDefaultTypeInternal;
extern DeviceIDDefaultTypeInternal _DeviceID_default_instance_;
class DeviceModel;
struct DeviceModelDefaultTypeInternal;
extern DeviceModelDefaultTypeInternal _DeviceModel_default_instance_;
class DeviceMonitorParameter;
struct DeviceMonitorParameterDefaultTypeInternal;
extern DeviceMonitorParameterDefaultTypeInternal _DeviceMonitorParameter_default_instance_;
class DeviceMonitorSharedMemoryKey;
struct DeviceMonitorSharedMemoryKeyDefaultTypeInternal;
extern DeviceMonitorSharedMemoryKeyDefaultTypeInternal _DeviceMonitorSharedMemoryKey_default_instance_;
class DeviceStateJson;
struct DeviceStateJsonDefaultTypeInternal;
extern DeviceStateJsonDefaultTypeInternal _DeviceStateJson_default_instance_;
class DeviceStatus;
struct DeviceStatusDefaultTypeInternal;
extern DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
class DeviceVolumnInfo;
struct DeviceVolumnInfoDefaultTypeInternal;
extern DeviceVolumnInfoDefaultTypeInternal _DeviceVolumnInfo_default_instance_;
class PicPlayInfo;
struct PicPlayInfoDefaultTypeInternal;
extern PicPlayInfoDefaultTypeInternal _PicPlayInfo_default_instance_;
class RoomBytesInfo;
struct RoomBytesInfoDefaultTypeInternal;
extern RoomBytesInfoDefaultTypeInternal _RoomBytesInfo_default_instance_;
class ScreenMonitorParameter;
struct ScreenMonitorParameterDefaultTypeInternal;
extern ScreenMonitorParameterDefaultTypeInternal _ScreenMonitorParameter_default_instance_;
class ScreenStateInfo;
struct ScreenStateInfoDefaultTypeInternal;
extern ScreenStateInfoDefaultTypeInternal _ScreenStateInfo_default_instance_;
class ServerFeedback;
struct ServerFeedbackDefaultTypeInternal;
extern ServerFeedbackDefaultTypeInternal _ServerFeedback_default_instance_;
class TexHandleInfo;
struct TexHandleInfoDefaultTypeInternal;
extern TexHandleInfoDefaultTypeInternal _TexHandleInfo_default_instance_;
class VRPid;
struct VRPidDefaultTypeInternal;
extern VRPidDefaultTypeInternal _VRPid_default_instance_;
class VideoControlResult;
struct VideoControlResultDefaultTypeInternal;
extern VideoControlResultDefaultTypeInternal _VideoControlResult_default_instance_;
class VideoFrameInfo;
struct VideoFrameInfoDefaultTypeInternal;
extern VideoFrameInfoDefaultTypeInternal _VideoFrameInfo_default_instance_;
class VideoPlayInfo;
struct VideoPlayInfoDefaultTypeInternal;
extern VideoPlayInfoDefaultTypeInternal _VideoPlayInfo_default_instance_;
class VideoSeekInfo;
struct VideoSeekInfoDefaultTypeInternal;
extern VideoSeekInfoDefaultTypeInternal _VideoSeekInfo_default_instance_;
class VrParam;
struct VrParamDefaultTypeInternal;
extern VrParamDefaultTypeInternal _VrParam_default_instance_;
}  // namespace PXREAService
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace PXREAService {

// ===================================================================


// -------------------------------------------------------------------

class VrParam final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.VrParam) */ {
 public:
  inline VrParam() : VrParam(nullptr) {}
  ~VrParam() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VrParam(
      ::google::protobuf::internal::ConstantInitialized);

  inline VrParam(const VrParam& from) : VrParam(nullptr, from) {}
  inline VrParam(VrParam&& from) noexcept
      : VrParam(nullptr, std::move(from)) {}
  inline VrParam& operator=(const VrParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline VrParam& operator=(VrParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VrParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const VrParam* internal_default_instance() {
    return reinterpret_cast<const VrParam*>(
        &_VrParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(VrParam& a, VrParam& b) { a.Swap(&b); }
  inline void Swap(VrParam* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VrParam* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VrParam* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VrParam>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VrParam& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VrParam& from) { VrParam::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VrParam* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.VrParam"; }

 protected:
  explicit VrParam(::google::protobuf::Arena* arena);
  VrParam(::google::protobuf::Arena* arena, const VrParam& from);
  VrParam(::google::protobuf::Arena* arena, VrParam&& from) noexcept
      : VrParam(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kFpsFieldNumber = 3,
  };
  // uint32 width = 1;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 2;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // uint32 fps = 3;
  void clear_fps() ;
  ::uint32_t fps() const;
  void set_fps(::uint32_t value);

  private:
  ::uint32_t _internal_fps() const;
  void _internal_set_fps(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.VrParam)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VrParam_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VrParam& from_msg);
    ::uint32_t width_;
    ::uint32_t height_;
    ::uint32_t fps_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class VideoSeekInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.VideoSeekInfo) */ {
 public:
  inline VideoSeekInfo() : VideoSeekInfo(nullptr) {}
  ~VideoSeekInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VideoSeekInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline VideoSeekInfo(const VideoSeekInfo& from) : VideoSeekInfo(nullptr, from) {}
  inline VideoSeekInfo(VideoSeekInfo&& from) noexcept
      : VideoSeekInfo(nullptr, std::move(from)) {}
  inline VideoSeekInfo& operator=(const VideoSeekInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSeekInfo& operator=(VideoSeekInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoSeekInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSeekInfo* internal_default_instance() {
    return reinterpret_cast<const VideoSeekInfo*>(
        &_VideoSeekInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(VideoSeekInfo& a, VideoSeekInfo& b) { a.Swap(&b); }
  inline void Swap(VideoSeekInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSeekInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSeekInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VideoSeekInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VideoSeekInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VideoSeekInfo& from) { VideoSeekInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VideoSeekInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.VideoSeekInfo"; }

 protected:
  explicit VideoSeekInfo(::google::protobuf::Arena* arena);
  VideoSeekInfo(::google::protobuf::Arena* arena, const VideoSeekInfo& from);
  VideoSeekInfo(::google::protobuf::Arena* arena, VideoSeekInfo&& from) noexcept
      : VideoSeekInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kMillisecondFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // int32 millisecond = 2;
  void clear_millisecond() ;
  ::int32_t millisecond() const;
  void set_millisecond(::int32_t value);

  private:
  ::int32_t _internal_millisecond() const;
  void _internal_set_millisecond(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.VideoSeekInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VideoSeekInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VideoSeekInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::int32_t millisecond_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class VideoPlayInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.VideoPlayInfo) */ {
 public:
  inline VideoPlayInfo() : VideoPlayInfo(nullptr) {}
  ~VideoPlayInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VideoPlayInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline VideoPlayInfo(const VideoPlayInfo& from) : VideoPlayInfo(nullptr, from) {}
  inline VideoPlayInfo(VideoPlayInfo&& from) noexcept
      : VideoPlayInfo(nullptr, std::move(from)) {}
  inline VideoPlayInfo& operator=(const VideoPlayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoPlayInfo& operator=(VideoPlayInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoPlayInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoPlayInfo* internal_default_instance() {
    return reinterpret_cast<const VideoPlayInfo*>(
        &_VideoPlayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(VideoPlayInfo& a, VideoPlayInfo& b) { a.Swap(&b); }
  inline void Swap(VideoPlayInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoPlayInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoPlayInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VideoPlayInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VideoPlayInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VideoPlayInfo& from) { VideoPlayInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VideoPlayInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.VideoPlayInfo"; }

 protected:
  explicit VideoPlayInfo(::google::protobuf::Arena* arena);
  VideoPlayInfo(::google::protobuf::Arena* arena, const VideoPlayInfo& from);
  VideoPlayInfo(::google::protobuf::Arena* arena, VideoPlayInfo&& from) noexcept
      : VideoPlayInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kVideopathFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // string videopath = 2;
  void clear_videopath() ;
  const std::string& videopath() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_videopath(Arg_&& arg, Args_... args);
  std::string* mutable_videopath();
  PROTOBUF_NODISCARD std::string* release_videopath();
  void set_allocated_videopath(std::string* value);

  private:
  const std::string& _internal_videopath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_videopath(
      const std::string& value);
  std::string* _internal_mutable_videopath();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.VideoPlayInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VideoPlayInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VideoPlayInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::google::protobuf::internal::ArenaStringPtr videopath_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class VideoFrameInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.VideoFrameInfo) */ {
 public:
  inline VideoFrameInfo() : VideoFrameInfo(nullptr) {}
  ~VideoFrameInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VideoFrameInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline VideoFrameInfo(const VideoFrameInfo& from) : VideoFrameInfo(nullptr, from) {}
  inline VideoFrameInfo(VideoFrameInfo&& from) noexcept
      : VideoFrameInfo(nullptr, std::move(from)) {}
  inline VideoFrameInfo& operator=(const VideoFrameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoFrameInfo& operator=(VideoFrameInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoFrameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoFrameInfo* internal_default_instance() {
    return reinterpret_cast<const VideoFrameInfo*>(
        &_VideoFrameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(VideoFrameInfo& a, VideoFrameInfo& b) { a.Swap(&b); }
  inline void Swap(VideoFrameInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoFrameInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoFrameInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VideoFrameInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VideoFrameInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VideoFrameInfo& from) { VideoFrameInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VideoFrameInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.VideoFrameInfo"; }

 protected:
  explicit VideoFrameInfo(::google::protobuf::Arena* arena);
  VideoFrameInfo(::google::protobuf::Arena* arena, const VideoFrameInfo& from);
  VideoFrameInfo(::google::protobuf::Arena* arena, VideoFrameInfo&& from) noexcept
      : VideoFrameInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kFrameSizeFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kBytesPerLineFieldNumber = 5,
    kPixFormatFieldNumber = 6,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // uint32 frameSize = 2;
  void clear_framesize() ;
  ::uint32_t framesize() const;
  void set_framesize(::uint32_t value);

  private:
  ::uint32_t _internal_framesize() const;
  void _internal_set_framesize(::uint32_t value);

  public:
  // uint32 width = 3;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 4;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // uint32 bytesPerLine = 5;
  void clear_bytesperline() ;
  ::uint32_t bytesperline() const;
  void set_bytesperline(::uint32_t value);

  private:
  ::uint32_t _internal_bytesperline() const;
  void _internal_set_bytesperline(::uint32_t value);

  public:
  // int32 pixFormat = 6;
  void clear_pixformat() ;
  ::int32_t pixformat() const;
  void set_pixformat(::int32_t value);

  private:
  ::int32_t _internal_pixformat() const;
  void _internal_set_pixformat(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.VideoFrameInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      41, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VideoFrameInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VideoFrameInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::uint32_t framesize_;
    ::uint32_t width_;
    ::uint32_t height_;
    ::uint32_t bytesperline_;
    ::int32_t pixformat_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class VideoControlResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.VideoControlResult) */ {
 public:
  inline VideoControlResult() : VideoControlResult(nullptr) {}
  ~VideoControlResult() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VideoControlResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline VideoControlResult(const VideoControlResult& from) : VideoControlResult(nullptr, from) {}
  inline VideoControlResult(VideoControlResult&& from) noexcept
      : VideoControlResult(nullptr, std::move(from)) {}
  inline VideoControlResult& operator=(const VideoControlResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoControlResult& operator=(VideoControlResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VideoControlResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoControlResult* internal_default_instance() {
    return reinterpret_cast<const VideoControlResult*>(
        &_VideoControlResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(VideoControlResult& a, VideoControlResult& b) { a.Swap(&b); }
  inline void Swap(VideoControlResult* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoControlResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoControlResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VideoControlResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VideoControlResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VideoControlResult& from) { VideoControlResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VideoControlResult* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.VideoControlResult"; }

 protected:
  explicit VideoControlResult(::google::protobuf::Arena* arena);
  VideoControlResult(::google::protobuf::Arena* arena, const VideoControlResult& from);
  VideoControlResult(::google::protobuf::Arena* arena, VideoControlResult&& from) noexcept
      : VideoControlResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kActionFieldNumber = 2,
    kDetailFieldNumber = 5,
    kResultFieldNumber = 3,
    kErrorcodeFieldNumber = 4,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // string action = 2;
  void clear_action() ;
  const std::string& action() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_action(Arg_&& arg, Args_... args);
  std::string* mutable_action();
  PROTOBUF_NODISCARD std::string* release_action();
  void set_allocated_action(std::string* value);

  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(
      const std::string& value);
  std::string* _internal_mutable_action();

  public:
  // string detail = 5;
  void clear_detail() ;
  const std::string& detail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_detail(Arg_&& arg, Args_... args);
  std::string* mutable_detail();
  PROTOBUF_NODISCARD std::string* release_detail();
  void set_allocated_detail(std::string* value);

  private:
  const std::string& _internal_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail(
      const std::string& value);
  std::string* _internal_mutable_detail();

  public:
  // int32 result = 3;
  void clear_result() ;
  ::int32_t result() const;
  void set_result(::int32_t value);

  private:
  ::int32_t _internal_result() const;
  void _internal_set_result(::int32_t value);

  public:
  // int32 errorcode = 4;
  void clear_errorcode() ;
  ::int32_t errorcode() const;
  void set_errorcode(::int32_t value);

  private:
  ::int32_t _internal_errorcode() const;
  void _internal_set_errorcode(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.VideoControlResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      57, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VideoControlResult_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VideoControlResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::google::protobuf::internal::ArenaStringPtr action_;
    ::google::protobuf::internal::ArenaStringPtr detail_;
    ::int32_t result_;
    ::int32_t errorcode_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class VRPid final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.VRPid) */ {
 public:
  inline VRPid() : VRPid(nullptr) {}
  ~VRPid() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR VRPid(
      ::google::protobuf::internal::ConstantInitialized);

  inline VRPid(const VRPid& from) : VRPid(nullptr, from) {}
  inline VRPid(VRPid&& from) noexcept
      : VRPid(nullptr, std::move(from)) {}
  inline VRPid& operator=(const VRPid& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRPid& operator=(VRPid&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VRPid& default_instance() {
    return *internal_default_instance();
  }
  static inline const VRPid* internal_default_instance() {
    return reinterpret_cast<const VRPid*>(
        &_VRPid_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(VRPid& a, VRPid& b) { a.Swap(&b); }
  inline void Swap(VRPid* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRPid* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VRPid* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<VRPid>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VRPid& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const VRPid& from) { VRPid::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VRPid* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.VRPid"; }

 protected:
  explicit VRPid(::google::protobuf::Arena* arena);
  VRPid(::google::protobuf::Arena* arena, const VRPid& from);
  VRPid(::google::protobuf::Arena* arena, VRPid&& from) noexcept
      : VRPid(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPidFieldNumber = 1,
  };
  // int32 pid = 1;
  void clear_pid() ;
  ::int32_t pid() const;
  void set_pid(::int32_t value);

  private:
  ::int32_t _internal_pid() const;
  void _internal_set_pid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.VRPid)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_VRPid_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const VRPid& from_msg);
    ::int32_t pid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class TexHandleInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.TexHandleInfo) */ {
 public:
  inline TexHandleInfo() : TexHandleInfo(nullptr) {}
  ~TexHandleInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TexHandleInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline TexHandleInfo(const TexHandleInfo& from) : TexHandleInfo(nullptr, from) {}
  inline TexHandleInfo(TexHandleInfo&& from) noexcept
      : TexHandleInfo(nullptr, std::move(from)) {}
  inline TexHandleInfo& operator=(const TexHandleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TexHandleInfo& operator=(TexHandleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TexHandleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TexHandleInfo* internal_default_instance() {
    return reinterpret_cast<const TexHandleInfo*>(
        &_TexHandleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(TexHandleInfo& a, TexHandleInfo& b) { a.Swap(&b); }
  inline void Swap(TexHandleInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TexHandleInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TexHandleInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<TexHandleInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TexHandleInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TexHandleInfo& from) { TexHandleInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TexHandleInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.TexHandleInfo"; }

 protected:
  explicit TexHandleInfo(::google::protobuf::Arena* arena);
  TexHandleInfo(::google::protobuf::Arena* arena, const TexHandleInfo& from);
  TexHandleInfo(::google::protobuf::Arena* arena, TexHandleInfo&& from) noexcept
      : TexHandleInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPidFieldNumber = 1,
    kHandleFieldNumber = 2,
  };
  // int64 pid = 1;
  void clear_pid() ;
  ::int64_t pid() const;
  void set_pid(::int64_t value);

  private:
  ::int64_t _internal_pid() const;
  void _internal_set_pid(::int64_t value);

  public:
  // int64 handle = 2;
  void clear_handle() ;
  ::int64_t handle() const;
  void set_handle(::int64_t value);

  private:
  ::int64_t _internal_handle() const;
  void _internal_set_handle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.TexHandleInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_TexHandleInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TexHandleInfo& from_msg);
    ::int64_t pid_;
    ::int64_t handle_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class ScreenStateInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.ScreenStateInfo) */ {
 public:
  inline ScreenStateInfo() : ScreenStateInfo(nullptr) {}
  ~ScreenStateInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ScreenStateInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ScreenStateInfo(const ScreenStateInfo& from) : ScreenStateInfo(nullptr, from) {}
  inline ScreenStateInfo(ScreenStateInfo&& from) noexcept
      : ScreenStateInfo(nullptr, std::move(from)) {}
  inline ScreenStateInfo& operator=(const ScreenStateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScreenStateInfo& operator=(ScreenStateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScreenStateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScreenStateInfo* internal_default_instance() {
    return reinterpret_cast<const ScreenStateInfo*>(
        &_ScreenStateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(ScreenStateInfo& a, ScreenStateInfo& b) { a.Swap(&b); }
  inline void Swap(ScreenStateInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScreenStateInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScreenStateInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ScreenStateInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScreenStateInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ScreenStateInfo& from) { ScreenStateInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ScreenStateInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.ScreenStateInfo"; }

 protected:
  explicit ScreenStateInfo(::google::protobuf::Arena* arena);
  ScreenStateInfo(::google::protobuf::Arena* arena, const ScreenStateInfo& from);
  ScreenStateInfo(::google::protobuf::Arena* arena, ScreenStateInfo&& from) noexcept
      : ScreenStateInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // int32 state = 2;
  void clear_state() ;
  ::int32_t state() const;
  void set_state(::int32_t value);

  private:
  ::int32_t _internal_state() const;
  void _internal_set_state(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.ScreenStateInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ScreenStateInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ScreenStateInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::int32_t state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class ScreenMonitorParameter final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.ScreenMonitorParameter) */ {
 public:
  inline ScreenMonitorParameter() : ScreenMonitorParameter(nullptr) {}
  ~ScreenMonitorParameter() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ScreenMonitorParameter(
      ::google::protobuf::internal::ConstantInitialized);

  inline ScreenMonitorParameter(const ScreenMonitorParameter& from) : ScreenMonitorParameter(nullptr, from) {}
  inline ScreenMonitorParameter(ScreenMonitorParameter&& from) noexcept
      : ScreenMonitorParameter(nullptr, std::move(from)) {}
  inline ScreenMonitorParameter& operator=(const ScreenMonitorParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScreenMonitorParameter& operator=(ScreenMonitorParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScreenMonitorParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScreenMonitorParameter* internal_default_instance() {
    return reinterpret_cast<const ScreenMonitorParameter*>(
        &_ScreenMonitorParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(ScreenMonitorParameter& a, ScreenMonitorParameter& b) { a.Swap(&b); }
  inline void Swap(ScreenMonitorParameter* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScreenMonitorParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScreenMonitorParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ScreenMonitorParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ScreenMonitorParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ScreenMonitorParameter& from) { ScreenMonitorParameter::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ScreenMonitorParameter* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.ScreenMonitorParameter"; }

 protected:
  explicit ScreenMonitorParameter(::google::protobuf::Arena* arena);
  ScreenMonitorParameter(::google::protobuf::Arena* arena, const ScreenMonitorParameter& from);
  ScreenMonitorParameter(::google::protobuf::Arena* arena, ScreenMonitorParameter&& from) noexcept
      : ScreenMonitorParameter(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kQualityFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // int32 quality = 2;
  void clear_quality() ;
  ::int32_t quality() const;
  void set_quality(::int32_t value);

  private:
  ::int32_t _internal_quality() const;
  void _internal_set_quality(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.ScreenMonitorParameter)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      49, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ScreenMonitorParameter_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ScreenMonitorParameter& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::int32_t quality_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class RoomBytesInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.RoomBytesInfo) */ {
 public:
  inline RoomBytesInfo() : RoomBytesInfo(nullptr) {}
  ~RoomBytesInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR RoomBytesInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline RoomBytesInfo(const RoomBytesInfo& from) : RoomBytesInfo(nullptr, from) {}
  inline RoomBytesInfo(RoomBytesInfo&& from) noexcept
      : RoomBytesInfo(nullptr, std::move(from)) {}
  inline RoomBytesInfo& operator=(const RoomBytesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomBytesInfo& operator=(RoomBytesInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomBytesInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomBytesInfo* internal_default_instance() {
    return reinterpret_cast<const RoomBytesInfo*>(
        &_RoomBytesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(RoomBytesInfo& a, RoomBytesInfo& b) { a.Swap(&b); }
  inline void Swap(RoomBytesInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomBytesInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomBytesInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<RoomBytesInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoomBytesInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const RoomBytesInfo& from) { RoomBytesInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RoomBytesInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.RoomBytesInfo"; }

 protected:
  explicit RoomBytesInfo(::google::protobuf::Arena* arena);
  RoomBytesInfo(::google::protobuf::Arena* arena, const RoomBytesInfo& from);
  RoomBytesInfo(::google::protobuf::Arena* arena, RoomBytesInfo&& from) noexcept
      : RoomBytesInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 1,
  };
  // bytes content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.RoomBytesInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_RoomBytesInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const RoomBytesInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr content_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class PicPlayInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.PicPlayInfo) */ {
 public:
  inline PicPlayInfo() : PicPlayInfo(nullptr) {}
  ~PicPlayInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PicPlayInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline PicPlayInfo(const PicPlayInfo& from) : PicPlayInfo(nullptr, from) {}
  inline PicPlayInfo(PicPlayInfo&& from) noexcept
      : PicPlayInfo(nullptr, std::move(from)) {}
  inline PicPlayInfo& operator=(const PicPlayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PicPlayInfo& operator=(PicPlayInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PicPlayInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PicPlayInfo* internal_default_instance() {
    return reinterpret_cast<const PicPlayInfo*>(
        &_PicPlayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(PicPlayInfo& a, PicPlayInfo& b) { a.Swap(&b); }
  inline void Swap(PicPlayInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PicPlayInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PicPlayInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PicPlayInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PicPlayInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PicPlayInfo& from) { PicPlayInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PicPlayInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.PicPlayInfo"; }

 protected:
  explicit PicPlayInfo(::google::protobuf::Arena* arena);
  PicPlayInfo(::google::protobuf::Arena* arena, const PicPlayInfo& from);
  PicPlayInfo(::google::protobuf::Arena* arena, PicPlayInfo&& from) noexcept
      : PicPlayInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kPicpathFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // string picpath = 2;
  void clear_picpath() ;
  const std::string& picpath() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_picpath(Arg_&& arg, Args_... args);
  std::string* mutable_picpath();
  PROTOBUF_NODISCARD std::string* release_picpath();
  void set_allocated_picpath(std::string* value);

  private:
  const std::string& _internal_picpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_picpath(
      const std::string& value);
  std::string* _internal_mutable_picpath();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.PicPlayInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PicPlayInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PicPlayInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::google::protobuf::internal::ArenaStringPtr picpath_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class DeviceVolumnInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.DeviceVolumnInfo) */ {
 public:
  inline DeviceVolumnInfo() : DeviceVolumnInfo(nullptr) {}
  ~DeviceVolumnInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceVolumnInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceVolumnInfo(const DeviceVolumnInfo& from) : DeviceVolumnInfo(nullptr, from) {}
  inline DeviceVolumnInfo(DeviceVolumnInfo&& from) noexcept
      : DeviceVolumnInfo(nullptr, std::move(from)) {}
  inline DeviceVolumnInfo& operator=(const DeviceVolumnInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceVolumnInfo& operator=(DeviceVolumnInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceVolumnInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceVolumnInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceVolumnInfo*>(
        &_DeviceVolumnInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(DeviceVolumnInfo& a, DeviceVolumnInfo& b) { a.Swap(&b); }
  inline void Swap(DeviceVolumnInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceVolumnInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceVolumnInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeviceVolumnInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceVolumnInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceVolumnInfo& from) { DeviceVolumnInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceVolumnInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.DeviceVolumnInfo"; }

 protected:
  explicit DeviceVolumnInfo(::google::protobuf::Arena* arena);
  DeviceVolumnInfo(::google::protobuf::Arena* arena, const DeviceVolumnInfo& from);
  DeviceVolumnInfo(::google::protobuf::Arena* arena, DeviceVolumnInfo&& from) noexcept
      : DeviceVolumnInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kVolumnFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // uint32 volumn = 2;
  void clear_volumn() ;
  ::uint32_t volumn() const;
  void set_volumn(::uint32_t value);

  private:
  ::uint32_t _internal_volumn() const;
  void _internal_set_volumn(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.DeviceVolumnInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceVolumnInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceVolumnInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::uint32_t volumn_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class DeviceStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.DeviceStatus) */ {
 public:
  inline DeviceStatus() : DeviceStatus(nullptr) {}
  ~DeviceStatus() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceStatus(const DeviceStatus& from) : DeviceStatus(nullptr, from) {}
  inline DeviceStatus(DeviceStatus&& from) noexcept
      : DeviceStatus(nullptr, std::move(from)) {}
  inline DeviceStatus& operator=(const DeviceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceStatus& operator=(DeviceStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceStatus* internal_default_instance() {
    return reinterpret_cast<const DeviceStatus*>(
        &_DeviceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(DeviceStatus& a, DeviceStatus& b) { a.Swap(&b); }
  inline void Swap(DeviceStatus* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceStatus* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeviceStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceStatus& from) { DeviceStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceStatus* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.DeviceStatus"; }

 protected:
  explicit DeviceStatus(::google::protobuf::Arena* arena);
  DeviceStatus(::google::protobuf::Arena* arena, const DeviceStatus& from);
  DeviceStatus(::google::protobuf::Arena* arena, DeviceStatus&& from) noexcept
      : DeviceStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // int32 status = 2;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.DeviceStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceStatus_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceStatus& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::int32_t status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class DeviceStateJson final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.DeviceStateJson) */ {
 public:
  inline DeviceStateJson() : DeviceStateJson(nullptr) {}
  ~DeviceStateJson() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceStateJson(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceStateJson(const DeviceStateJson& from) : DeviceStateJson(nullptr, from) {}
  inline DeviceStateJson(DeviceStateJson&& from) noexcept
      : DeviceStateJson(nullptr, std::move(from)) {}
  inline DeviceStateJson& operator=(const DeviceStateJson& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceStateJson& operator=(DeviceStateJson&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceStateJson& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceStateJson* internal_default_instance() {
    return reinterpret_cast<const DeviceStateJson*>(
        &_DeviceStateJson_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(DeviceStateJson& a, DeviceStateJson& b) { a.Swap(&b); }
  inline void Swap(DeviceStateJson* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceStateJson* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceStateJson* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeviceStateJson>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceStateJson& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceStateJson& from) { DeviceStateJson::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceStateJson* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.DeviceStateJson"; }

 protected:
  explicit DeviceStateJson(::google::protobuf::Arena* arena);
  DeviceStateJson(::google::protobuf::Arena* arena, const DeviceStateJson& from);
  DeviceStateJson(::google::protobuf::Arena* arena, DeviceStateJson&& from) noexcept
      : DeviceStateJson(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kStatejsonFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // string statejson = 2;
  void clear_statejson() ;
  const std::string& statejson() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_statejson(Arg_&& arg, Args_... args);
  std::string* mutable_statejson();
  PROTOBUF_NODISCARD std::string* release_statejson();
  void set_allocated_statejson(std::string* value);

  private:
  const std::string& _internal_statejson() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_statejson(
      const std::string& value);
  std::string* _internal_mutable_statejson();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.DeviceStateJson)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      51, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceStateJson_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceStateJson& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::google::protobuf::internal::ArenaStringPtr statejson_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class DeviceMonitorSharedMemoryKey final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.DeviceMonitorSharedMemoryKey) */ {
 public:
  inline DeviceMonitorSharedMemoryKey() : DeviceMonitorSharedMemoryKey(nullptr) {}
  ~DeviceMonitorSharedMemoryKey() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceMonitorSharedMemoryKey(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceMonitorSharedMemoryKey(const DeviceMonitorSharedMemoryKey& from) : DeviceMonitorSharedMemoryKey(nullptr, from) {}
  inline DeviceMonitorSharedMemoryKey(DeviceMonitorSharedMemoryKey&& from) noexcept
      : DeviceMonitorSharedMemoryKey(nullptr, std::move(from)) {}
  inline DeviceMonitorSharedMemoryKey& operator=(const DeviceMonitorSharedMemoryKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMonitorSharedMemoryKey& operator=(DeviceMonitorSharedMemoryKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMonitorSharedMemoryKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMonitorSharedMemoryKey* internal_default_instance() {
    return reinterpret_cast<const DeviceMonitorSharedMemoryKey*>(
        &_DeviceMonitorSharedMemoryKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(DeviceMonitorSharedMemoryKey& a, DeviceMonitorSharedMemoryKey& b) { a.Swap(&b); }
  inline void Swap(DeviceMonitorSharedMemoryKey* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMonitorSharedMemoryKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMonitorSharedMemoryKey* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeviceMonitorSharedMemoryKey>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceMonitorSharedMemoryKey& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceMonitorSharedMemoryKey& from) { DeviceMonitorSharedMemoryKey::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceMonitorSharedMemoryKey* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.DeviceMonitorSharedMemoryKey"; }

 protected:
  explicit DeviceMonitorSharedMemoryKey(::google::protobuf::Arena* arena);
  DeviceMonitorSharedMemoryKey(::google::protobuf::Arena* arena, const DeviceMonitorSharedMemoryKey& from);
  DeviceMonitorSharedMemoryKey(::google::protobuf::Arena* arena, DeviceMonitorSharedMemoryKey&& from) noexcept
      : DeviceMonitorSharedMemoryKey(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSmkeyFieldNumber = 1,
  };
  // string smkey = 1;
  void clear_smkey() ;
  const std::string& smkey() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_smkey(Arg_&& arg, Args_... args);
  std::string* mutable_smkey();
  PROTOBUF_NODISCARD std::string* release_smkey();
  void set_allocated_smkey(std::string* value);

  private:
  const std::string& _internal_smkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_smkey(
      const std::string& value);
  std::string* _internal_mutable_smkey();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.DeviceMonitorSharedMemoryKey)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      55, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceMonitorSharedMemoryKey_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceMonitorSharedMemoryKey& from_msg);
    ::google::protobuf::internal::ArenaStringPtr smkey_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class DeviceMonitorParameter final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.DeviceMonitorParameter) */ {
 public:
  inline DeviceMonitorParameter() : DeviceMonitorParameter(nullptr) {}
  ~DeviceMonitorParameter() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceMonitorParameter(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceMonitorParameter(const DeviceMonitorParameter& from) : DeviceMonitorParameter(nullptr, from) {}
  inline DeviceMonitorParameter(DeviceMonitorParameter&& from) noexcept
      : DeviceMonitorParameter(nullptr, std::move(from)) {}
  inline DeviceMonitorParameter& operator=(const DeviceMonitorParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceMonitorParameter& operator=(DeviceMonitorParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceMonitorParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceMonitorParameter* internal_default_instance() {
    return reinterpret_cast<const DeviceMonitorParameter*>(
        &_DeviceMonitorParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(DeviceMonitorParameter& a, DeviceMonitorParameter& b) { a.Swap(&b); }
  inline void Swap(DeviceMonitorParameter* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceMonitorParameter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceMonitorParameter* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeviceMonitorParameter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceMonitorParameter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceMonitorParameter& from) { DeviceMonitorParameter::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceMonitorParameter* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.DeviceMonitorParameter"; }

 protected:
  explicit DeviceMonitorParameter(::google::protobuf::Arena* arena);
  DeviceMonitorParameter(::google::protobuf::Arena* arena, const DeviceMonitorParameter& from);
  DeviceMonitorParameter(::google::protobuf::Arena* arena, DeviceMonitorParameter&& from) noexcept
      : DeviceMonitorParameter(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // uint32 width = 2;
  void clear_width() ;
  ::uint32_t width() const;
  void set_width(::uint32_t value);

  private:
  ::uint32_t _internal_width() const;
  void _internal_set_width(::uint32_t value);

  public:
  // uint32 height = 3;
  void clear_height() ;
  ::uint32_t height() const;
  void set_height(::uint32_t value);

  private:
  ::uint32_t _internal_height() const;
  void _internal_set_height(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.DeviceMonitorParameter)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      49, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceMonitorParameter_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceMonitorParameter& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::uint32_t width_;
    ::uint32_t height_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class DeviceModel final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.DeviceModel) */ {
 public:
  inline DeviceModel() : DeviceModel(nullptr) {}
  ~DeviceModel() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceModel(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceModel(const DeviceModel& from) : DeviceModel(nullptr, from) {}
  inline DeviceModel(DeviceModel&& from) noexcept
      : DeviceModel(nullptr, std::move(from)) {}
  inline DeviceModel& operator=(const DeviceModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceModel& operator=(DeviceModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceModel* internal_default_instance() {
    return reinterpret_cast<const DeviceModel*>(
        &_DeviceModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(DeviceModel& a, DeviceModel& b) { a.Swap(&b); }
  inline void Swap(DeviceModel* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceModel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceModel* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeviceModel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceModel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceModel& from) { DeviceModel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceModel* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.DeviceModel"; }

 protected:
  explicit DeviceModel(::google::protobuf::Arena* arena);
  DeviceModel(::google::protobuf::Arena* arena, const DeviceModel& from);
  DeviceModel(::google::protobuf::Arena* arena, DeviceModel&& from) noexcept
      : DeviceModel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kModelFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // string model = 2;
  void clear_model() ;
  const std::string& model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model(Arg_&& arg, Args_... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* value);

  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(
      const std::string& value);
  std::string* _internal_mutable_model();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.DeviceModel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceModel_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceModel& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::google::protobuf::internal::ArenaStringPtr model_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class DeviceID final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.DeviceID) */ {
 public:
  inline DeviceID() : DeviceID(nullptr) {}
  ~DeviceID() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceID(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceID(const DeviceID& from) : DeviceID(nullptr, from) {}
  inline DeviceID(DeviceID&& from) noexcept
      : DeviceID(nullptr, std::move(from)) {}
  inline DeviceID& operator=(const DeviceID& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceID& operator=(DeviceID&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceID& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceID* internal_default_instance() {
    return reinterpret_cast<const DeviceID*>(
        &_DeviceID_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(DeviceID& a, DeviceID& b) { a.Swap(&b); }
  inline void Swap(DeviceID* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceID* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeviceID>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceID& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceID& from) { DeviceID::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceID* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.DeviceID"; }

 protected:
  explicit DeviceID(::google::protobuf::Arena* arena);
  DeviceID(::google::protobuf::Arena* arena, const DeviceID& from);
  DeviceID(::google::protobuf::Arena* arena, DeviceID&& from) noexcept
      : DeviceID(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.DeviceID)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      32, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceID_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceID& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class DeviceControlParameterJson final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.DeviceControlParameterJson) */ {
 public:
  inline DeviceControlParameterJson() : DeviceControlParameterJson(nullptr) {}
  ~DeviceControlParameterJson() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceControlParameterJson(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceControlParameterJson(const DeviceControlParameterJson& from) : DeviceControlParameterJson(nullptr, from) {}
  inline DeviceControlParameterJson(DeviceControlParameterJson&& from) noexcept
      : DeviceControlParameterJson(nullptr, std::move(from)) {}
  inline DeviceControlParameterJson& operator=(const DeviceControlParameterJson& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceControlParameterJson& operator=(DeviceControlParameterJson&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceControlParameterJson& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceControlParameterJson* internal_default_instance() {
    return reinterpret_cast<const DeviceControlParameterJson*>(
        &_DeviceControlParameterJson_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(DeviceControlParameterJson& a, DeviceControlParameterJson& b) { a.Swap(&b); }
  inline void Swap(DeviceControlParameterJson* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceControlParameterJson* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceControlParameterJson* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeviceControlParameterJson>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceControlParameterJson& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceControlParameterJson& from) { DeviceControlParameterJson::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceControlParameterJson* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.DeviceControlParameterJson"; }

 protected:
  explicit DeviceControlParameterJson(::google::protobuf::Arena* arena);
  DeviceControlParameterJson(::google::protobuf::Arena* arena, const DeviceControlParameterJson& from);
  DeviceControlParameterJson(::google::protobuf::Arena* arena, DeviceControlParameterJson&& from) noexcept
      : DeviceControlParameterJson(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kParameterFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // string parameter = 2;
  void clear_parameter() ;
  const std::string& parameter() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parameter(Arg_&& arg, Args_... args);
  std::string* mutable_parameter();
  PROTOBUF_NODISCARD std::string* release_parameter();
  void set_allocated_parameter(std::string* value);

  private:
  const std::string& _internal_parameter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parameter(
      const std::string& value);
  std::string* _internal_mutable_parameter();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.DeviceControlParameterJson)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceControlParameterJson_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceControlParameterJson& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::google::protobuf::internal::ArenaStringPtr parameter_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class DeviceBytesInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.DeviceBytesInfo) */ {
 public:
  inline DeviceBytesInfo() : DeviceBytesInfo(nullptr) {}
  ~DeviceBytesInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceBytesInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceBytesInfo(const DeviceBytesInfo& from) : DeviceBytesInfo(nullptr, from) {}
  inline DeviceBytesInfo(DeviceBytesInfo&& from) noexcept
      : DeviceBytesInfo(nullptr, std::move(from)) {}
  inline DeviceBytesInfo& operator=(const DeviceBytesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceBytesInfo& operator=(DeviceBytesInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceBytesInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceBytesInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceBytesInfo*>(
        &_DeviceBytesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(DeviceBytesInfo& a, DeviceBytesInfo& b) { a.Swap(&b); }
  inline void Swap(DeviceBytesInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceBytesInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceBytesInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeviceBytesInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceBytesInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceBytesInfo& from) { DeviceBytesInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceBytesInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.DeviceBytesInfo"; }

 protected:
  explicit DeviceBytesInfo(::google::protobuf::Arena* arena);
  DeviceBytesInfo(::google::protobuf::Arena* arena, const DeviceBytesInfo& from);
  DeviceBytesInfo(::google::protobuf::Arena* arena, DeviceBytesInfo&& from) noexcept
      : DeviceBytesInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // bytes content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.DeviceBytesInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      42, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceBytesInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceBytesInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class DeviceBlob final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.DeviceBlob) */ {
 public:
  inline DeviceBlob() : DeviceBlob(nullptr) {}
  ~DeviceBlob() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceBlob(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceBlob(const DeviceBlob& from) : DeviceBlob(nullptr, from) {}
  inline DeviceBlob(DeviceBlob&& from) noexcept
      : DeviceBlob(nullptr, std::move(from)) {}
  inline DeviceBlob& operator=(const DeviceBlob& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceBlob& operator=(DeviceBlob&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceBlob& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceBlob* internal_default_instance() {
    return reinterpret_cast<const DeviceBlob*>(
        &_DeviceBlob_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(DeviceBlob& a, DeviceBlob& b) { a.Swap(&b); }
  inline void Swap(DeviceBlob* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceBlob* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceBlob* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeviceBlob>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceBlob& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceBlob& from) { DeviceBlob::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceBlob* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.DeviceBlob"; }

 protected:
  explicit DeviceBlob(::google::protobuf::Arena* arena);
  DeviceBlob(::google::protobuf::Arena* arena, const DeviceBlob& from);
  DeviceBlob(::google::protobuf::Arena* arena, DeviceBlob&& from) noexcept
      : DeviceBlob(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // bytes content = 2;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.DeviceBlob)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      37, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceBlob_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceBlob& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::google::protobuf::internal::ArenaStringPtr content_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class DeviceBattery final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.DeviceBattery) */ {
 public:
  inline DeviceBattery() : DeviceBattery(nullptr) {}
  ~DeviceBattery() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceBattery(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceBattery(const DeviceBattery& from) : DeviceBattery(nullptr, from) {}
  inline DeviceBattery(DeviceBattery&& from) noexcept
      : DeviceBattery(nullptr, std::move(from)) {}
  inline DeviceBattery& operator=(const DeviceBattery& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceBattery& operator=(DeviceBattery&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceBattery& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceBattery* internal_default_instance() {
    return reinterpret_cast<const DeviceBattery*>(
        &_DeviceBattery_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(DeviceBattery& a, DeviceBattery& b) { a.Swap(&b); }
  inline void Swap(DeviceBattery* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceBattery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceBattery* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeviceBattery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceBattery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceBattery& from) { DeviceBattery::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceBattery* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.DeviceBattery"; }

 protected:
  explicit DeviceBattery(::google::protobuf::Arena* arena);
  DeviceBattery(::google::protobuf::Arena* arena, const DeviceBattery& from);
  DeviceBattery(::google::protobuf::Arena* arena, DeviceBattery&& from) noexcept
      : DeviceBattery(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kBatteryFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // uint32 battery = 2;
  void clear_battery() ;
  ::uint32_t battery() const;
  void set_battery(::uint32_t value);

  private:
  ::uint32_t _internal_battery() const;
  void _internal_set_battery(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.DeviceBattery)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      40, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceBattery_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceBattery& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::uint32_t battery_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class DeviceAliasInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.DeviceAliasInfo) */ {
 public:
  inline DeviceAliasInfo() : DeviceAliasInfo(nullptr) {}
  ~DeviceAliasInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceAliasInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeviceAliasInfo(const DeviceAliasInfo& from) : DeviceAliasInfo(nullptr, from) {}
  inline DeviceAliasInfo(DeviceAliasInfo&& from) noexcept
      : DeviceAliasInfo(nullptr, std::move(from)) {}
  inline DeviceAliasInfo& operator=(const DeviceAliasInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceAliasInfo& operator=(DeviceAliasInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceAliasInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceAliasInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceAliasInfo*>(
        &_DeviceAliasInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(DeviceAliasInfo& a, DeviceAliasInfo& b) { a.Swap(&b); }
  inline void Swap(DeviceAliasInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceAliasInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceAliasInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<DeviceAliasInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceAliasInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeviceAliasInfo& from) { DeviceAliasInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceAliasInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.DeviceAliasInfo"; }

 protected:
  explicit DeviceAliasInfo(::google::protobuf::Arena* arena);
  DeviceAliasInfo(::google::protobuf::Arena* arena, const DeviceAliasInfo& from);
  DeviceAliasInfo(::google::protobuf::Arena* arena, DeviceAliasInfo&& from) noexcept
      : DeviceAliasInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kAliasFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // string alias = 2;
  void clear_alias() ;
  const std::string& alias() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_alias(Arg_&& arg, Args_... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* value);

  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(
      const std::string& value);
  std::string* _internal_mutable_alias();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.DeviceAliasInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_DeviceAliasInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeviceAliasInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::google::protobuf::internal::ArenaStringPtr alias_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class CurrentApplication final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.CurrentApplication) */ {
 public:
  inline CurrentApplication() : CurrentApplication(nullptr) {}
  ~CurrentApplication() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CurrentApplication(
      ::google::protobuf::internal::ConstantInitialized);

  inline CurrentApplication(const CurrentApplication& from) : CurrentApplication(nullptr, from) {}
  inline CurrentApplication(CurrentApplication&& from) noexcept
      : CurrentApplication(nullptr, std::move(from)) {}
  inline CurrentApplication& operator=(const CurrentApplication& from) {
    CopyFrom(from);
    return *this;
  }
  inline CurrentApplication& operator=(CurrentApplication&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CurrentApplication& default_instance() {
    return *internal_default_instance();
  }
  static inline const CurrentApplication* internal_default_instance() {
    return reinterpret_cast<const CurrentApplication*>(
        &_CurrentApplication_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(CurrentApplication& a, CurrentApplication& b) { a.Swap(&b); }
  inline void Swap(CurrentApplication* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CurrentApplication* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CurrentApplication* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CurrentApplication>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CurrentApplication& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CurrentApplication& from) { CurrentApplication::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CurrentApplication* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.CurrentApplication"; }

 protected:
  explicit CurrentApplication(::google::protobuf::Arena* arena);
  CurrentApplication(::google::protobuf::Arena* arena, const CurrentApplication& from);
  CurrentApplication(::google::protobuf::Arena* arena, CurrentApplication&& from) noexcept
      : CurrentApplication(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kAppnameFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // string appname = 2;
  void clear_appname() ;
  const std::string& appname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_appname(Arg_&& arg, Args_... args);
  std::string* mutable_appname();
  PROTOBUF_NODISCARD std::string* release_appname();
  void set_allocated_appname(std::string* value);

  private:
  const std::string& _internal_appname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appname(
      const std::string& value);
  std::string* _internal_mutable_appname();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.CurrentApplication)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_CurrentApplication_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CurrentApplication& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::google::protobuf::internal::ArenaStringPtr appname_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class ControllerInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.ControllerInfo) */ {
 public:
  inline ControllerInfo() : ControllerInfo(nullptr) {}
  ~ControllerInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ControllerInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline ControllerInfo(const ControllerInfo& from) : ControllerInfo(nullptr, from) {}
  inline ControllerInfo(ControllerInfo&& from) noexcept
      : ControllerInfo(nullptr, std::move(from)) {}
  inline ControllerInfo& operator=(const ControllerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerInfo& operator=(ControllerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerInfo* internal_default_instance() {
    return reinterpret_cast<const ControllerInfo*>(
        &_ControllerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(ControllerInfo& a, ControllerInfo& b) { a.Swap(&b); }
  inline void Swap(ControllerInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ControllerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControllerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ControllerInfo& from) { ControllerInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ControllerInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.ControllerInfo"; }

 protected:
  explicit ControllerInfo(::google::protobuf::Arena* arena);
  ControllerInfo(::google::protobuf::Arena* arena, const ControllerInfo& from);
  ControllerInfo(::google::protobuf::Arena* arena, ControllerInfo&& from) noexcept
      : ControllerInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kControlleridFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // int32 controllerid = 2;
  void clear_controllerid() ;
  ::int32_t controllerid() const;
  void set_controllerid(::int32_t value);

  private:
  ::int32_t _internal_controllerid() const;
  void _internal_set_controllerid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.ControllerInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      41, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ControllerInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ControllerInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::int32_t controllerid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class ControllerHomeButtonFunction final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.ControllerHomeButtonFunction) */ {
 public:
  inline ControllerHomeButtonFunction() : ControllerHomeButtonFunction(nullptr) {}
  ~ControllerHomeButtonFunction() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ControllerHomeButtonFunction(
      ::google::protobuf::internal::ConstantInitialized);

  inline ControllerHomeButtonFunction(const ControllerHomeButtonFunction& from) : ControllerHomeButtonFunction(nullptr, from) {}
  inline ControllerHomeButtonFunction(ControllerHomeButtonFunction&& from) noexcept
      : ControllerHomeButtonFunction(nullptr, std::move(from)) {}
  inline ControllerHomeButtonFunction& operator=(const ControllerHomeButtonFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerHomeButtonFunction& operator=(ControllerHomeButtonFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerHomeButtonFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerHomeButtonFunction* internal_default_instance() {
    return reinterpret_cast<const ControllerHomeButtonFunction*>(
        &_ControllerHomeButtonFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(ControllerHomeButtonFunction& a, ControllerHomeButtonFunction& b) { a.Swap(&b); }
  inline void Swap(ControllerHomeButtonFunction* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerHomeButtonFunction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerHomeButtonFunction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ControllerHomeButtonFunction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControllerHomeButtonFunction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ControllerHomeButtonFunction& from) { ControllerHomeButtonFunction::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ControllerHomeButtonFunction* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.ControllerHomeButtonFunction"; }

 protected:
  explicit ControllerHomeButtonFunction(::google::protobuf::Arena* arena);
  ControllerHomeButtonFunction(::google::protobuf::Arena* arena, const ControllerHomeButtonFunction& from);
  ControllerHomeButtonFunction(::google::protobuf::Arena* arena, ControllerHomeButtonFunction&& from) noexcept
      : ControllerHomeButtonFunction(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kHomebuttontypeFieldNumber = 2,
    kHomefunctionFieldNumber = 3,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // string homebuttontype = 2;
  void clear_homebuttontype() ;
  const std::string& homebuttontype() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_homebuttontype(Arg_&& arg, Args_... args);
  std::string* mutable_homebuttontype();
  PROTOBUF_NODISCARD std::string* release_homebuttontype();
  void set_allocated_homebuttontype(std::string* value);

  private:
  const std::string& _internal_homebuttontype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_homebuttontype(
      const std::string& value);
  std::string* _internal_mutable_homebuttontype();

  public:
  // string homefunction = 3;
  void clear_homefunction() ;
  const std::string& homefunction() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_homefunction(Arg_&& arg, Args_... args);
  std::string* mutable_homefunction();
  PROTOBUF_NODISCARD std::string* release_homefunction();
  void set_allocated_homefunction(std::string* value);

  private:
  const std::string& _internal_homefunction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_homefunction(
      const std::string& value);
  std::string* _internal_mutable_homefunction();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.ControllerHomeButtonFunction)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      81, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ControllerHomeButtonFunction_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ControllerHomeButtonFunction& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::google::protobuf::internal::ArenaStringPtr homebuttontype_;
    ::google::protobuf::internal::ArenaStringPtr homefunction_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class ControllerBattery final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.ControllerBattery) */ {
 public:
  inline ControllerBattery() : ControllerBattery(nullptr) {}
  ~ControllerBattery() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ControllerBattery(
      ::google::protobuf::internal::ConstantInitialized);

  inline ControllerBattery(const ControllerBattery& from) : ControllerBattery(nullptr, from) {}
  inline ControllerBattery(ControllerBattery&& from) noexcept
      : ControllerBattery(nullptr, std::move(from)) {}
  inline ControllerBattery& operator=(const ControllerBattery& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerBattery& operator=(ControllerBattery&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerBattery& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerBattery* internal_default_instance() {
    return reinterpret_cast<const ControllerBattery*>(
        &_ControllerBattery_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(ControllerBattery& a, ControllerBattery& b) { a.Swap(&b); }
  inline void Swap(ControllerBattery* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerBattery* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerBattery* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ControllerBattery>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ControllerBattery& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ControllerBattery& from) { ControllerBattery::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ControllerBattery* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.ControllerBattery"; }

 protected:
  explicit ControllerBattery(::google::protobuf::Arena* arena);
  ControllerBattery(::google::protobuf::Arena* arena, const ControllerBattery& from);
  ControllerBattery(::google::protobuf::Arena* arena, ControllerBattery&& from) noexcept
      : ControllerBattery(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kControlleridFieldNumber = 2,
    kConnectedFieldNumber = 3,
    kBatteryFieldNumber = 4,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // int32 controllerid = 2;
  void clear_controllerid() ;
  ::int32_t controllerid() const;
  void set_controllerid(::int32_t value);

  private:
  ::int32_t _internal_controllerid() const;
  void _internal_set_controllerid(::int32_t value);

  public:
  // bool connected = 3;
  void clear_connected() ;
  bool connected() const;
  void set_connected(bool value);

  private:
  bool _internal_connected() const;
  void _internal_set_connected(bool value);

  public:
  // uint32 battery = 4;
  void clear_battery() ;
  ::uint32_t battery() const;
  void set_battery(::uint32_t value);

  private:
  ::uint32_t _internal_battery() const;
  void _internal_set_battery(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.ControllerBattery)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ControllerBattery_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ControllerBattery& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::int32_t controllerid_;
    bool connected_;
    ::uint32_t battery_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class AppPlayInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.AppPlayInfo) */ {
 public:
  inline AppPlayInfo() : AppPlayInfo(nullptr) {}
  ~AppPlayInfo() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AppPlayInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline AppPlayInfo(const AppPlayInfo& from) : AppPlayInfo(nullptr, from) {}
  inline AppPlayInfo(AppPlayInfo&& from) noexcept
      : AppPlayInfo(nullptr, std::move(from)) {}
  inline AppPlayInfo& operator=(const AppPlayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppPlayInfo& operator=(AppPlayInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppPlayInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppPlayInfo* internal_default_instance() {
    return reinterpret_cast<const AppPlayInfo*>(
        &_AppPlayInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(AppPlayInfo& a, AppPlayInfo& b) { a.Swap(&b); }
  inline void Swap(AppPlayInfo* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppPlayInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppPlayInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AppPlayInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AppPlayInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AppPlayInfo& from) { AppPlayInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AppPlayInfo* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.AppPlayInfo"; }

 protected:
  explicit AppPlayInfo(::google::protobuf::Arena* arena);
  AppPlayInfo(::google::protobuf::Arena* arena, const AppPlayInfo& from);
  AppPlayInfo(::google::protobuf::Arena* arena, AppPlayInfo&& from) noexcept
      : AppPlayInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDevidFieldNumber = 1,
    kAppnameFieldNumber = 2,
  };
  // string devid = 1;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // string appname = 2;
  void clear_appname() ;
  const std::string& appname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_appname(Arg_&& arg, Args_... args);
  std::string* mutable_appname();
  PROTOBUF_NODISCARD std::string* release_appname();
  void set_allocated_appname(std::string* value);

  private:
  const std::string& _internal_appname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appname(
      const std::string& value);
  std::string* _internal_mutable_appname();

  public:
  // @@protoc_insertion_point(class_scope:PXREAService.AppPlayInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AppPlayInfo_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AppPlayInfo& from_msg);
    ::google::protobuf::internal::ArenaStringPtr devid_;
    ::google::protobuf::internal::ArenaStringPtr appname_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};
// -------------------------------------------------------------------

class ServerFeedback final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PXREAService.ServerFeedback) */ {
 public:
  inline ServerFeedback() : ServerFeedback(nullptr) {}
  ~ServerFeedback() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ServerFeedback(
      ::google::protobuf::internal::ConstantInitialized);

  inline ServerFeedback(const ServerFeedback& from) : ServerFeedback(nullptr, from) {}
  inline ServerFeedback(ServerFeedback&& from) noexcept
      : ServerFeedback(nullptr, std::move(from)) {}
  inline ServerFeedback& operator=(const ServerFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerFeedback& operator=(ServerFeedback&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerFeedback& default_instance() {
    return *internal_default_instance();
  }
  enum FeedbackArgsCase {
    kVrparam = 2,
    kDevid = 3,
    kDevbattery = 4,
    kDevstatus = 5,
    kDevblob = 6,
    kDevmonitorpara = 7,
    kDevmodel = 8,
    kCurrentapp = 9,
    kCtrllerbtry = 10,
    kVideoframeinfo = 11,
    kDevicemonitorsharedmemorykey = 12,
    kVideocontrolresult = 13,
    kDevicealiasinfo = 14,
    kDevicestatejson = 15,
    FEEDBACKARGS_NOT_SET = 0,
  };
  static inline const ServerFeedback* internal_default_instance() {
    return reinterpret_cast<const ServerFeedback*>(
        &_ServerFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(ServerFeedback& a, ServerFeedback& b) { a.Swap(&b); }
  inline void Swap(ServerFeedback* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerFeedback* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerFeedback* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ServerFeedback>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerFeedback& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ServerFeedback& from) { ServerFeedback::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerFeedback* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PXREAService.ServerFeedback"; }

 protected:
  explicit ServerFeedback(::google::protobuf::Arena* arena);
  ServerFeedback(::google::protobuf::Arena* arena, const ServerFeedback& from);
  ServerFeedback(::google::protobuf::Arena* arena, ServerFeedback&& from) noexcept
      : ServerFeedback(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 1,
    kVrparamFieldNumber = 2,
    kDevidFieldNumber = 3,
    kDevbatteryFieldNumber = 4,
    kDevstatusFieldNumber = 5,
    kDevblobFieldNumber = 6,
    kDevmonitorparaFieldNumber = 7,
    kDevmodelFieldNumber = 8,
    kCurrentappFieldNumber = 9,
    kCtrllerbtryFieldNumber = 10,
    kVideoframeinfoFieldNumber = 11,
    kDevicemonitorsharedmemorykeyFieldNumber = 12,
    kVideocontrolresultFieldNumber = 13,
    kDevicealiasinfoFieldNumber = 14,
    kDevicestatejsonFieldNumber = 15,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .PXREAService.VrParam vrparam = 2;
  bool has_vrparam() const;
  private:
  bool _internal_has_vrparam() const;

  public:
  void clear_vrparam() ;
  const ::PXREAService::VrParam& vrparam() const;
  PROTOBUF_NODISCARD ::PXREAService::VrParam* release_vrparam();
  ::PXREAService::VrParam* mutable_vrparam();
  void set_allocated_vrparam(::PXREAService::VrParam* value);
  void unsafe_arena_set_allocated_vrparam(::PXREAService::VrParam* value);
  ::PXREAService::VrParam* unsafe_arena_release_vrparam();

  private:
  const ::PXREAService::VrParam& _internal_vrparam() const;
  ::PXREAService::VrParam* _internal_mutable_vrparam();

  public:
  // string devid = 3;
  bool has_devid() const;
  void clear_devid() ;
  const std::string& devid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devid(Arg_&& arg, Args_... args);
  std::string* mutable_devid();
  PROTOBUF_NODISCARD std::string* release_devid();
  void set_allocated_devid(std::string* value);

  private:
  const std::string& _internal_devid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devid(
      const std::string& value);
  std::string* _internal_mutable_devid();

  public:
  // .PXREAService.DeviceBattery devbattery = 4;
  bool has_devbattery() const;
  private:
  bool _internal_has_devbattery() const;

  public:
  void clear_devbattery() ;
  const ::PXREAService::DeviceBattery& devbattery() const;
  PROTOBUF_NODISCARD ::PXREAService::DeviceBattery* release_devbattery();
  ::PXREAService::DeviceBattery* mutable_devbattery();
  void set_allocated_devbattery(::PXREAService::DeviceBattery* value);
  void unsafe_arena_set_allocated_devbattery(::PXREAService::DeviceBattery* value);
  ::PXREAService::DeviceBattery* unsafe_arena_release_devbattery();

  private:
  const ::PXREAService::DeviceBattery& _internal_devbattery() const;
  ::PXREAService::DeviceBattery* _internal_mutable_devbattery();

  public:
  // .PXREAService.DeviceStatus devstatus = 5;
  bool has_devstatus() const;
  private:
  bool _internal_has_devstatus() const;

  public:
  void clear_devstatus() ;
  const ::PXREAService::DeviceStatus& devstatus() const;
  PROTOBUF_NODISCARD ::PXREAService::DeviceStatus* release_devstatus();
  ::PXREAService::DeviceStatus* mutable_devstatus();
  void set_allocated_devstatus(::PXREAService::DeviceStatus* value);
  void unsafe_arena_set_allocated_devstatus(::PXREAService::DeviceStatus* value);
  ::PXREAService::DeviceStatus* unsafe_arena_release_devstatus();

  private:
  const ::PXREAService::DeviceStatus& _internal_devstatus() const;
  ::PXREAService::DeviceStatus* _internal_mutable_devstatus();

  public:
  // .PXREAService.DeviceBlob devblob = 6;
  bool has_devblob() const;
  private:
  bool _internal_has_devblob() const;

  public:
  void clear_devblob() ;
  const ::PXREAService::DeviceBlob& devblob() const;
  PROTOBUF_NODISCARD ::PXREAService::DeviceBlob* release_devblob();
  ::PXREAService::DeviceBlob* mutable_devblob();
  void set_allocated_devblob(::PXREAService::DeviceBlob* value);
  void unsafe_arena_set_allocated_devblob(::PXREAService::DeviceBlob* value);
  ::PXREAService::DeviceBlob* unsafe_arena_release_devblob();

  private:
  const ::PXREAService::DeviceBlob& _internal_devblob() const;
  ::PXREAService::DeviceBlob* _internal_mutable_devblob();

  public:
  // .PXREAService.DeviceMonitorParameter devmonitorpara = 7;
  bool has_devmonitorpara() const;
  private:
  bool _internal_has_devmonitorpara() const;

  public:
  void clear_devmonitorpara() ;
  const ::PXREAService::DeviceMonitorParameter& devmonitorpara() const;
  PROTOBUF_NODISCARD ::PXREAService::DeviceMonitorParameter* release_devmonitorpara();
  ::PXREAService::DeviceMonitorParameter* mutable_devmonitorpara();
  void set_allocated_devmonitorpara(::PXREAService::DeviceMonitorParameter* value);
  void unsafe_arena_set_allocated_devmonitorpara(::PXREAService::DeviceMonitorParameter* value);
  ::PXREAService::DeviceMonitorParameter* unsafe_arena_release_devmonitorpara();

  private:
  const ::PXREAService::DeviceMonitorParameter& _internal_devmonitorpara() const;
  ::PXREAService::DeviceMonitorParameter* _internal_mutable_devmonitorpara();

  public:
  // .PXREAService.DeviceModel devmodel = 8;
  bool has_devmodel() const;
  private:
  bool _internal_has_devmodel() const;

  public:
  void clear_devmodel() ;
  const ::PXREAService::DeviceModel& devmodel() const;
  PROTOBUF_NODISCARD ::PXREAService::DeviceModel* release_devmodel();
  ::PXREAService::DeviceModel* mutable_devmodel();
  void set_allocated_devmodel(::PXREAService::DeviceModel* value);
  void unsafe_arena_set_allocated_devmodel(::PXREAService::DeviceModel* value);
  ::PXREAService::DeviceModel* unsafe_arena_release_devmodel();

  private:
  const ::PXREAService::DeviceModel& _internal_devmodel() const;
  ::PXREAService::DeviceModel* _internal_mutable_devmodel();

  public:
  // .PXREAService.CurrentApplication currentapp = 9;
  bool has_currentapp() const;
  private:
  bool _internal_has_currentapp() const;

  public:
  void clear_currentapp() ;
  const ::PXREAService::CurrentApplication& currentapp() const;
  PROTOBUF_NODISCARD ::PXREAService::CurrentApplication* release_currentapp();
  ::PXREAService::CurrentApplication* mutable_currentapp();
  void set_allocated_currentapp(::PXREAService::CurrentApplication* value);
  void unsafe_arena_set_allocated_currentapp(::PXREAService::CurrentApplication* value);
  ::PXREAService::CurrentApplication* unsafe_arena_release_currentapp();

  private:
  const ::PXREAService::CurrentApplication& _internal_currentapp() const;
  ::PXREAService::CurrentApplication* _internal_mutable_currentapp();

  public:
  // .PXREAService.ControllerBattery ctrllerbtry = 10;
  bool has_ctrllerbtry() const;
  private:
  bool _internal_has_ctrllerbtry() const;

  public:
  void clear_ctrllerbtry() ;
  const ::PXREAService::ControllerBattery& ctrllerbtry() const;
  PROTOBUF_NODISCARD ::PXREAService::ControllerBattery* release_ctrllerbtry();
  ::PXREAService::ControllerBattery* mutable_ctrllerbtry();
  void set_allocated_ctrllerbtry(::PXREAService::ControllerBattery* value);
  void unsafe_arena_set_allocated_ctrllerbtry(::PXREAService::ControllerBattery* value);
  ::PXREAService::ControllerBattery* unsafe_arena_release_ctrllerbtry();

  private:
  const ::PXREAService::ControllerBattery& _internal_ctrllerbtry() const;
  ::PXREAService::ControllerBattery* _internal_mutable_ctrllerbtry();

  public:
  // .PXREAService.VideoFrameInfo videoframeinfo = 11;
  bool has_videoframeinfo() const;
  private:
  bool _internal_has_videoframeinfo() const;

  public:
  void clear_videoframeinfo() ;
  const ::PXREAService::VideoFrameInfo& videoframeinfo() const;
  PROTOBUF_NODISCARD ::PXREAService::VideoFrameInfo* release_videoframeinfo();
  ::PXREAService::VideoFrameInfo* mutable_videoframeinfo();
  void set_allocated_videoframeinfo(::PXREAService::VideoFrameInfo* value);
  void unsafe_arena_set_allocated_videoframeinfo(::PXREAService::VideoFrameInfo* value);
  ::PXREAService::VideoFrameInfo* unsafe_arena_release_videoframeinfo();

  private:
  const ::PXREAService::VideoFrameInfo& _internal_videoframeinfo() const;
  ::PXREAService::VideoFrameInfo* _internal_mutable_videoframeinfo();

  public:
  // .PXREAService.DeviceMonitorSharedMemoryKey devicemonitorsharedmemorykey = 12;
  bool has_devicemonitorsharedmemorykey() const;
  private:
  bool _internal_has_devicemonitorsharedmemorykey() const;

  public:
  void clear_devicemonitorsharedmemorykey() ;
  const ::PXREAService::DeviceMonitorSharedMemoryKey& devicemonitorsharedmemorykey() const;
  PROTOBUF_NODISCARD ::PXREAService::DeviceMonitorSharedMemoryKey* release_devicemonitorsharedmemorykey();
  ::PXREAService::DeviceMonitorSharedMemoryKey* mutable_devicemonitorsharedmemorykey();
  void set_allocated_devicemonitorsharedmemorykey(::PXREAService::DeviceMonitorSharedMemoryKey* value);
  void unsafe_arena_set_allocated_devicemonitorsharedmemorykey(::PXREAService::DeviceMonitorSharedMemoryKey* value);
  ::PXREAService::DeviceMonitorSharedMemoryKey* unsafe_arena_release_devicemonitorsharedmemorykey();

  private:
  const ::PXREAService::DeviceMonitorSharedMemoryKey& _internal_devicemonitorsharedmemorykey() const;
  ::PXREAService::DeviceMonitorSharedMemoryKey* _internal_mutable_devicemonitorsharedmemorykey();

  public:
  // .PXREAService.VideoControlResult videocontrolresult = 13;
  bool has_videocontrolresult() const;
  private:
  bool _internal_has_videocontrolresult() const;

  public:
  void clear_videocontrolresult() ;
  const ::PXREAService::VideoControlResult& videocontrolresult() const;
  PROTOBUF_NODISCARD ::PXREAService::VideoControlResult* release_videocontrolresult();
  ::PXREAService::VideoControlResult* mutable_videocontrolresult();
  void set_allocated_videocontrolresult(::PXREAService::VideoControlResult* value);
  void unsafe_arena_set_allocated_videocontrolresult(::PXREAService::VideoControlResult* value);
  ::PXREAService::VideoControlResult* unsafe_arena_release_videocontrolresult();

  private:
  const ::PXREAService::VideoControlResult& _internal_videocontrolresult() const;
  ::PXREAService::VideoControlResult* _internal_mutable_videocontrolresult();

  public:
  // .PXREAService.DeviceAliasInfo devicealiasinfo = 14;
  bool has_devicealiasinfo() const;
  private:
  bool _internal_has_devicealiasinfo() const;

  public:
  void clear_devicealiasinfo() ;
  const ::PXREAService::DeviceAliasInfo& devicealiasinfo() const;
  PROTOBUF_NODISCARD ::PXREAService::DeviceAliasInfo* release_devicealiasinfo();
  ::PXREAService::DeviceAliasInfo* mutable_devicealiasinfo();
  void set_allocated_devicealiasinfo(::PXREAService::DeviceAliasInfo* value);
  void unsafe_arena_set_allocated_devicealiasinfo(::PXREAService::DeviceAliasInfo* value);
  ::PXREAService::DeviceAliasInfo* unsafe_arena_release_devicealiasinfo();

  private:
  const ::PXREAService::DeviceAliasInfo& _internal_devicealiasinfo() const;
  ::PXREAService::DeviceAliasInfo* _internal_mutable_devicealiasinfo();

  public:
  // .PXREAService.DeviceStateJson devicestatejson = 15;
  bool has_devicestatejson() const;
  private:
  bool _internal_has_devicestatejson() const;

  public:
  void clear_devicestatejson() ;
  const ::PXREAService::DeviceStateJson& devicestatejson() const;
  PROTOBUF_NODISCARD ::PXREAService::DeviceStateJson* release_devicestatejson();
  ::PXREAService::DeviceStateJson* mutable_devicestatejson();
  void set_allocated_devicestatejson(::PXREAService::DeviceStateJson* value);
  void unsafe_arena_set_allocated_devicestatejson(::PXREAService::DeviceStateJson* value);
  ::PXREAService::DeviceStateJson* unsafe_arena_release_devicestatejson();

  private:
  const ::PXREAService::DeviceStateJson& _internal_devicestatejson() const;
  ::PXREAService::DeviceStateJson* _internal_mutable_devicestatejson();

  public:
  void clear_FeedbackArgs();
  FeedbackArgsCase FeedbackArgs_case() const;
  // @@protoc_insertion_point(class_scope:PXREAService.ServerFeedback)
 private:
  class _Internal;
  void set_has_vrparam();
  void set_has_devid();
  void set_has_devbattery();
  void set_has_devstatus();
  void set_has_devblob();
  void set_has_devmonitorpara();
  void set_has_devmodel();
  void set_has_currentapp();
  void set_has_ctrllerbtry();
  void set_has_videoframeinfo();
  void set_has_devicemonitorsharedmemorykey();
  void set_has_videocontrolresult();
  void set_has_devicealiasinfo();
  void set_has_devicestatejson();
  inline bool has_FeedbackArgs() const;
  inline void clear_has_FeedbackArgs();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 15, 13,
      53, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_ServerFeedback_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ServerFeedback& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    union FeedbackArgsUnion {
      constexpr FeedbackArgsUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::PXREAService::VrParam* vrparam_;
      ::google::protobuf::internal::ArenaStringPtr devid_;
      ::PXREAService::DeviceBattery* devbattery_;
      ::PXREAService::DeviceStatus* devstatus_;
      ::PXREAService::DeviceBlob* devblob_;
      ::PXREAService::DeviceMonitorParameter* devmonitorpara_;
      ::PXREAService::DeviceModel* devmodel_;
      ::PXREAService::CurrentApplication* currentapp_;
      ::PXREAService::ControllerBattery* ctrllerbtry_;
      ::PXREAService::VideoFrameInfo* videoframeinfo_;
      ::PXREAService::DeviceMonitorSharedMemoryKey* devicemonitorsharedmemorykey_;
      ::PXREAService::VideoControlResult* videocontrolresult_;
      ::PXREAService::DeviceAliasInfo* devicealiasinfo_;
      ::PXREAService::DeviceStateJson* devicestatejson_;
    } FeedbackArgs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PXREAService_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DeviceID

// string id = 1;
inline void DeviceID::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& DeviceID::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceID.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceID::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceID.id)
}
inline std::string* DeviceID::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceID.id)
  return _s;
}
inline const std::string& DeviceID::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void DeviceID::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* DeviceID::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* DeviceID::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceID.id)
  return _impl_.id_.Release();
}
inline void DeviceID::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceID.id)
}

// -------------------------------------------------------------------

// VRPid

// int32 pid = 1;
inline void VRPid::clear_pid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pid_ = 0;
}
inline ::int32_t VRPid::pid() const {
  // @@protoc_insertion_point(field_get:PXREAService.VRPid.pid)
  return _internal_pid();
}
inline void VRPid::set_pid(::int32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:PXREAService.VRPid.pid)
}
inline ::int32_t VRPid::_internal_pid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pid_;
}
inline void VRPid::_internal_set_pid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pid_ = value;
}

// -------------------------------------------------------------------

// TexHandleInfo

// int64 pid = 1;
inline void TexHandleInfo::clear_pid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pid_ = ::int64_t{0};
}
inline ::int64_t TexHandleInfo::pid() const {
  // @@protoc_insertion_point(field_get:PXREAService.TexHandleInfo.pid)
  return _internal_pid();
}
inline void TexHandleInfo::set_pid(::int64_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:PXREAService.TexHandleInfo.pid)
}
inline ::int64_t TexHandleInfo::_internal_pid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pid_;
}
inline void TexHandleInfo::_internal_set_pid(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pid_ = value;
}

// int64 handle = 2;
inline void TexHandleInfo::clear_handle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.handle_ = ::int64_t{0};
}
inline ::int64_t TexHandleInfo::handle() const {
  // @@protoc_insertion_point(field_get:PXREAService.TexHandleInfo.handle)
  return _internal_handle();
}
inline void TexHandleInfo::set_handle(::int64_t value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:PXREAService.TexHandleInfo.handle)
}
inline ::int64_t TexHandleInfo::_internal_handle() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.handle_;
}
inline void TexHandleInfo::_internal_set_handle(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.handle_ = value;
}

// -------------------------------------------------------------------

// VideoPlayInfo

// string devid = 1;
inline void VideoPlayInfo::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& VideoPlayInfo::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.VideoPlayInfo.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoPlayInfo::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.VideoPlayInfo.devid)
}
inline std::string* VideoPlayInfo::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.VideoPlayInfo.devid)
  return _s;
}
inline const std::string& VideoPlayInfo::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void VideoPlayInfo::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* VideoPlayInfo::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* VideoPlayInfo::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.VideoPlayInfo.devid)
  return _impl_.devid_.Release();
}
inline void VideoPlayInfo::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.VideoPlayInfo.devid)
}

// string videopath = 2;
inline void VideoPlayInfo::clear_videopath() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.videopath_.ClearToEmpty();
}
inline const std::string& VideoPlayInfo::videopath() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.VideoPlayInfo.videopath)
  return _internal_videopath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoPlayInfo::set_videopath(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.videopath_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.VideoPlayInfo.videopath)
}
inline std::string* VideoPlayInfo::mutable_videopath() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_videopath();
  // @@protoc_insertion_point(field_mutable:PXREAService.VideoPlayInfo.videopath)
  return _s;
}
inline const std::string& VideoPlayInfo::_internal_videopath() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.videopath_.Get();
}
inline void VideoPlayInfo::_internal_set_videopath(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.videopath_.Set(value, GetArena());
}
inline std::string* VideoPlayInfo::_internal_mutable_videopath() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.videopath_.Mutable( GetArena());
}
inline std::string* VideoPlayInfo::release_videopath() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.VideoPlayInfo.videopath)
  return _impl_.videopath_.Release();
}
inline void VideoPlayInfo::set_allocated_videopath(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.videopath_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.videopath_.IsDefault()) {
          _impl_.videopath_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.VideoPlayInfo.videopath)
}

// -------------------------------------------------------------------

// VideoSeekInfo

// string devid = 1;
inline void VideoSeekInfo::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& VideoSeekInfo::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.VideoSeekInfo.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoSeekInfo::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.VideoSeekInfo.devid)
}
inline std::string* VideoSeekInfo::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.VideoSeekInfo.devid)
  return _s;
}
inline const std::string& VideoSeekInfo::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void VideoSeekInfo::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* VideoSeekInfo::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* VideoSeekInfo::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.VideoSeekInfo.devid)
  return _impl_.devid_.Release();
}
inline void VideoSeekInfo::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.VideoSeekInfo.devid)
}

// int32 millisecond = 2;
inline void VideoSeekInfo::clear_millisecond() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.millisecond_ = 0;
}
inline ::int32_t VideoSeekInfo::millisecond() const {
  // @@protoc_insertion_point(field_get:PXREAService.VideoSeekInfo.millisecond)
  return _internal_millisecond();
}
inline void VideoSeekInfo::set_millisecond(::int32_t value) {
  _internal_set_millisecond(value);
  // @@protoc_insertion_point(field_set:PXREAService.VideoSeekInfo.millisecond)
}
inline ::int32_t VideoSeekInfo::_internal_millisecond() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.millisecond_;
}
inline void VideoSeekInfo::_internal_set_millisecond(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.millisecond_ = value;
}

// -------------------------------------------------------------------

// AppPlayInfo

// string devid = 1;
inline void AppPlayInfo::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& AppPlayInfo::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.AppPlayInfo.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AppPlayInfo::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.AppPlayInfo.devid)
}
inline std::string* AppPlayInfo::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.AppPlayInfo.devid)
  return _s;
}
inline const std::string& AppPlayInfo::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void AppPlayInfo::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* AppPlayInfo::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* AppPlayInfo::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.AppPlayInfo.devid)
  return _impl_.devid_.Release();
}
inline void AppPlayInfo::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.AppPlayInfo.devid)
}

// string appname = 2;
inline void AppPlayInfo::clear_appname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appname_.ClearToEmpty();
}
inline const std::string& AppPlayInfo::appname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.AppPlayInfo.appname)
  return _internal_appname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AppPlayInfo::set_appname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.AppPlayInfo.appname)
}
inline std::string* AppPlayInfo::mutable_appname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_appname();
  // @@protoc_insertion_point(field_mutable:PXREAService.AppPlayInfo.appname)
  return _s;
}
inline const std::string& AppPlayInfo::_internal_appname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.appname_.Get();
}
inline void AppPlayInfo::_internal_set_appname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appname_.Set(value, GetArena());
}
inline std::string* AppPlayInfo::_internal_mutable_appname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.appname_.Mutable( GetArena());
}
inline std::string* AppPlayInfo::release_appname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.AppPlayInfo.appname)
  return _impl_.appname_.Release();
}
inline void AppPlayInfo::set_allocated_appname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.appname_.IsDefault()) {
          _impl_.appname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.AppPlayInfo.appname)
}

// -------------------------------------------------------------------

// PicPlayInfo

// string devid = 1;
inline void PicPlayInfo::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& PicPlayInfo::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.PicPlayInfo.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PicPlayInfo::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.PicPlayInfo.devid)
}
inline std::string* PicPlayInfo::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.PicPlayInfo.devid)
  return _s;
}
inline const std::string& PicPlayInfo::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void PicPlayInfo::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* PicPlayInfo::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* PicPlayInfo::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.PicPlayInfo.devid)
  return _impl_.devid_.Release();
}
inline void PicPlayInfo::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.PicPlayInfo.devid)
}

// string picpath = 2;
inline void PicPlayInfo::clear_picpath() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.picpath_.ClearToEmpty();
}
inline const std::string& PicPlayInfo::picpath() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.PicPlayInfo.picpath)
  return _internal_picpath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PicPlayInfo::set_picpath(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.picpath_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.PicPlayInfo.picpath)
}
inline std::string* PicPlayInfo::mutable_picpath() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_picpath();
  // @@protoc_insertion_point(field_mutable:PXREAService.PicPlayInfo.picpath)
  return _s;
}
inline const std::string& PicPlayInfo::_internal_picpath() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.picpath_.Get();
}
inline void PicPlayInfo::_internal_set_picpath(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.picpath_.Set(value, GetArena());
}
inline std::string* PicPlayInfo::_internal_mutable_picpath() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.picpath_.Mutable( GetArena());
}
inline std::string* PicPlayInfo::release_picpath() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.PicPlayInfo.picpath)
  return _impl_.picpath_.Release();
}
inline void PicPlayInfo::set_allocated_picpath(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.picpath_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.picpath_.IsDefault()) {
          _impl_.picpath_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.PicPlayInfo.picpath)
}

// -------------------------------------------------------------------

// DeviceVolumnInfo

// string devid = 1;
inline void DeviceVolumnInfo::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& DeviceVolumnInfo::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceVolumnInfo.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceVolumnInfo::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceVolumnInfo.devid)
}
inline std::string* DeviceVolumnInfo::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceVolumnInfo.devid)
  return _s;
}
inline const std::string& DeviceVolumnInfo::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void DeviceVolumnInfo::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* DeviceVolumnInfo::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* DeviceVolumnInfo::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceVolumnInfo.devid)
  return _impl_.devid_.Release();
}
inline void DeviceVolumnInfo::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceVolumnInfo.devid)
}

// uint32 volumn = 2;
inline void DeviceVolumnInfo::clear_volumn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volumn_ = 0u;
}
inline ::uint32_t DeviceVolumnInfo::volumn() const {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceVolumnInfo.volumn)
  return _internal_volumn();
}
inline void DeviceVolumnInfo::set_volumn(::uint32_t value) {
  _internal_set_volumn(value);
  // @@protoc_insertion_point(field_set:PXREAService.DeviceVolumnInfo.volumn)
}
inline ::uint32_t DeviceVolumnInfo::_internal_volumn() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.volumn_;
}
inline void DeviceVolumnInfo::_internal_set_volumn(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volumn_ = value;
}

// -------------------------------------------------------------------

// DeviceBytesInfo

// string devid = 1;
inline void DeviceBytesInfo::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& DeviceBytesInfo::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceBytesInfo.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceBytesInfo::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceBytesInfo.devid)
}
inline std::string* DeviceBytesInfo::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceBytesInfo.devid)
  return _s;
}
inline const std::string& DeviceBytesInfo::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void DeviceBytesInfo::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* DeviceBytesInfo::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* DeviceBytesInfo::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceBytesInfo.devid)
  return _impl_.devid_.Release();
}
inline void DeviceBytesInfo::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceBytesInfo.devid)
}

// bytes content = 2;
inline void DeviceBytesInfo::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& DeviceBytesInfo::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceBytesInfo.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceBytesInfo::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceBytesInfo.content)
}
inline std::string* DeviceBytesInfo::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceBytesInfo.content)
  return _s;
}
inline const std::string& DeviceBytesInfo::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void DeviceBytesInfo::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* DeviceBytesInfo::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* DeviceBytesInfo::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceBytesInfo.content)
  return _impl_.content_.Release();
}
inline void DeviceBytesInfo::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceBytesInfo.content)
}

// -------------------------------------------------------------------

// RoomBytesInfo

// bytes content = 1;
inline void RoomBytesInfo::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& RoomBytesInfo::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.RoomBytesInfo.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoomBytesInfo::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.RoomBytesInfo.content)
}
inline std::string* RoomBytesInfo::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:PXREAService.RoomBytesInfo.content)
  return _s;
}
inline const std::string& RoomBytesInfo::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void RoomBytesInfo::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* RoomBytesInfo::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* RoomBytesInfo::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.RoomBytesInfo.content)
  return _impl_.content_.Release();
}
inline void RoomBytesInfo::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.RoomBytesInfo.content)
}

// -------------------------------------------------------------------

// ControllerInfo

// string devid = 1;
inline void ControllerInfo::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& ControllerInfo::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ControllerInfo.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ControllerInfo::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.ControllerInfo.devid)
}
inline std::string* ControllerInfo::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.ControllerInfo.devid)
  return _s;
}
inline const std::string& ControllerInfo::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void ControllerInfo::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* ControllerInfo::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* ControllerInfo::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.ControllerInfo.devid)
  return _impl_.devid_.Release();
}
inline void ControllerInfo::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ControllerInfo.devid)
}

// int32 controllerid = 2;
inline void ControllerInfo::clear_controllerid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.controllerid_ = 0;
}
inline ::int32_t ControllerInfo::controllerid() const {
  // @@protoc_insertion_point(field_get:PXREAService.ControllerInfo.controllerid)
  return _internal_controllerid();
}
inline void ControllerInfo::set_controllerid(::int32_t value) {
  _internal_set_controllerid(value);
  // @@protoc_insertion_point(field_set:PXREAService.ControllerInfo.controllerid)
}
inline ::int32_t ControllerInfo::_internal_controllerid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.controllerid_;
}
inline void ControllerInfo::_internal_set_controllerid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.controllerid_ = value;
}

// -------------------------------------------------------------------

// ControllerHomeButtonFunction

// string devid = 1;
inline void ControllerHomeButtonFunction::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& ControllerHomeButtonFunction::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ControllerHomeButtonFunction.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ControllerHomeButtonFunction::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.ControllerHomeButtonFunction.devid)
}
inline std::string* ControllerHomeButtonFunction::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.ControllerHomeButtonFunction.devid)
  return _s;
}
inline const std::string& ControllerHomeButtonFunction::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void ControllerHomeButtonFunction::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* ControllerHomeButtonFunction::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* ControllerHomeButtonFunction::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.ControllerHomeButtonFunction.devid)
  return _impl_.devid_.Release();
}
inline void ControllerHomeButtonFunction::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ControllerHomeButtonFunction.devid)
}

// string homebuttontype = 2;
inline void ControllerHomeButtonFunction::clear_homebuttontype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.homebuttontype_.ClearToEmpty();
}
inline const std::string& ControllerHomeButtonFunction::homebuttontype() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ControllerHomeButtonFunction.homebuttontype)
  return _internal_homebuttontype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ControllerHomeButtonFunction::set_homebuttontype(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.homebuttontype_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.ControllerHomeButtonFunction.homebuttontype)
}
inline std::string* ControllerHomeButtonFunction::mutable_homebuttontype() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_homebuttontype();
  // @@protoc_insertion_point(field_mutable:PXREAService.ControllerHomeButtonFunction.homebuttontype)
  return _s;
}
inline const std::string& ControllerHomeButtonFunction::_internal_homebuttontype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.homebuttontype_.Get();
}
inline void ControllerHomeButtonFunction::_internal_set_homebuttontype(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.homebuttontype_.Set(value, GetArena());
}
inline std::string* ControllerHomeButtonFunction::_internal_mutable_homebuttontype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.homebuttontype_.Mutable( GetArena());
}
inline std::string* ControllerHomeButtonFunction::release_homebuttontype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.ControllerHomeButtonFunction.homebuttontype)
  return _impl_.homebuttontype_.Release();
}
inline void ControllerHomeButtonFunction::set_allocated_homebuttontype(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.homebuttontype_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.homebuttontype_.IsDefault()) {
          _impl_.homebuttontype_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ControllerHomeButtonFunction.homebuttontype)
}

// string homefunction = 3;
inline void ControllerHomeButtonFunction::clear_homefunction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.homefunction_.ClearToEmpty();
}
inline const std::string& ControllerHomeButtonFunction::homefunction() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ControllerHomeButtonFunction.homefunction)
  return _internal_homefunction();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ControllerHomeButtonFunction::set_homefunction(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.homefunction_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.ControllerHomeButtonFunction.homefunction)
}
inline std::string* ControllerHomeButtonFunction::mutable_homefunction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_homefunction();
  // @@protoc_insertion_point(field_mutable:PXREAService.ControllerHomeButtonFunction.homefunction)
  return _s;
}
inline const std::string& ControllerHomeButtonFunction::_internal_homefunction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.homefunction_.Get();
}
inline void ControllerHomeButtonFunction::_internal_set_homefunction(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.homefunction_.Set(value, GetArena());
}
inline std::string* ControllerHomeButtonFunction::_internal_mutable_homefunction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.homefunction_.Mutable( GetArena());
}
inline std::string* ControllerHomeButtonFunction::release_homefunction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.ControllerHomeButtonFunction.homefunction)
  return _impl_.homefunction_.Release();
}
inline void ControllerHomeButtonFunction::set_allocated_homefunction(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.homefunction_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.homefunction_.IsDefault()) {
          _impl_.homefunction_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ControllerHomeButtonFunction.homefunction)
}

// -------------------------------------------------------------------

// ScreenStateInfo

// string devid = 1;
inline void ScreenStateInfo::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& ScreenStateInfo::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ScreenStateInfo.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScreenStateInfo::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.ScreenStateInfo.devid)
}
inline std::string* ScreenStateInfo::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.ScreenStateInfo.devid)
  return _s;
}
inline const std::string& ScreenStateInfo::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void ScreenStateInfo::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* ScreenStateInfo::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* ScreenStateInfo::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.ScreenStateInfo.devid)
  return _impl_.devid_.Release();
}
inline void ScreenStateInfo::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ScreenStateInfo.devid)
}

// int32 state = 2;
inline void ScreenStateInfo::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = 0;
}
inline ::int32_t ScreenStateInfo::state() const {
  // @@protoc_insertion_point(field_get:PXREAService.ScreenStateInfo.state)
  return _internal_state();
}
inline void ScreenStateInfo::set_state(::int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:PXREAService.ScreenStateInfo.state)
}
inline ::int32_t ScreenStateInfo::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.state_;
}
inline void ScreenStateInfo::_internal_set_state(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_ = value;
}

// -------------------------------------------------------------------

// DeviceAliasInfo

// string devid = 1;
inline void DeviceAliasInfo::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& DeviceAliasInfo::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceAliasInfo.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceAliasInfo::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceAliasInfo.devid)
}
inline std::string* DeviceAliasInfo::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceAliasInfo.devid)
  return _s;
}
inline const std::string& DeviceAliasInfo::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void DeviceAliasInfo::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* DeviceAliasInfo::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* DeviceAliasInfo::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceAliasInfo.devid)
  return _impl_.devid_.Release();
}
inline void DeviceAliasInfo::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceAliasInfo.devid)
}

// string alias = 2;
inline void DeviceAliasInfo::clear_alias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& DeviceAliasInfo::alias() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceAliasInfo.alias)
  return _internal_alias();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceAliasInfo::set_alias(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceAliasInfo.alias)
}
inline std::string* DeviceAliasInfo::mutable_alias() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceAliasInfo.alias)
  return _s;
}
inline const std::string& DeviceAliasInfo::_internal_alias() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.alias_.Get();
}
inline void DeviceAliasInfo::_internal_set_alias(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_.Set(value, GetArena());
}
inline std::string* DeviceAliasInfo::_internal_mutable_alias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.alias_.Mutable( GetArena());
}
inline std::string* DeviceAliasInfo::release_alias() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceAliasInfo.alias)
  return _impl_.alias_.Release();
}
inline void DeviceAliasInfo::set_allocated_alias(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.alias_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.alias_.IsDefault()) {
          _impl_.alias_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceAliasInfo.alias)
}

// -------------------------------------------------------------------

// ServerFeedback

// string name = 1;
inline void ServerFeedback::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ServerFeedback::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerFeedback::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.ServerFeedback.name)
}
inline std::string* ServerFeedback::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.name)
  return _s;
}
inline const std::string& ServerFeedback::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ServerFeedback::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ServerFeedback::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ServerFeedback::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.name)
  return _impl_.name_.Release();
}
inline void ServerFeedback::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.name)
}

// .PXREAService.VrParam vrparam = 2;
inline bool ServerFeedback::has_vrparam() const {
  return FeedbackArgs_case() == kVrparam;
}
inline bool ServerFeedback::_internal_has_vrparam() const {
  return FeedbackArgs_case() == kVrparam;
}
inline void ServerFeedback::set_has_vrparam() {
  _impl_._oneof_case_[0] = kVrparam;
}
inline void ServerFeedback::clear_vrparam() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kVrparam) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.vrparam_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.vrparam_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::VrParam* ServerFeedback::release_vrparam() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.vrparam)
  if (FeedbackArgs_case() == kVrparam) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.vrparam_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.vrparam_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::VrParam& ServerFeedback::_internal_vrparam() const {
  return FeedbackArgs_case() == kVrparam ? *_impl_.FeedbackArgs_.vrparam_ : reinterpret_cast<::PXREAService::VrParam&>(::PXREAService::_VrParam_default_instance_);
}
inline const ::PXREAService::VrParam& ServerFeedback::vrparam() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.vrparam)
  return _internal_vrparam();
}
inline ::PXREAService::VrParam* ServerFeedback::unsafe_arena_release_vrparam() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.vrparam)
  if (FeedbackArgs_case() == kVrparam) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.vrparam_;
    _impl_.FeedbackArgs_.vrparam_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_vrparam(::PXREAService::VrParam* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_vrparam();
    _impl_.FeedbackArgs_.vrparam_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.vrparam)
}
inline ::PXREAService::VrParam* ServerFeedback::_internal_mutable_vrparam() {
  if (FeedbackArgs_case() != kVrparam) {
    clear_FeedbackArgs();
    set_has_vrparam();
    _impl_.FeedbackArgs_.vrparam_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::VrParam>(GetArena());
  }
  return _impl_.FeedbackArgs_.vrparam_;
}
inline ::PXREAService::VrParam* ServerFeedback::mutable_vrparam() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::VrParam* _msg = _internal_mutable_vrparam();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.vrparam)
  return _msg;
}

// string devid = 3;
inline bool ServerFeedback::has_devid() const {
  return FeedbackArgs_case() == kDevid;
}
inline void ServerFeedback::set_has_devid() {
  _impl_._oneof_case_[0] = kDevid;
}
inline void ServerFeedback::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kDevid) {
    _impl_.FeedbackArgs_.devid_.Destroy();
    clear_has_FeedbackArgs();
  }
}
inline const std::string& ServerFeedback::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerFeedback::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() != kDevid) {
    clear_FeedbackArgs();

    set_has_devid();
    _impl_.FeedbackArgs_.devid_.InitDefault();
  }
  _impl_.FeedbackArgs_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.ServerFeedback.devid)
}
inline std::string* ServerFeedback::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.devid)
  return _s;
}
inline const std::string& ServerFeedback::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (FeedbackArgs_case() != kDevid) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.FeedbackArgs_.devid_.Get();
}
inline void ServerFeedback::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() != kDevid) {
    clear_FeedbackArgs();

    set_has_devid();
    _impl_.FeedbackArgs_.devid_.InitDefault();
  }
  _impl_.FeedbackArgs_.devid_.Set(value, GetArena());
}
inline std::string* ServerFeedback::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() != kDevid) {
    clear_FeedbackArgs();

    set_has_devid();
    _impl_.FeedbackArgs_.devid_.InitDefault();
  }
  return _impl_.FeedbackArgs_.devid_.Mutable( GetArena());
}
inline std::string* ServerFeedback::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.devid)
  if (FeedbackArgs_case() != kDevid) {
    return nullptr;
  }
  clear_has_FeedbackArgs();
  return _impl_.FeedbackArgs_.devid_.Release();
}
inline void ServerFeedback::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_FeedbackArgs()) {
    clear_FeedbackArgs();
  }
  if (value != nullptr) {
    set_has_devid();
    _impl_.FeedbackArgs_.devid_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ServerFeedback.devid)
}

// .PXREAService.DeviceBattery devbattery = 4;
inline bool ServerFeedback::has_devbattery() const {
  return FeedbackArgs_case() == kDevbattery;
}
inline bool ServerFeedback::_internal_has_devbattery() const {
  return FeedbackArgs_case() == kDevbattery;
}
inline void ServerFeedback::set_has_devbattery() {
  _impl_._oneof_case_[0] = kDevbattery;
}
inline void ServerFeedback::clear_devbattery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kDevbattery) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.devbattery_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.devbattery_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::DeviceBattery* ServerFeedback::release_devbattery() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.devbattery)
  if (FeedbackArgs_case() == kDevbattery) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devbattery_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.devbattery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::DeviceBattery& ServerFeedback::_internal_devbattery() const {
  return FeedbackArgs_case() == kDevbattery ? *_impl_.FeedbackArgs_.devbattery_ : reinterpret_cast<::PXREAService::DeviceBattery&>(::PXREAService::_DeviceBattery_default_instance_);
}
inline const ::PXREAService::DeviceBattery& ServerFeedback::devbattery() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.devbattery)
  return _internal_devbattery();
}
inline ::PXREAService::DeviceBattery* ServerFeedback::unsafe_arena_release_devbattery() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.devbattery)
  if (FeedbackArgs_case() == kDevbattery) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devbattery_;
    _impl_.FeedbackArgs_.devbattery_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_devbattery(::PXREAService::DeviceBattery* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_devbattery();
    _impl_.FeedbackArgs_.devbattery_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.devbattery)
}
inline ::PXREAService::DeviceBattery* ServerFeedback::_internal_mutable_devbattery() {
  if (FeedbackArgs_case() != kDevbattery) {
    clear_FeedbackArgs();
    set_has_devbattery();
    _impl_.FeedbackArgs_.devbattery_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::DeviceBattery>(GetArena());
  }
  return _impl_.FeedbackArgs_.devbattery_;
}
inline ::PXREAService::DeviceBattery* ServerFeedback::mutable_devbattery() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::DeviceBattery* _msg = _internal_mutable_devbattery();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.devbattery)
  return _msg;
}

// .PXREAService.DeviceStatus devstatus = 5;
inline bool ServerFeedback::has_devstatus() const {
  return FeedbackArgs_case() == kDevstatus;
}
inline bool ServerFeedback::_internal_has_devstatus() const {
  return FeedbackArgs_case() == kDevstatus;
}
inline void ServerFeedback::set_has_devstatus() {
  _impl_._oneof_case_[0] = kDevstatus;
}
inline void ServerFeedback::clear_devstatus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kDevstatus) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.devstatus_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.devstatus_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::DeviceStatus* ServerFeedback::release_devstatus() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.devstatus)
  if (FeedbackArgs_case() == kDevstatus) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devstatus_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.devstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::DeviceStatus& ServerFeedback::_internal_devstatus() const {
  return FeedbackArgs_case() == kDevstatus ? *_impl_.FeedbackArgs_.devstatus_ : reinterpret_cast<::PXREAService::DeviceStatus&>(::PXREAService::_DeviceStatus_default_instance_);
}
inline const ::PXREAService::DeviceStatus& ServerFeedback::devstatus() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.devstatus)
  return _internal_devstatus();
}
inline ::PXREAService::DeviceStatus* ServerFeedback::unsafe_arena_release_devstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.devstatus)
  if (FeedbackArgs_case() == kDevstatus) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devstatus_;
    _impl_.FeedbackArgs_.devstatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_devstatus(::PXREAService::DeviceStatus* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_devstatus();
    _impl_.FeedbackArgs_.devstatus_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.devstatus)
}
inline ::PXREAService::DeviceStatus* ServerFeedback::_internal_mutable_devstatus() {
  if (FeedbackArgs_case() != kDevstatus) {
    clear_FeedbackArgs();
    set_has_devstatus();
    _impl_.FeedbackArgs_.devstatus_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::DeviceStatus>(GetArena());
  }
  return _impl_.FeedbackArgs_.devstatus_;
}
inline ::PXREAService::DeviceStatus* ServerFeedback::mutable_devstatus() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::DeviceStatus* _msg = _internal_mutable_devstatus();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.devstatus)
  return _msg;
}

// .PXREAService.DeviceBlob devblob = 6;
inline bool ServerFeedback::has_devblob() const {
  return FeedbackArgs_case() == kDevblob;
}
inline bool ServerFeedback::_internal_has_devblob() const {
  return FeedbackArgs_case() == kDevblob;
}
inline void ServerFeedback::set_has_devblob() {
  _impl_._oneof_case_[0] = kDevblob;
}
inline void ServerFeedback::clear_devblob() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kDevblob) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.devblob_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.devblob_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::DeviceBlob* ServerFeedback::release_devblob() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.devblob)
  if (FeedbackArgs_case() == kDevblob) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devblob_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.devblob_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::DeviceBlob& ServerFeedback::_internal_devblob() const {
  return FeedbackArgs_case() == kDevblob ? *_impl_.FeedbackArgs_.devblob_ : reinterpret_cast<::PXREAService::DeviceBlob&>(::PXREAService::_DeviceBlob_default_instance_);
}
inline const ::PXREAService::DeviceBlob& ServerFeedback::devblob() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.devblob)
  return _internal_devblob();
}
inline ::PXREAService::DeviceBlob* ServerFeedback::unsafe_arena_release_devblob() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.devblob)
  if (FeedbackArgs_case() == kDevblob) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devblob_;
    _impl_.FeedbackArgs_.devblob_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_devblob(::PXREAService::DeviceBlob* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_devblob();
    _impl_.FeedbackArgs_.devblob_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.devblob)
}
inline ::PXREAService::DeviceBlob* ServerFeedback::_internal_mutable_devblob() {
  if (FeedbackArgs_case() != kDevblob) {
    clear_FeedbackArgs();
    set_has_devblob();
    _impl_.FeedbackArgs_.devblob_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::DeviceBlob>(GetArena());
  }
  return _impl_.FeedbackArgs_.devblob_;
}
inline ::PXREAService::DeviceBlob* ServerFeedback::mutable_devblob() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::DeviceBlob* _msg = _internal_mutable_devblob();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.devblob)
  return _msg;
}

// .PXREAService.DeviceMonitorParameter devmonitorpara = 7;
inline bool ServerFeedback::has_devmonitorpara() const {
  return FeedbackArgs_case() == kDevmonitorpara;
}
inline bool ServerFeedback::_internal_has_devmonitorpara() const {
  return FeedbackArgs_case() == kDevmonitorpara;
}
inline void ServerFeedback::set_has_devmonitorpara() {
  _impl_._oneof_case_[0] = kDevmonitorpara;
}
inline void ServerFeedback::clear_devmonitorpara() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kDevmonitorpara) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.devmonitorpara_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.devmonitorpara_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::DeviceMonitorParameter* ServerFeedback::release_devmonitorpara() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.devmonitorpara)
  if (FeedbackArgs_case() == kDevmonitorpara) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devmonitorpara_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.devmonitorpara_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::DeviceMonitorParameter& ServerFeedback::_internal_devmonitorpara() const {
  return FeedbackArgs_case() == kDevmonitorpara ? *_impl_.FeedbackArgs_.devmonitorpara_ : reinterpret_cast<::PXREAService::DeviceMonitorParameter&>(::PXREAService::_DeviceMonitorParameter_default_instance_);
}
inline const ::PXREAService::DeviceMonitorParameter& ServerFeedback::devmonitorpara() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.devmonitorpara)
  return _internal_devmonitorpara();
}
inline ::PXREAService::DeviceMonitorParameter* ServerFeedback::unsafe_arena_release_devmonitorpara() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.devmonitorpara)
  if (FeedbackArgs_case() == kDevmonitorpara) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devmonitorpara_;
    _impl_.FeedbackArgs_.devmonitorpara_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_devmonitorpara(::PXREAService::DeviceMonitorParameter* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_devmonitorpara();
    _impl_.FeedbackArgs_.devmonitorpara_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.devmonitorpara)
}
inline ::PXREAService::DeviceMonitorParameter* ServerFeedback::_internal_mutable_devmonitorpara() {
  if (FeedbackArgs_case() != kDevmonitorpara) {
    clear_FeedbackArgs();
    set_has_devmonitorpara();
    _impl_.FeedbackArgs_.devmonitorpara_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::DeviceMonitorParameter>(GetArena());
  }
  return _impl_.FeedbackArgs_.devmonitorpara_;
}
inline ::PXREAService::DeviceMonitorParameter* ServerFeedback::mutable_devmonitorpara() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::DeviceMonitorParameter* _msg = _internal_mutable_devmonitorpara();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.devmonitorpara)
  return _msg;
}

// .PXREAService.DeviceModel devmodel = 8;
inline bool ServerFeedback::has_devmodel() const {
  return FeedbackArgs_case() == kDevmodel;
}
inline bool ServerFeedback::_internal_has_devmodel() const {
  return FeedbackArgs_case() == kDevmodel;
}
inline void ServerFeedback::set_has_devmodel() {
  _impl_._oneof_case_[0] = kDevmodel;
}
inline void ServerFeedback::clear_devmodel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kDevmodel) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.devmodel_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.devmodel_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::DeviceModel* ServerFeedback::release_devmodel() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.devmodel)
  if (FeedbackArgs_case() == kDevmodel) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devmodel_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.devmodel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::DeviceModel& ServerFeedback::_internal_devmodel() const {
  return FeedbackArgs_case() == kDevmodel ? *_impl_.FeedbackArgs_.devmodel_ : reinterpret_cast<::PXREAService::DeviceModel&>(::PXREAService::_DeviceModel_default_instance_);
}
inline const ::PXREAService::DeviceModel& ServerFeedback::devmodel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.devmodel)
  return _internal_devmodel();
}
inline ::PXREAService::DeviceModel* ServerFeedback::unsafe_arena_release_devmodel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.devmodel)
  if (FeedbackArgs_case() == kDevmodel) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devmodel_;
    _impl_.FeedbackArgs_.devmodel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_devmodel(::PXREAService::DeviceModel* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_devmodel();
    _impl_.FeedbackArgs_.devmodel_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.devmodel)
}
inline ::PXREAService::DeviceModel* ServerFeedback::_internal_mutable_devmodel() {
  if (FeedbackArgs_case() != kDevmodel) {
    clear_FeedbackArgs();
    set_has_devmodel();
    _impl_.FeedbackArgs_.devmodel_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::DeviceModel>(GetArena());
  }
  return _impl_.FeedbackArgs_.devmodel_;
}
inline ::PXREAService::DeviceModel* ServerFeedback::mutable_devmodel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::DeviceModel* _msg = _internal_mutable_devmodel();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.devmodel)
  return _msg;
}

// .PXREAService.CurrentApplication currentapp = 9;
inline bool ServerFeedback::has_currentapp() const {
  return FeedbackArgs_case() == kCurrentapp;
}
inline bool ServerFeedback::_internal_has_currentapp() const {
  return FeedbackArgs_case() == kCurrentapp;
}
inline void ServerFeedback::set_has_currentapp() {
  _impl_._oneof_case_[0] = kCurrentapp;
}
inline void ServerFeedback::clear_currentapp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kCurrentapp) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.currentapp_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.currentapp_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::CurrentApplication* ServerFeedback::release_currentapp() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.currentapp)
  if (FeedbackArgs_case() == kCurrentapp) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.currentapp_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.currentapp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::CurrentApplication& ServerFeedback::_internal_currentapp() const {
  return FeedbackArgs_case() == kCurrentapp ? *_impl_.FeedbackArgs_.currentapp_ : reinterpret_cast<::PXREAService::CurrentApplication&>(::PXREAService::_CurrentApplication_default_instance_);
}
inline const ::PXREAService::CurrentApplication& ServerFeedback::currentapp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.currentapp)
  return _internal_currentapp();
}
inline ::PXREAService::CurrentApplication* ServerFeedback::unsafe_arena_release_currentapp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.currentapp)
  if (FeedbackArgs_case() == kCurrentapp) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.currentapp_;
    _impl_.FeedbackArgs_.currentapp_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_currentapp(::PXREAService::CurrentApplication* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_currentapp();
    _impl_.FeedbackArgs_.currentapp_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.currentapp)
}
inline ::PXREAService::CurrentApplication* ServerFeedback::_internal_mutable_currentapp() {
  if (FeedbackArgs_case() != kCurrentapp) {
    clear_FeedbackArgs();
    set_has_currentapp();
    _impl_.FeedbackArgs_.currentapp_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::CurrentApplication>(GetArena());
  }
  return _impl_.FeedbackArgs_.currentapp_;
}
inline ::PXREAService::CurrentApplication* ServerFeedback::mutable_currentapp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::CurrentApplication* _msg = _internal_mutable_currentapp();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.currentapp)
  return _msg;
}

// .PXREAService.ControllerBattery ctrllerbtry = 10;
inline bool ServerFeedback::has_ctrllerbtry() const {
  return FeedbackArgs_case() == kCtrllerbtry;
}
inline bool ServerFeedback::_internal_has_ctrllerbtry() const {
  return FeedbackArgs_case() == kCtrllerbtry;
}
inline void ServerFeedback::set_has_ctrllerbtry() {
  _impl_._oneof_case_[0] = kCtrllerbtry;
}
inline void ServerFeedback::clear_ctrllerbtry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kCtrllerbtry) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.ctrllerbtry_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.ctrllerbtry_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::ControllerBattery* ServerFeedback::release_ctrllerbtry() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.ctrllerbtry)
  if (FeedbackArgs_case() == kCtrllerbtry) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.ctrllerbtry_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.ctrllerbtry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::ControllerBattery& ServerFeedback::_internal_ctrllerbtry() const {
  return FeedbackArgs_case() == kCtrllerbtry ? *_impl_.FeedbackArgs_.ctrllerbtry_ : reinterpret_cast<::PXREAService::ControllerBattery&>(::PXREAService::_ControllerBattery_default_instance_);
}
inline const ::PXREAService::ControllerBattery& ServerFeedback::ctrllerbtry() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.ctrllerbtry)
  return _internal_ctrllerbtry();
}
inline ::PXREAService::ControllerBattery* ServerFeedback::unsafe_arena_release_ctrllerbtry() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.ctrllerbtry)
  if (FeedbackArgs_case() == kCtrllerbtry) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.ctrllerbtry_;
    _impl_.FeedbackArgs_.ctrllerbtry_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_ctrllerbtry(::PXREAService::ControllerBattery* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_ctrllerbtry();
    _impl_.FeedbackArgs_.ctrllerbtry_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.ctrllerbtry)
}
inline ::PXREAService::ControllerBattery* ServerFeedback::_internal_mutable_ctrllerbtry() {
  if (FeedbackArgs_case() != kCtrllerbtry) {
    clear_FeedbackArgs();
    set_has_ctrllerbtry();
    _impl_.FeedbackArgs_.ctrllerbtry_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::ControllerBattery>(GetArena());
  }
  return _impl_.FeedbackArgs_.ctrllerbtry_;
}
inline ::PXREAService::ControllerBattery* ServerFeedback::mutable_ctrllerbtry() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::ControllerBattery* _msg = _internal_mutable_ctrllerbtry();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.ctrllerbtry)
  return _msg;
}

// .PXREAService.VideoFrameInfo videoframeinfo = 11;
inline bool ServerFeedback::has_videoframeinfo() const {
  return FeedbackArgs_case() == kVideoframeinfo;
}
inline bool ServerFeedback::_internal_has_videoframeinfo() const {
  return FeedbackArgs_case() == kVideoframeinfo;
}
inline void ServerFeedback::set_has_videoframeinfo() {
  _impl_._oneof_case_[0] = kVideoframeinfo;
}
inline void ServerFeedback::clear_videoframeinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kVideoframeinfo) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.videoframeinfo_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.videoframeinfo_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::VideoFrameInfo* ServerFeedback::release_videoframeinfo() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.videoframeinfo)
  if (FeedbackArgs_case() == kVideoframeinfo) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.videoframeinfo_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.videoframeinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::VideoFrameInfo& ServerFeedback::_internal_videoframeinfo() const {
  return FeedbackArgs_case() == kVideoframeinfo ? *_impl_.FeedbackArgs_.videoframeinfo_ : reinterpret_cast<::PXREAService::VideoFrameInfo&>(::PXREAService::_VideoFrameInfo_default_instance_);
}
inline const ::PXREAService::VideoFrameInfo& ServerFeedback::videoframeinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.videoframeinfo)
  return _internal_videoframeinfo();
}
inline ::PXREAService::VideoFrameInfo* ServerFeedback::unsafe_arena_release_videoframeinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.videoframeinfo)
  if (FeedbackArgs_case() == kVideoframeinfo) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.videoframeinfo_;
    _impl_.FeedbackArgs_.videoframeinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_videoframeinfo(::PXREAService::VideoFrameInfo* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_videoframeinfo();
    _impl_.FeedbackArgs_.videoframeinfo_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.videoframeinfo)
}
inline ::PXREAService::VideoFrameInfo* ServerFeedback::_internal_mutable_videoframeinfo() {
  if (FeedbackArgs_case() != kVideoframeinfo) {
    clear_FeedbackArgs();
    set_has_videoframeinfo();
    _impl_.FeedbackArgs_.videoframeinfo_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::VideoFrameInfo>(GetArena());
  }
  return _impl_.FeedbackArgs_.videoframeinfo_;
}
inline ::PXREAService::VideoFrameInfo* ServerFeedback::mutable_videoframeinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::VideoFrameInfo* _msg = _internal_mutable_videoframeinfo();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.videoframeinfo)
  return _msg;
}

// .PXREAService.DeviceMonitorSharedMemoryKey devicemonitorsharedmemorykey = 12;
inline bool ServerFeedback::has_devicemonitorsharedmemorykey() const {
  return FeedbackArgs_case() == kDevicemonitorsharedmemorykey;
}
inline bool ServerFeedback::_internal_has_devicemonitorsharedmemorykey() const {
  return FeedbackArgs_case() == kDevicemonitorsharedmemorykey;
}
inline void ServerFeedback::set_has_devicemonitorsharedmemorykey() {
  _impl_._oneof_case_[0] = kDevicemonitorsharedmemorykey;
}
inline void ServerFeedback::clear_devicemonitorsharedmemorykey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kDevicemonitorsharedmemorykey) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.devicemonitorsharedmemorykey_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.devicemonitorsharedmemorykey_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::DeviceMonitorSharedMemoryKey* ServerFeedback::release_devicemonitorsharedmemorykey() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.devicemonitorsharedmemorykey)
  if (FeedbackArgs_case() == kDevicemonitorsharedmemorykey) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devicemonitorsharedmemorykey_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.devicemonitorsharedmemorykey_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::DeviceMonitorSharedMemoryKey& ServerFeedback::_internal_devicemonitorsharedmemorykey() const {
  return FeedbackArgs_case() == kDevicemonitorsharedmemorykey ? *_impl_.FeedbackArgs_.devicemonitorsharedmemorykey_ : reinterpret_cast<::PXREAService::DeviceMonitorSharedMemoryKey&>(::PXREAService::_DeviceMonitorSharedMemoryKey_default_instance_);
}
inline const ::PXREAService::DeviceMonitorSharedMemoryKey& ServerFeedback::devicemonitorsharedmemorykey() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.devicemonitorsharedmemorykey)
  return _internal_devicemonitorsharedmemorykey();
}
inline ::PXREAService::DeviceMonitorSharedMemoryKey* ServerFeedback::unsafe_arena_release_devicemonitorsharedmemorykey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.devicemonitorsharedmemorykey)
  if (FeedbackArgs_case() == kDevicemonitorsharedmemorykey) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devicemonitorsharedmemorykey_;
    _impl_.FeedbackArgs_.devicemonitorsharedmemorykey_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_devicemonitorsharedmemorykey(::PXREAService::DeviceMonitorSharedMemoryKey* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_devicemonitorsharedmemorykey();
    _impl_.FeedbackArgs_.devicemonitorsharedmemorykey_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.devicemonitorsharedmemorykey)
}
inline ::PXREAService::DeviceMonitorSharedMemoryKey* ServerFeedback::_internal_mutable_devicemonitorsharedmemorykey() {
  if (FeedbackArgs_case() != kDevicemonitorsharedmemorykey) {
    clear_FeedbackArgs();
    set_has_devicemonitorsharedmemorykey();
    _impl_.FeedbackArgs_.devicemonitorsharedmemorykey_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::DeviceMonitorSharedMemoryKey>(GetArena());
  }
  return _impl_.FeedbackArgs_.devicemonitorsharedmemorykey_;
}
inline ::PXREAService::DeviceMonitorSharedMemoryKey* ServerFeedback::mutable_devicemonitorsharedmemorykey() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::DeviceMonitorSharedMemoryKey* _msg = _internal_mutable_devicemonitorsharedmemorykey();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.devicemonitorsharedmemorykey)
  return _msg;
}

// .PXREAService.VideoControlResult videocontrolresult = 13;
inline bool ServerFeedback::has_videocontrolresult() const {
  return FeedbackArgs_case() == kVideocontrolresult;
}
inline bool ServerFeedback::_internal_has_videocontrolresult() const {
  return FeedbackArgs_case() == kVideocontrolresult;
}
inline void ServerFeedback::set_has_videocontrolresult() {
  _impl_._oneof_case_[0] = kVideocontrolresult;
}
inline void ServerFeedback::clear_videocontrolresult() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kVideocontrolresult) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.videocontrolresult_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.videocontrolresult_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::VideoControlResult* ServerFeedback::release_videocontrolresult() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.videocontrolresult)
  if (FeedbackArgs_case() == kVideocontrolresult) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.videocontrolresult_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.videocontrolresult_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::VideoControlResult& ServerFeedback::_internal_videocontrolresult() const {
  return FeedbackArgs_case() == kVideocontrolresult ? *_impl_.FeedbackArgs_.videocontrolresult_ : reinterpret_cast<::PXREAService::VideoControlResult&>(::PXREAService::_VideoControlResult_default_instance_);
}
inline const ::PXREAService::VideoControlResult& ServerFeedback::videocontrolresult() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.videocontrolresult)
  return _internal_videocontrolresult();
}
inline ::PXREAService::VideoControlResult* ServerFeedback::unsafe_arena_release_videocontrolresult() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.videocontrolresult)
  if (FeedbackArgs_case() == kVideocontrolresult) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.videocontrolresult_;
    _impl_.FeedbackArgs_.videocontrolresult_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_videocontrolresult(::PXREAService::VideoControlResult* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_videocontrolresult();
    _impl_.FeedbackArgs_.videocontrolresult_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.videocontrolresult)
}
inline ::PXREAService::VideoControlResult* ServerFeedback::_internal_mutable_videocontrolresult() {
  if (FeedbackArgs_case() != kVideocontrolresult) {
    clear_FeedbackArgs();
    set_has_videocontrolresult();
    _impl_.FeedbackArgs_.videocontrolresult_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::VideoControlResult>(GetArena());
  }
  return _impl_.FeedbackArgs_.videocontrolresult_;
}
inline ::PXREAService::VideoControlResult* ServerFeedback::mutable_videocontrolresult() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::VideoControlResult* _msg = _internal_mutable_videocontrolresult();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.videocontrolresult)
  return _msg;
}

// .PXREAService.DeviceAliasInfo devicealiasinfo = 14;
inline bool ServerFeedback::has_devicealiasinfo() const {
  return FeedbackArgs_case() == kDevicealiasinfo;
}
inline bool ServerFeedback::_internal_has_devicealiasinfo() const {
  return FeedbackArgs_case() == kDevicealiasinfo;
}
inline void ServerFeedback::set_has_devicealiasinfo() {
  _impl_._oneof_case_[0] = kDevicealiasinfo;
}
inline void ServerFeedback::clear_devicealiasinfo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kDevicealiasinfo) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.devicealiasinfo_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.devicealiasinfo_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::DeviceAliasInfo* ServerFeedback::release_devicealiasinfo() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.devicealiasinfo)
  if (FeedbackArgs_case() == kDevicealiasinfo) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devicealiasinfo_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.devicealiasinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::DeviceAliasInfo& ServerFeedback::_internal_devicealiasinfo() const {
  return FeedbackArgs_case() == kDevicealiasinfo ? *_impl_.FeedbackArgs_.devicealiasinfo_ : reinterpret_cast<::PXREAService::DeviceAliasInfo&>(::PXREAService::_DeviceAliasInfo_default_instance_);
}
inline const ::PXREAService::DeviceAliasInfo& ServerFeedback::devicealiasinfo() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.devicealiasinfo)
  return _internal_devicealiasinfo();
}
inline ::PXREAService::DeviceAliasInfo* ServerFeedback::unsafe_arena_release_devicealiasinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.devicealiasinfo)
  if (FeedbackArgs_case() == kDevicealiasinfo) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devicealiasinfo_;
    _impl_.FeedbackArgs_.devicealiasinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_devicealiasinfo(::PXREAService::DeviceAliasInfo* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_devicealiasinfo();
    _impl_.FeedbackArgs_.devicealiasinfo_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.devicealiasinfo)
}
inline ::PXREAService::DeviceAliasInfo* ServerFeedback::_internal_mutable_devicealiasinfo() {
  if (FeedbackArgs_case() != kDevicealiasinfo) {
    clear_FeedbackArgs();
    set_has_devicealiasinfo();
    _impl_.FeedbackArgs_.devicealiasinfo_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::DeviceAliasInfo>(GetArena());
  }
  return _impl_.FeedbackArgs_.devicealiasinfo_;
}
inline ::PXREAService::DeviceAliasInfo* ServerFeedback::mutable_devicealiasinfo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::DeviceAliasInfo* _msg = _internal_mutable_devicealiasinfo();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.devicealiasinfo)
  return _msg;
}

// .PXREAService.DeviceStateJson devicestatejson = 15;
inline bool ServerFeedback::has_devicestatejson() const {
  return FeedbackArgs_case() == kDevicestatejson;
}
inline bool ServerFeedback::_internal_has_devicestatejson() const {
  return FeedbackArgs_case() == kDevicestatejson;
}
inline void ServerFeedback::set_has_devicestatejson() {
  _impl_._oneof_case_[0] = kDevicestatejson;
}
inline void ServerFeedback::clear_devicestatejson() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (FeedbackArgs_case() == kDevicestatejson) {
    if (GetArena() == nullptr) {
      delete _impl_.FeedbackArgs_.devicestatejson_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.FeedbackArgs_.devicestatejson_);
    }
    clear_has_FeedbackArgs();
  }
}
inline ::PXREAService::DeviceStateJson* ServerFeedback::release_devicestatejson() {
  // @@protoc_insertion_point(field_release:PXREAService.ServerFeedback.devicestatejson)
  if (FeedbackArgs_case() == kDevicestatejson) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devicestatejson_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.FeedbackArgs_.devicestatejson_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PXREAService::DeviceStateJson& ServerFeedback::_internal_devicestatejson() const {
  return FeedbackArgs_case() == kDevicestatejson ? *_impl_.FeedbackArgs_.devicestatejson_ : reinterpret_cast<::PXREAService::DeviceStateJson&>(::PXREAService::_DeviceStateJson_default_instance_);
}
inline const ::PXREAService::DeviceStateJson& ServerFeedback::devicestatejson() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ServerFeedback.devicestatejson)
  return _internal_devicestatejson();
}
inline ::PXREAService::DeviceStateJson* ServerFeedback::unsafe_arena_release_devicestatejson() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PXREAService.ServerFeedback.devicestatejson)
  if (FeedbackArgs_case() == kDevicestatejson) {
    clear_has_FeedbackArgs();
    auto* temp = _impl_.FeedbackArgs_.devicestatejson_;
    _impl_.FeedbackArgs_.devicestatejson_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerFeedback::unsafe_arena_set_allocated_devicestatejson(::PXREAService::DeviceStateJson* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_FeedbackArgs();
  if (value) {
    set_has_devicestatejson();
    _impl_.FeedbackArgs_.devicestatejson_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PXREAService.ServerFeedback.devicestatejson)
}
inline ::PXREAService::DeviceStateJson* ServerFeedback::_internal_mutable_devicestatejson() {
  if (FeedbackArgs_case() != kDevicestatejson) {
    clear_FeedbackArgs();
    set_has_devicestatejson();
    _impl_.FeedbackArgs_.devicestatejson_ =
        ::google::protobuf::Message::DefaultConstruct<::PXREAService::DeviceStateJson>(GetArena());
  }
  return _impl_.FeedbackArgs_.devicestatejson_;
}
inline ::PXREAService::DeviceStateJson* ServerFeedback::mutable_devicestatejson() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PXREAService::DeviceStateJson* _msg = _internal_mutable_devicestatejson();
  // @@protoc_insertion_point(field_mutable:PXREAService.ServerFeedback.devicestatejson)
  return _msg;
}

inline bool ServerFeedback::has_FeedbackArgs() const {
  return FeedbackArgs_case() != FEEDBACKARGS_NOT_SET;
}
inline void ServerFeedback::clear_has_FeedbackArgs() {
  _impl_._oneof_case_[0] = FEEDBACKARGS_NOT_SET;
}
inline ServerFeedback::FeedbackArgsCase ServerFeedback::FeedbackArgs_case() const {
  return ServerFeedback::FeedbackArgsCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// VrParam

// uint32 width = 1;
inline void VrParam::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0u;
}
inline ::uint32_t VrParam::width() const {
  // @@protoc_insertion_point(field_get:PXREAService.VrParam.width)
  return _internal_width();
}
inline void VrParam::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:PXREAService.VrParam.width)
}
inline ::uint32_t VrParam::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void VrParam::_internal_set_width(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// uint32 height = 2;
inline void VrParam::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0u;
}
inline ::uint32_t VrParam::height() const {
  // @@protoc_insertion_point(field_get:PXREAService.VrParam.height)
  return _internal_height();
}
inline void VrParam::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:PXREAService.VrParam.height)
}
inline ::uint32_t VrParam::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void VrParam::_internal_set_height(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// uint32 fps = 3;
inline void VrParam::clear_fps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fps_ = 0u;
}
inline ::uint32_t VrParam::fps() const {
  // @@protoc_insertion_point(field_get:PXREAService.VrParam.fps)
  return _internal_fps();
}
inline void VrParam::set_fps(::uint32_t value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:PXREAService.VrParam.fps)
}
inline ::uint32_t VrParam::_internal_fps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fps_;
}
inline void VrParam::_internal_set_fps(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fps_ = value;
}

// -------------------------------------------------------------------

// DeviceBattery

// string devid = 1;
inline void DeviceBattery::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& DeviceBattery::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceBattery.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceBattery::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceBattery.devid)
}
inline std::string* DeviceBattery::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceBattery.devid)
  return _s;
}
inline const std::string& DeviceBattery::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void DeviceBattery::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* DeviceBattery::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* DeviceBattery::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceBattery.devid)
  return _impl_.devid_.Release();
}
inline void DeviceBattery::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceBattery.devid)
}

// uint32 battery = 2;
inline void DeviceBattery::clear_battery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.battery_ = 0u;
}
inline ::uint32_t DeviceBattery::battery() const {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceBattery.battery)
  return _internal_battery();
}
inline void DeviceBattery::set_battery(::uint32_t value) {
  _internal_set_battery(value);
  // @@protoc_insertion_point(field_set:PXREAService.DeviceBattery.battery)
}
inline ::uint32_t DeviceBattery::_internal_battery() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.battery_;
}
inline void DeviceBattery::_internal_set_battery(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.battery_ = value;
}

// -------------------------------------------------------------------

// DeviceStatus

// string devid = 1;
inline void DeviceStatus::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& DeviceStatus::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceStatus.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceStatus::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceStatus.devid)
}
inline std::string* DeviceStatus::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceStatus.devid)
  return _s;
}
inline const std::string& DeviceStatus::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void DeviceStatus::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* DeviceStatus::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* DeviceStatus::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceStatus.devid)
  return _impl_.devid_.Release();
}
inline void DeviceStatus::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceStatus.devid)
}

// int32 status = 2;
inline void DeviceStatus::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = 0;
}
inline ::int32_t DeviceStatus::status() const {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceStatus.status)
  return _internal_status();
}
inline void DeviceStatus::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:PXREAService.DeviceStatus.status)
}
inline ::int32_t DeviceStatus::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_;
}
inline void DeviceStatus::_internal_set_status(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// DeviceModel

// string devid = 1;
inline void DeviceModel::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& DeviceModel::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceModel.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceModel::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceModel.devid)
}
inline std::string* DeviceModel::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceModel.devid)
  return _s;
}
inline const std::string& DeviceModel::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void DeviceModel::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* DeviceModel::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* DeviceModel::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceModel.devid)
  return _impl_.devid_.Release();
}
inline void DeviceModel::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceModel.devid)
}

// string model = 2;
inline void DeviceModel::clear_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_.ClearToEmpty();
}
inline const std::string& DeviceModel::model() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceModel.model)
  return _internal_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceModel::set_model(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceModel.model)
}
inline std::string* DeviceModel::mutable_model() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceModel.model)
  return _s;
}
inline const std::string& DeviceModel::_internal_model() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.model_.Get();
}
inline void DeviceModel::_internal_set_model(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_.Set(value, GetArena());
}
inline std::string* DeviceModel::_internal_mutable_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.model_.Mutable( GetArena());
}
inline std::string* DeviceModel::release_model() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceModel.model)
  return _impl_.model_.Release();
}
inline void DeviceModel::set_allocated_model(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.model_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_.IsDefault()) {
          _impl_.model_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceModel.model)
}

// -------------------------------------------------------------------

// CurrentApplication

// string devid = 1;
inline void CurrentApplication::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& CurrentApplication::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.CurrentApplication.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CurrentApplication::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.CurrentApplication.devid)
}
inline std::string* CurrentApplication::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.CurrentApplication.devid)
  return _s;
}
inline const std::string& CurrentApplication::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void CurrentApplication::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* CurrentApplication::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* CurrentApplication::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.CurrentApplication.devid)
  return _impl_.devid_.Release();
}
inline void CurrentApplication::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.CurrentApplication.devid)
}

// string appname = 2;
inline void CurrentApplication::clear_appname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appname_.ClearToEmpty();
}
inline const std::string& CurrentApplication::appname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.CurrentApplication.appname)
  return _internal_appname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CurrentApplication::set_appname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.CurrentApplication.appname)
}
inline std::string* CurrentApplication::mutable_appname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_appname();
  // @@protoc_insertion_point(field_mutable:PXREAService.CurrentApplication.appname)
  return _s;
}
inline const std::string& CurrentApplication::_internal_appname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.appname_.Get();
}
inline void CurrentApplication::_internal_set_appname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appname_.Set(value, GetArena());
}
inline std::string* CurrentApplication::_internal_mutable_appname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.appname_.Mutable( GetArena());
}
inline std::string* CurrentApplication::release_appname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.CurrentApplication.appname)
  return _impl_.appname_.Release();
}
inline void CurrentApplication::set_allocated_appname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appname_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.appname_.IsDefault()) {
          _impl_.appname_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.CurrentApplication.appname)
}

// -------------------------------------------------------------------

// ControllerBattery

// string devid = 1;
inline void ControllerBattery::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& ControllerBattery::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ControllerBattery.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ControllerBattery::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.ControllerBattery.devid)
}
inline std::string* ControllerBattery::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.ControllerBattery.devid)
  return _s;
}
inline const std::string& ControllerBattery::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void ControllerBattery::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* ControllerBattery::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* ControllerBattery::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.ControllerBattery.devid)
  return _impl_.devid_.Release();
}
inline void ControllerBattery::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ControllerBattery.devid)
}

// int32 controllerid = 2;
inline void ControllerBattery::clear_controllerid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.controllerid_ = 0;
}
inline ::int32_t ControllerBattery::controllerid() const {
  // @@protoc_insertion_point(field_get:PXREAService.ControllerBattery.controllerid)
  return _internal_controllerid();
}
inline void ControllerBattery::set_controllerid(::int32_t value) {
  _internal_set_controllerid(value);
  // @@protoc_insertion_point(field_set:PXREAService.ControllerBattery.controllerid)
}
inline ::int32_t ControllerBattery::_internal_controllerid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.controllerid_;
}
inline void ControllerBattery::_internal_set_controllerid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.controllerid_ = value;
}

// bool connected = 3;
inline void ControllerBattery::clear_connected() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connected_ = false;
}
inline bool ControllerBattery::connected() const {
  // @@protoc_insertion_point(field_get:PXREAService.ControllerBattery.connected)
  return _internal_connected();
}
inline void ControllerBattery::set_connected(bool value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:PXREAService.ControllerBattery.connected)
}
inline bool ControllerBattery::_internal_connected() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connected_;
}
inline void ControllerBattery::_internal_set_connected(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connected_ = value;
}

// uint32 battery = 4;
inline void ControllerBattery::clear_battery() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.battery_ = 0u;
}
inline ::uint32_t ControllerBattery::battery() const {
  // @@protoc_insertion_point(field_get:PXREAService.ControllerBattery.battery)
  return _internal_battery();
}
inline void ControllerBattery::set_battery(::uint32_t value) {
  _internal_set_battery(value);
  // @@protoc_insertion_point(field_set:PXREAService.ControllerBattery.battery)
}
inline ::uint32_t ControllerBattery::_internal_battery() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.battery_;
}
inline void ControllerBattery::_internal_set_battery(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.battery_ = value;
}

// -------------------------------------------------------------------

// DeviceBlob

// string devid = 1;
inline void DeviceBlob::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& DeviceBlob::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceBlob.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceBlob::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceBlob.devid)
}
inline std::string* DeviceBlob::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceBlob.devid)
  return _s;
}
inline const std::string& DeviceBlob::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void DeviceBlob::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* DeviceBlob::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* DeviceBlob::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceBlob.devid)
  return _impl_.devid_.Release();
}
inline void DeviceBlob::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceBlob.devid)
}

// bytes content = 2;
inline void DeviceBlob::clear_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& DeviceBlob::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceBlob.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceBlob::set_content(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceBlob.content)
}
inline std::string* DeviceBlob::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceBlob.content)
  return _s;
}
inline const std::string& DeviceBlob::_internal_content() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.content_.Get();
}
inline void DeviceBlob::_internal_set_content(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* DeviceBlob::_internal_mutable_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* DeviceBlob::release_content() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceBlob.content)
  return _impl_.content_.Release();
}
inline void DeviceBlob::set_allocated_content(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceBlob.content)
}

// -------------------------------------------------------------------

// DeviceMonitorParameter

// string devid = 1;
inline void DeviceMonitorParameter::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& DeviceMonitorParameter::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceMonitorParameter.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceMonitorParameter::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceMonitorParameter.devid)
}
inline std::string* DeviceMonitorParameter::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceMonitorParameter.devid)
  return _s;
}
inline const std::string& DeviceMonitorParameter::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void DeviceMonitorParameter::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* DeviceMonitorParameter::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* DeviceMonitorParameter::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceMonitorParameter.devid)
  return _impl_.devid_.Release();
}
inline void DeviceMonitorParameter::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceMonitorParameter.devid)
}

// uint32 width = 2;
inline void DeviceMonitorParameter::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0u;
}
inline ::uint32_t DeviceMonitorParameter::width() const {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceMonitorParameter.width)
  return _internal_width();
}
inline void DeviceMonitorParameter::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:PXREAService.DeviceMonitorParameter.width)
}
inline ::uint32_t DeviceMonitorParameter::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void DeviceMonitorParameter::_internal_set_width(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// uint32 height = 3;
inline void DeviceMonitorParameter::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0u;
}
inline ::uint32_t DeviceMonitorParameter::height() const {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceMonitorParameter.height)
  return _internal_height();
}
inline void DeviceMonitorParameter::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:PXREAService.DeviceMonitorParameter.height)
}
inline ::uint32_t DeviceMonitorParameter::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void DeviceMonitorParameter::_internal_set_height(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// VideoFrameInfo

// string devid = 1;
inline void VideoFrameInfo::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& VideoFrameInfo::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.VideoFrameInfo.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoFrameInfo::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.VideoFrameInfo.devid)
}
inline std::string* VideoFrameInfo::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.VideoFrameInfo.devid)
  return _s;
}
inline const std::string& VideoFrameInfo::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void VideoFrameInfo::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* VideoFrameInfo::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* VideoFrameInfo::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.VideoFrameInfo.devid)
  return _impl_.devid_.Release();
}
inline void VideoFrameInfo::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.VideoFrameInfo.devid)
}

// uint32 frameSize = 2;
inline void VideoFrameInfo::clear_framesize() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.framesize_ = 0u;
}
inline ::uint32_t VideoFrameInfo::framesize() const {
  // @@protoc_insertion_point(field_get:PXREAService.VideoFrameInfo.frameSize)
  return _internal_framesize();
}
inline void VideoFrameInfo::set_framesize(::uint32_t value) {
  _internal_set_framesize(value);
  // @@protoc_insertion_point(field_set:PXREAService.VideoFrameInfo.frameSize)
}
inline ::uint32_t VideoFrameInfo::_internal_framesize() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.framesize_;
}
inline void VideoFrameInfo::_internal_set_framesize(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.framesize_ = value;
}

// uint32 width = 3;
inline void VideoFrameInfo::clear_width() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = 0u;
}
inline ::uint32_t VideoFrameInfo::width() const {
  // @@protoc_insertion_point(field_get:PXREAService.VideoFrameInfo.width)
  return _internal_width();
}
inline void VideoFrameInfo::set_width(::uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:PXREAService.VideoFrameInfo.width)
}
inline ::uint32_t VideoFrameInfo::_internal_width() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.width_;
}
inline void VideoFrameInfo::_internal_set_width(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.width_ = value;
}

// uint32 height = 4;
inline void VideoFrameInfo::clear_height() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = 0u;
}
inline ::uint32_t VideoFrameInfo::height() const {
  // @@protoc_insertion_point(field_get:PXREAService.VideoFrameInfo.height)
  return _internal_height();
}
inline void VideoFrameInfo::set_height(::uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:PXREAService.VideoFrameInfo.height)
}
inline ::uint32_t VideoFrameInfo::_internal_height() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.height_;
}
inline void VideoFrameInfo::_internal_set_height(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.height_ = value;
}

// uint32 bytesPerLine = 5;
inline void VideoFrameInfo::clear_bytesperline() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytesperline_ = 0u;
}
inline ::uint32_t VideoFrameInfo::bytesperline() const {
  // @@protoc_insertion_point(field_get:PXREAService.VideoFrameInfo.bytesPerLine)
  return _internal_bytesperline();
}
inline void VideoFrameInfo::set_bytesperline(::uint32_t value) {
  _internal_set_bytesperline(value);
  // @@protoc_insertion_point(field_set:PXREAService.VideoFrameInfo.bytesPerLine)
}
inline ::uint32_t VideoFrameInfo::_internal_bytesperline() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bytesperline_;
}
inline void VideoFrameInfo::_internal_set_bytesperline(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bytesperline_ = value;
}

// int32 pixFormat = 6;
inline void VideoFrameInfo::clear_pixformat() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixformat_ = 0;
}
inline ::int32_t VideoFrameInfo::pixformat() const {
  // @@protoc_insertion_point(field_get:PXREAService.VideoFrameInfo.pixFormat)
  return _internal_pixformat();
}
inline void VideoFrameInfo::set_pixformat(::int32_t value) {
  _internal_set_pixformat(value);
  // @@protoc_insertion_point(field_set:PXREAService.VideoFrameInfo.pixFormat)
}
inline ::int32_t VideoFrameInfo::_internal_pixformat() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pixformat_;
}
inline void VideoFrameInfo::_internal_set_pixformat(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pixformat_ = value;
}

// -------------------------------------------------------------------

// DeviceMonitorSharedMemoryKey

// string smkey = 1;
inline void DeviceMonitorSharedMemoryKey::clear_smkey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smkey_.ClearToEmpty();
}
inline const std::string& DeviceMonitorSharedMemoryKey::smkey() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceMonitorSharedMemoryKey.smkey)
  return _internal_smkey();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceMonitorSharedMemoryKey::set_smkey(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smkey_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceMonitorSharedMemoryKey.smkey)
}
inline std::string* DeviceMonitorSharedMemoryKey::mutable_smkey() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_smkey();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceMonitorSharedMemoryKey.smkey)
  return _s;
}
inline const std::string& DeviceMonitorSharedMemoryKey::_internal_smkey() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.smkey_.Get();
}
inline void DeviceMonitorSharedMemoryKey::_internal_set_smkey(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smkey_.Set(value, GetArena());
}
inline std::string* DeviceMonitorSharedMemoryKey::_internal_mutable_smkey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.smkey_.Mutable( GetArena());
}
inline std::string* DeviceMonitorSharedMemoryKey::release_smkey() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceMonitorSharedMemoryKey.smkey)
  return _impl_.smkey_.Release();
}
inline void DeviceMonitorSharedMemoryKey::set_allocated_smkey(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.smkey_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.smkey_.IsDefault()) {
          _impl_.smkey_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceMonitorSharedMemoryKey.smkey)
}

// -------------------------------------------------------------------

// VideoControlResult

// string devid = 1;
inline void VideoControlResult::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& VideoControlResult::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.VideoControlResult.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoControlResult::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.VideoControlResult.devid)
}
inline std::string* VideoControlResult::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.VideoControlResult.devid)
  return _s;
}
inline const std::string& VideoControlResult::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void VideoControlResult::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* VideoControlResult::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* VideoControlResult::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.VideoControlResult.devid)
  return _impl_.devid_.Release();
}
inline void VideoControlResult::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.VideoControlResult.devid)
}

// string action = 2;
inline void VideoControlResult::clear_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.ClearToEmpty();
}
inline const std::string& VideoControlResult::action() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.VideoControlResult.action)
  return _internal_action();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoControlResult::set_action(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.VideoControlResult.action)
}
inline std::string* VideoControlResult::mutable_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:PXREAService.VideoControlResult.action)
  return _s;
}
inline const std::string& VideoControlResult::_internal_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.action_.Get();
}
inline void VideoControlResult::_internal_set_action(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.Set(value, GetArena());
}
inline std::string* VideoControlResult::_internal_mutable_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.action_.Mutable( GetArena());
}
inline std::string* VideoControlResult::release_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.VideoControlResult.action)
  return _impl_.action_.Release();
}
inline void VideoControlResult::set_allocated_action(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.action_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.action_.IsDefault()) {
          _impl_.action_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.VideoControlResult.action)
}

// int32 result = 3;
inline void VideoControlResult::clear_result() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = 0;
}
inline ::int32_t VideoControlResult::result() const {
  // @@protoc_insertion_point(field_get:PXREAService.VideoControlResult.result)
  return _internal_result();
}
inline void VideoControlResult::set_result(::int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:PXREAService.VideoControlResult.result)
}
inline ::int32_t VideoControlResult::_internal_result() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.result_;
}
inline void VideoControlResult::_internal_set_result(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.result_ = value;
}

// int32 errorcode = 4;
inline void VideoControlResult::clear_errorcode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errorcode_ = 0;
}
inline ::int32_t VideoControlResult::errorcode() const {
  // @@protoc_insertion_point(field_get:PXREAService.VideoControlResult.errorcode)
  return _internal_errorcode();
}
inline void VideoControlResult::set_errorcode(::int32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:PXREAService.VideoControlResult.errorcode)
}
inline ::int32_t VideoControlResult::_internal_errorcode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.errorcode_;
}
inline void VideoControlResult::_internal_set_errorcode(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.errorcode_ = value;
}

// string detail = 5;
inline void VideoControlResult::clear_detail() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.detail_.ClearToEmpty();
}
inline const std::string& VideoControlResult::detail() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.VideoControlResult.detail)
  return _internal_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoControlResult::set_detail(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.detail_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.VideoControlResult.detail)
}
inline std::string* VideoControlResult::mutable_detail() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_detail();
  // @@protoc_insertion_point(field_mutable:PXREAService.VideoControlResult.detail)
  return _s;
}
inline const std::string& VideoControlResult::_internal_detail() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.detail_.Get();
}
inline void VideoControlResult::_internal_set_detail(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.detail_.Set(value, GetArena());
}
inline std::string* VideoControlResult::_internal_mutable_detail() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.detail_.Mutable( GetArena());
}
inline std::string* VideoControlResult::release_detail() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.VideoControlResult.detail)
  return _impl_.detail_.Release();
}
inline void VideoControlResult::set_allocated_detail(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.detail_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.detail_.IsDefault()) {
          _impl_.detail_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.VideoControlResult.detail)
}

// -------------------------------------------------------------------

// DeviceControlParameterJson

// string devid = 1;
inline void DeviceControlParameterJson::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& DeviceControlParameterJson::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceControlParameterJson.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceControlParameterJson::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceControlParameterJson.devid)
}
inline std::string* DeviceControlParameterJson::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceControlParameterJson.devid)
  return _s;
}
inline const std::string& DeviceControlParameterJson::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void DeviceControlParameterJson::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* DeviceControlParameterJson::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* DeviceControlParameterJson::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceControlParameterJson.devid)
  return _impl_.devid_.Release();
}
inline void DeviceControlParameterJson::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceControlParameterJson.devid)
}

// string parameter = 2;
inline void DeviceControlParameterJson::clear_parameter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parameter_.ClearToEmpty();
}
inline const std::string& DeviceControlParameterJson::parameter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceControlParameterJson.parameter)
  return _internal_parameter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceControlParameterJson::set_parameter(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parameter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceControlParameterJson.parameter)
}
inline std::string* DeviceControlParameterJson::mutable_parameter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_parameter();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceControlParameterJson.parameter)
  return _s;
}
inline const std::string& DeviceControlParameterJson::_internal_parameter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.parameter_.Get();
}
inline void DeviceControlParameterJson::_internal_set_parameter(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parameter_.Set(value, GetArena());
}
inline std::string* DeviceControlParameterJson::_internal_mutable_parameter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.parameter_.Mutable( GetArena());
}
inline std::string* DeviceControlParameterJson::release_parameter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceControlParameterJson.parameter)
  return _impl_.parameter_.Release();
}
inline void DeviceControlParameterJson::set_allocated_parameter(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.parameter_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parameter_.IsDefault()) {
          _impl_.parameter_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceControlParameterJson.parameter)
}

// -------------------------------------------------------------------

// DeviceStateJson

// string devid = 1;
inline void DeviceStateJson::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& DeviceStateJson::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceStateJson.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceStateJson::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceStateJson.devid)
}
inline std::string* DeviceStateJson::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceStateJson.devid)
  return _s;
}
inline const std::string& DeviceStateJson::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void DeviceStateJson::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* DeviceStateJson::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* DeviceStateJson::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceStateJson.devid)
  return _impl_.devid_.Release();
}
inline void DeviceStateJson::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceStateJson.devid)
}

// string statejson = 2;
inline void DeviceStateJson::clear_statejson() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.statejson_.ClearToEmpty();
}
inline const std::string& DeviceStateJson::statejson() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.DeviceStateJson.statejson)
  return _internal_statejson();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceStateJson::set_statejson(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.statejson_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.DeviceStateJson.statejson)
}
inline std::string* DeviceStateJson::mutable_statejson() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_statejson();
  // @@protoc_insertion_point(field_mutable:PXREAService.DeviceStateJson.statejson)
  return _s;
}
inline const std::string& DeviceStateJson::_internal_statejson() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.statejson_.Get();
}
inline void DeviceStateJson::_internal_set_statejson(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.statejson_.Set(value, GetArena());
}
inline std::string* DeviceStateJson::_internal_mutable_statejson() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.statejson_.Mutable( GetArena());
}
inline std::string* DeviceStateJson::release_statejson() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.DeviceStateJson.statejson)
  return _impl_.statejson_.Release();
}
inline void DeviceStateJson::set_allocated_statejson(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.statejson_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.statejson_.IsDefault()) {
          _impl_.statejson_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.DeviceStateJson.statejson)
}

// -------------------------------------------------------------------

// ScreenMonitorParameter

// string devid = 1;
inline void ScreenMonitorParameter::clear_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.ClearToEmpty();
}
inline const std::string& ScreenMonitorParameter::devid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PXREAService.ScreenMonitorParameter.devid)
  return _internal_devid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ScreenMonitorParameter::set_devid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PXREAService.ScreenMonitorParameter.devid)
}
inline std::string* ScreenMonitorParameter::mutable_devid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_devid();
  // @@protoc_insertion_point(field_mutable:PXREAService.ScreenMonitorParameter.devid)
  return _s;
}
inline const std::string& ScreenMonitorParameter::_internal_devid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.devid_.Get();
}
inline void ScreenMonitorParameter::_internal_set_devid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.Set(value, GetArena());
}
inline std::string* ScreenMonitorParameter::_internal_mutable_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.devid_.Mutable( GetArena());
}
inline std::string* ScreenMonitorParameter::release_devid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PXREAService.ScreenMonitorParameter.devid)
  return _impl_.devid_.Release();
}
inline void ScreenMonitorParameter::set_allocated_devid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.devid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devid_.IsDefault()) {
          _impl_.devid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PXREAService.ScreenMonitorParameter.devid)
}

// int32 quality = 2;
inline void ScreenMonitorParameter::clear_quality() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quality_ = 0;
}
inline ::int32_t ScreenMonitorParameter::quality() const {
  // @@protoc_insertion_point(field_get:PXREAService.ScreenMonitorParameter.quality)
  return _internal_quality();
}
inline void ScreenMonitorParameter::set_quality(::int32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:PXREAService.ScreenMonitorParameter.quality)
}
inline ::int32_t ScreenMonitorParameter::_internal_quality() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quality_;
}
inline void ScreenMonitorParameter::_internal_set_quality(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quality_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace PXREAService


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_PXREAService_2eproto_2epb_2eh
